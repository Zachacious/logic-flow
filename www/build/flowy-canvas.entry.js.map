{"file":"flowy-canvas.entry.esm.js","mappings":"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","names":[],"sources":["src/components/flowy-canvas/flowy-canvas.css?tag=flowy-canvas","src/components/flowy-canvas/flowy-canvas.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element, State, Watch } from '@stencil/core';\nimport { Point } from '../../types/Point';\nimport { debounce } from '../../utils/debounce';\nimport { throttle } from '../../utils/throttle';\nimport { getEventLocation } from '../../utils/getEventLocation';\n\n@Component({\n  tag: 'flowy-canvas',\n  styleUrl: 'flowy-canvas.css',\n  shadow: false,\n})\nexport class FlowyCanvas {\n  @Element() el: HTMLElement;\n\n  @Prop() renderGrid: boolean = true;\n  @Prop() gridSize: number = 20;\n  @Prop() gridBgColor: string = '#f3f3f3';\n  @Prop() gridLineColor: string = '#555555';\n  @Prop() maxZoom: number = 3;\n  @Prop() minZoom: number = 0.2;\n  @Prop() zoomSpeed: number = 0.08;\n\n  @State() zoom: number = 1;\n  @State() pan: Point = { x: 0, y: 0 };\n\n  private _initialPinchDistance: number = 0;\n  private _isDragging: boolean = false;\n  private _dragStart: Point = { x: 0, y: 0 };\n\n  private _canvasEl: HTMLDivElement;\n  private _contentEl: HTMLDivElement;\n  private _gridEl: HTMLCanvasElement;\n  private _needsRedraw: boolean = true;\n  private _canvasRect: DOMRect;\n\n  private _resizeObserver: ResizeObserver;\n  private _debouncedResize = debounce(() => this.onResize(), 50);\n  private _debouncedUpdateScreen = debounce(() => this.updateScreen(), 5);\n  private _throttledPointerMove = throttle(e => this.onPointerMove(e), 30);\n  private _throttledTouchMove = throttle(e => this.handleTouchMove(e), 30);\n\n  private _elMouseDown = (e: MouseEvent | TouchEvent) => this.onPointerDown(e);\n  private _elMouseUp = () => this.onPointerUp();\n  private _elMouseMove = (e: MouseEvent | TouchEvent) =>\n    this._throttledPointerMove(e);\n\n  private _elTouchStart = (e: TouchEvent) => this.handleTouchStart(e);\n  private _elTouchMove = (e: TouchEvent) => this._throttledTouchMove(e);\n  private _elTouchEnd = () => this.onPointerUp();\n\n  private _elWheel = (e: WheelEvent) => this.handleWheel(e);\n\n  componentDidLoad() {\n    this._canvasEl = this.el.querySelector('.flowy-canvas') as HTMLDivElement;\n    this._contentEl = this.el.querySelector('.flowy-content') as HTMLDivElement;\n    this._gridEl = this.el.querySelector('.flowy-grid') as HTMLCanvasElement;\n\n    this._canvasRect = this._canvasEl.getBoundingClientRect();\n\n    const canvasEl = this._canvasEl;\n    this.renderGridLines();\n\n    this._initialPinchDistance = 0;\n\n    // setup event listeners\n    canvasEl.addEventListener('mousedown', this._elMouseDown, {\n      passive: true,\n    });\n    canvasEl.addEventListener('mouseup', this._elMouseUp, { passive: true });\n    canvasEl.addEventListener('mousemove', this._elMouseMove, {\n      passive: true,\n    });\n\n    canvasEl.addEventListener('touchstart', this._elTouchStart, {\n      passive: false,\n    });\n    canvasEl.addEventListener('touchmove', this._elTouchMove, {\n      passive: true,\n    });\n    canvasEl.addEventListener('touchend', this._elTouchEnd, { passive: true });\n\n    canvasEl.addEventListener('wheel', this._elWheel, { passive: false });\n\n    // Handle resize events\n    this._resizeObserver = new ResizeObserver(() => this._debouncedResize());\n    this._resizeObserver.observe(this._canvasEl);\n  }\n\n  disconnectedCallback() {\n    // Clean up resize observer\n    if (this._resizeObserver) {\n      this._resizeObserver.disconnect();\n    }\n\n    // Clean up event listeners\n    const canvasEl = this._canvasEl;\n    canvasEl.removeEventListener('mousedown', this._elMouseDown);\n    canvasEl.removeEventListener('mouseup', this._elMouseUp);\n    canvasEl.removeEventListener('mousemove', this._elMouseMove);\n\n    canvasEl.removeEventListener('touchstart', this._elTouchStart);\n    canvasEl.removeEventListener('touchmove', this._elTouchMove);\n    canvasEl.removeEventListener('touchend', this._elTouchEnd);\n\n    canvasEl.removeEventListener('wheel', this._elWheel);\n  }\n\n  @Watch('zoom')\n  zoomChanged() {\n    this._needsRedraw = true;\n    // this.updateScreen();\n    this._debouncedUpdateScreen();\n  }\n\n  @Watch('pan')\n  panChanged() {\n    this._needsRedraw = true;\n    // this.updateScreen();\n    this._debouncedUpdateScreen();\n  }\n\n  onResize() {\n    this._needsRedraw = true;\n    this._canvasRect = this._canvasEl.getBoundingClientRect();\n    this.renderGridLines();\n  }\n\n  renderGridLines() {\n    if (!this.renderGrid || !this._needsRedraw) return;\n\n    const canvasEl = this._gridEl;\n    const ctx = canvasEl.getContext('2d');\n    const width = this._canvasRect.width;\n    const height = this._canvasRect.height;\n    const step = this.gridSize * this.zoom;\n\n    const dpr = window.devicePixelRatio || 1;\n    canvasEl.width = width * dpr;\n    canvasEl.height = height * dpr;\n    ctx.scale(dpr, dpr);\n\n    ctx.strokeStyle = this.gridLineColor;\n    ctx.lineWidth = 1;\n\n    // clear\n    ctx.fillStyle = this.gridBgColor;\n    ctx.fillRect(0, 0, width, height);\n\n    const panOffsetX = (-this.pan.x % this.gridSize) * this.zoom;\n    const panOffsetY = (-this.pan.y % this.gridSize) * this.zoom;\n\n    ctx.beginPath();\n\n    // Draw vertical grid lines (x axis)\n    for (let x = -panOffsetX; x <= width; x += step) {\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n    }\n\n    // Draw horizontal grid lines (y axis)\n    for (let y = -panOffsetY; y <= height; y += step) {\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n    }\n\n    ctx.stroke();\n\n    this._needsRedraw = false;\n  }\n\n  updateScreen() {\n    // this.renderGridLines();\n    const contentEl = this._contentEl;\n    // Apply transformations to the content, aligning with the grid\n    contentEl.style.transform = `perspective(1px) scale(${this.zoom}) translate(${this.pan.x}px, ${this.pan.y}px)`;\n    requestAnimationFrame(() => this.renderGridLines());\n  }\n\n  // get location from event data for mouse or touch\n  getEventLocation(event: MouseEvent | TouchEvent) {\n    if (event instanceof TouchEvent) {\n      if (event.touches && event.touches[0]) {\n        return { x: event.touches[0].clientX, y: event.touches[0].clientY };\n      }\n    } else {\n      return { x: event.clientX, y: event.clientY };\n    }\n  }\n\n  onPointerDown(event: MouseEvent | TouchEvent) {\n    this._isDragging = true;\n    const loc = getEventLocation(event);\n    this._dragStart = {\n      x: loc.x / this.zoom - this.pan.x,\n      y: loc.y / this.zoom - this.pan.y,\n    };\n  }\n\n  onPointerUp() {\n    this._isDragging = false;\n    this._initialPinchDistance = 0;\n    // this._lastZoom = this.zoom;\n  }\n\n  onPointerMove(event: MouseEvent | TouchEvent) {\n    if (this._isDragging) {\n      // this._lastPan = this.pan;\n      const loc = getEventLocation(event);\n      this.pan = {\n        x: loc.x / this.zoom - this._dragStart.x,\n        y: loc.y / this.zoom - this._dragStart.y,\n      };\n    }\n  }\n\n  handleWheel(event: WheelEvent) {\n    event.preventDefault();\n\n    const canvasRect = this._canvasRect;\n    const mouseX = event.clientX - canvasRect.left;\n    const mouseY = event.clientY - canvasRect.top;\n\n    // Calculate the zoom level change\n    const zoomDelta = event.deltaY < 0 ? this.zoomSpeed : -this.zoomSpeed;\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.zoom + zoomDelta),\n    );\n\n    // Calculate the scale factor\n    const scaleFactor = newZoom / this.zoom;\n\n    // Adjust the pan position to keep the same point under the cursor\n    const newPanX = mouseX - (mouseX - this.pan.x * this.zoom) * scaleFactor;\n    const newPanY = mouseY - (mouseY - this.pan.y * this.zoom) * scaleFactor;\n\n    // Update pan and zoom\n    this.pan = { x: newPanX / newZoom, y: newPanY / newZoom };\n    // this._lastZoom = this.zoom;\n    this.zoom = newZoom;\n    this._needsRedraw = true;\n  }\n\n  handleTouchStart(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> start panning\n      this.onPointerDown(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> start pinch zoom\n      this._initialPinchDistance = 0; // Reset initial pinch distance\n      this.handlePinch(event); // Start pinch gesture\n    }\n  }\n\n  handleTouchMove(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> panning\n      this.onPointerMove(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> pinch zooming\n      this.handlePinch(event);\n    }\n  }\n  handlePinch(event: TouchEvent) {\n    if (event.touches.length !== 2) return;\n\n    // handle panning while pinching\n    this.onPointerMove(event);\n\n    event.preventDefault(); // Prevent default behavior like scrolling\n\n    const touch1 = event.touches[0];\n    const touch2 = event.touches[1];\n\n    // Calculate the distance between the two touch points (pinch)\n    const distance = Math.sqrt(\n      (touch1.clientX - touch2.clientX) ** 2 +\n        (touch1.clientY - touch2.clientY) ** 2,\n    );\n\n    if (this._initialPinchDistance === 0) {\n      // If it's the start of the pinch, initialize the pinch distance\n      this._initialPinchDistance = distance;\n    } else {\n      // Calculate the scale factor based on the distance change\n      const scaleFactor = distance / this._initialPinchDistance;\n\n      // Calculate the midpoint between the two fingers (the pinch center)\n      const pinchCenterX = (touch1.clientX + touch2.clientX) / 2;\n      const pinchCenterY = (touch1.clientY + touch2.clientY) / 2;\n\n      // Apply zoom and keep the pinch center fixed\n      this.adjustZoomOnPinch(scaleFactor, pinchCenterX, pinchCenterY);\n\n      // Update the initial pinch distance for the next move\n      this._initialPinchDistance = distance;\n    }\n  }\n\n  adjustZoomOnPinch(\n    scaleFactor: number,\n    pinchCenterX: number,\n    pinchCenterY: number,\n  ) {\n    // Calculate new zoom, ensuring it stays within min/max bounds\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.zoom * scaleFactor),\n    );\n\n    // Find the pinch center position relative to the content's current position and zoom\n    const pinchContentX = (pinchCenterX - this.pan.x * this.zoom) / this.zoom;\n    const pinchContentY = (pinchCenterY - this.pan.y * this.zoom) / this.zoom;\n\n    // Adjust pan so the pinch center stays fixed after zooming\n    this.pan = {\n      x: pinchCenterX / newZoom - pinchContentX,\n      y: pinchCenterY / newZoom - pinchContentY,\n    };\n\n    // Apply the new zoom level\n    this.zoom = newZoom;\n\n    // Trigger a screen redraw\n    this._debouncedUpdateScreen();\n  }\n\n  render() {\n    return (\n      <Host>\n        {/* <div class=\"flowy-virtual-area\"> */}\n        <div class=\"flowy-canvas\">\n          <canvas class=\"flowy-grid\"></canvas>\n          <div class=\"flowy-content\">\n            <slot></slot>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}