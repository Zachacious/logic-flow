{"file":"logic-node.entry.esm.js","mappings":";;;AAAA,MAAM,YAAY,GAAG,sBAAsB;;MCU9B,SAAS;;;QAUZ,SAAI,GAAW,MAAM,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBAP5B,SAAS;qBACR,MAAM;wBACa,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;oBACnB,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;0BAEvC,KAAK;;IAI3B,iBAAiB;;QAEf,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,qBAAqB,EAAE,CAAC;QAC7C,IAAI,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;KAC5D;IAGD,gBAAgB;;QAEd,IAAI,CAAC,eAAe,EAAE,CAAC;;KAExB;IAED,eAAe;QACb,qBAAqB,CAAC;YACpB,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,GAAG,aAAa,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;SACpF,CAAC,CAAC;KACJ;IAED,MAAM;QACJ,QACE,EAAC,IAAI,qDAAC,KAAK,EAAC,YAAY,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,IACpC,4DAAK,KAAK,EAAC,mBAAmB,IAC3B,IAAI,CAAC,KAAK,EACX,6DAAM,IAAI,EAAC,QAAQ,GAAQ,CACvB,EACN,8DAAa,EACb,4DAAK,KAAK,EAAC,mBAAmB,IAC5B,6DAAM,IAAI,EAAC,QAAQ,GAAQ,CACvB,CAED,EACP;KACH;;;;;;;;;;","names":[],"sources":["src/components/logic-node/logic-node.css?tag=logic-node","src/components/logic-node/logic-node.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element, State, Watch } from '@stencil/core';\nimport { Point } from '../../types/Point';\nimport { Size } from '../../types/Size';\nimport { global } from '../../global';\n\n@Component({\n  tag: 'logic-node',\n  styleUrl: 'logic-node.css',\n  shadow: false,\n})\nexport class LogicNode {\n  @Element() el: HTMLElement;\n\n  @Prop() type: string = 'default';\n  @Prop() title: string = 'Node';\n  @Prop({ mutable: true }) position: Point = { x: 0, y: 0 };\n  @Prop({ mutable: true }) size: Size = { width: 0, height: 0 };\n\n  @State() isDragging = false;\n\n  private _uid: string = global().registerNode(this);\n\n  componentWillLoad() {\n    //  set initial size\n    this.updateTransform();\n    const rect = this.el.getBoundingClientRect();\n    this.size = { width: rect.width, height: rect.height };\n    this.position = { x: this.position.x, y: this.position.y };\n  }\n\n  @Watch('position')\n  onPositionChange() {\n    // update transform\n    this.updateTransform();\n    // this._debouncedUpdateTransform();\n  }\n\n  updateTransform() {\n    requestAnimationFrame(() => {\n      this.el.style.transform = `translate(${this.position.x}px, ${this.position.y}px )`;\n    });\n  }\n\n  render() {\n    return (\n      <Host class=\"flowy-node\" id={this._uid}>\n        <div class=\"flowy-node-header\">\n          {this.title}\n          <slot name=\"header\"></slot>\n        </div>\n        <slot></slot>\n        <div class=\"flowy-node-footer\">\n          <slot name=\"footer\"></slot>\n        </div>\n        {/* </div> */}\n      </Host>\n    );\n  }\n}\n"],"version":3}