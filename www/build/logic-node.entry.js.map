{"file":"logic-node.entry.esm.js","mappings":";;;;AAAA,MAAM,YAAY,GAAG,sBAAsB;;MCa9B,SAAS;;;QASZ,SAAI,GAAW,MAAM,EAAE,CAAC;QACxB,gBAAW,GAAG,CAAC,CAAC;QAChB,eAAU,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QAEpC,eAAU,GAAU,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;;;;;;;;;;QAc3B,8BAAyB,GAAG,QAAQ,CAC1C,MAAM,IAAI,CAAC,eAAe,EAAE,EAC5B,EAAE,CACH,CAAC;oBA3BqB,SAAS;qBACR,MAAM;wBACa,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;0BAEnC,KAAK;;IAyB3B,gBAAgB;;;;;;;;;;;;;KAaf;IAED,oBAAoB;;;;;;;KAOnB;IAGD,gBAAgB;;QAEd,IAAI,CAAC,yBAAyB,EAAE,CAAC;;KAElC;IAED,eAAe;QACb,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,GAAG,aAAa,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;KACpF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkED,MAAM;QACJ,QACE,EAAC,IAAI,qDAAC,KAAK,EAAC,YAAY,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,IAEpC,4DAAK,KAAK,EAAC,mBAAmB,IAC3B,IAAI,CAAC,KAAK,EACX,6DAAM,IAAI,EAAC,QAAQ,GAAQ,CACvB,EACN,8DAAa,EACb,4DAAK,KAAK,EAAC,mBAAmB,GAAO,CAEhC,EACP;KACH;;;;;;;;;;","names":[],"sources":["src/components/logic-node/logic-node.css?tag=logic-node","src/components/logic-node/logic-node.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element, State, Watch } from '@stencil/core';\nimport { Point } from '../../types/Point';\nimport { throttle } from '../../utils/throttle';\nimport { getEventLocation } from '../../utils/getEventLocation';\nimport { debounce } from '../../utils/debounce';\nimport { nanoid } from 'nanoid';\n// import { events } from '../../events';\n\n@Component({\n  tag: 'logic-node',\n  styleUrl: 'logic-node.css',\n  shadow: false,\n})\nexport class LogicNode {\n  @Element() el: HTMLElement;\n\n  @Prop() type: string = 'default';\n  @Prop() title: string = 'Node';\n  @Prop({ mutable: true }) position: Point = { x: 0, y: 0 };\n\n  @State() isDragging = false;\n\n  private _uid: string = nanoid();\n  private _canvasZoom = 1;\n  private _canvasPan = { x: 0, y: 0 };\n\n  _dragStart: Point = { x: 0, y: 0 };\n\n  // private _throttledPointerMove = throttle(e => this.onPointerMove(e), 10);\n  // private _throttledTouchMove = throttle(e => this.handleTouchMove(e), 10);\n\n  // private _elMouseDown = (e: MouseEvent | TouchEvent) => this.onPointerDown(e);\n  // private _elMouseUp = () => this.onPointerUp();\n  // private _elMouseMove = (e: MouseEvent | TouchEvent) =>\n  //   this._throttledPointerMove(e);\n\n  // private _elTouchStart = (e: TouchEvent) => this.handleTouchStart(e);\n  // private _elTouchMove = (e: TouchEvent) => this._throttledTouchMove(e);\n  // private _elTouchEnd = () => this.onPointerUp();\n\n  private _debouncedUpdateTransform = debounce(\n    () => this.updateTransform(),\n    10,\n  );\n\n  componentDidLoad() {\n    // window.addEventListener('mouseup', this._elMouseUp, { passive: true });\n    // window.addEventListener('mousemove', this._elMouseMove, { passive: false });\n    // this.el.addEventListener('mousedown', this._elMouseDown, {\n    //   passive: false,\n    // });\n    // this.el.addEventListener('touchstart', this._elTouchStart, {\n    //   passive: false,\n    // });\n    // this.el.addEventListener('touchend', this._elTouchEnd, { passive: true });\n    // this.el.addEventListener('touchmove', this._elTouchMove, {\n    //   passive: false,\n    // });\n  }\n\n  disconnectedCallback() {\n    // window.removeEventListener('mouseup', this._elMouseUp);\n    // window.removeEventListener('mousemove', this._elMouseMove);\n    // this.el.removeEventListener('mousedown', this._elMouseDown);\n    // this.el.removeEventListener('touchstart', this._elTouchStart);\n    // this.el.removeEventListener('touchend', this._elTouchEnd);\n    // this.el.removeEventListener('touchmove', this._elTouchMove);\n  }\n\n  @Watch('position')\n  onPositionChange() {\n    // update transform\n    this._debouncedUpdateTransform();\n    // this.el.style.transform = `translate(${this.position.x}px, ${this.position.y}px)`;\n  }\n\n  updateTransform() {\n    this.el.style.transform = `translate(${this.position.x}px, ${this.position.y}px )`;\n  }\n\n  // handle drag and drop positioning\n  // onPointerDown(e: MouseEvent | TouchEvent) {\n  //   // e.stopPropagation();\n  //   this.isDragging = true;\n\n  //   const loc = getEventLocation(e);\n  //   // Get the current position of the node\n  //   const nodeRect = this.el.getBoundingClientRect();\n\n  //   // Get canvas bounding rect for pan/zoom calculations\n  //   const contentEl = this.el.closest('.flowy-content') as HTMLElement;\n  //   if (!contentEl) return;\n\n  //   // Store the current canvas zoom level\n  //   const zoomMatches = contentEl.style.transform.match(\n  //     /scale\\((\\d+(?:\\.\\d+)?)\\)/,\n  //   );\n  //   this._canvasZoom = zoomMatches ? parseFloat(zoomMatches[1]) : 1;\n\n  //   // Store the current canvas pan position\n  //   const panMatches = contentEl.style.transform.match(\n  //     /translate\\((-?\\d+(?:\\.\\d*)?)px, (-?\\d+(?:\\.\\d*)?)px\\)/,\n  //   );\n\n  //   this._canvasPan = {\n  //     x: panMatches ? parseInt(panMatches[1], 10) : 0,\n  //     y: panMatches ? parseInt(panMatches[2], 10) : 0,\n  //   };\n\n  //   this._dragStart = {\n  //     x: (loc.x - nodeRect.left) / this._canvasZoom,\n  //     y: (loc.y - nodeRect.top) / this._canvasZoom,\n  //   };\n  // }\n\n  // onPointerMove(e: MouseEvent | TouchEvent) {\n  //   if (!this.isDragging) return;\n  //   e.stopPropagation();\n\n  //   requestAnimationFrame(() => {\n  //     const loc = getEventLocation(e);\n  //     const newX =\n  //       loc.x / this._canvasZoom - this._dragStart.x - this._canvasPan.x;\n  //     const newY =\n  //       loc.y / this._canvasZoom - this._dragStart.y - this._canvasPan.y;\n\n  //     this.position = { x: newX, y: newY };\n  //   });\n  // }\n\n  // onPointerUp() {\n  //   this.isDragging = false;\n  // }\n\n  // handleTouchStart(e: TouchEvent) {\n  //   e.preventDefault();\n  //   this.onPointerDown(e);\n  // }\n\n  // handleTouchMove(e: TouchEvent) {\n  //   e.preventDefault();\n  //   this.onPointerMove(e);\n  // }\n\n  render() {\n    return (\n      <Host class=\"flowy-node\" id={this._uid}>\n        {/* <div class=\"flowy-node\"> */}\n        <div class=\"flowy-node-header\">\n          {this.title}\n          <slot name=\"header\"></slot>\n        </div>\n        <slot></slot>\n        <div class=\"flowy-node-footer\"></div>\n        {/* </div> */}\n      </Host>\n    );\n  }\n}\n"],"version":3}