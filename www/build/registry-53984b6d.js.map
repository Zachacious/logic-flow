{"file":"registry-53984b6d.js","mappings":"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","names":["scopedUrlAlphabet"],"sources":["node_modules/nanoid/url-alphabet/index.js","node_modules/nanoid/index.browser.js","src/registry.ts"],"sourcesContent":["export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { nanoid } from 'nanoid';\nimport { LogicConnection } from './components';\nimport { FlowyCanvas } from './components/flowy-canvas/flowy-canvas';\nimport { LogicConnector } from './components/logic-connector/logic-connector';\nimport { LogicNode } from './components/logic-node/logic-node';\n\nconst viewports = new Map<string, FlowyCanvas>();\nconst nodes = new Map<string, LogicNode>();\nconst connectors = new Map<string, LogicConnector>();\nconst connections = new Map<string, LogicConnection>();\n\nexport const registry = () => {\n  const registerViewport = (canvas: FlowyCanvas) => {\n    const id = nanoid();\n    viewports.set(id, canvas);\n    return id;\n  };\n\n  const registerNode = (node: LogicNode) => {\n    const id = nanoid();\n    nodes.set(id, node);\n    return id;\n  };\n\n  const registerConnector = (connector: LogicConnector) => {\n    const id = nanoid();\n    connectors.set(id, connector);\n    return id;\n  };\n\n  const registerConnection = (connection: LogicConnection) => {\n    const id = nanoid();\n    connections.set(id, connection);\n    return id;\n  };\n\n  const getViewport = (id: string) => viewports.get(id);\n  const getNode = (id: string) => nodes.get(id);\n  const getConnector = (id: string) => connectors.get(id);\n  const getConnection = (id: string) => connections.get(id);\n\n  return {\n    registerViewport,\n    registerNode,\n    registerConnector,\n    registerConnection,\n    getViewport,\n    getNode,\n    getConnector,\n    getConnection,\n  };\n};\n"],"version":3}