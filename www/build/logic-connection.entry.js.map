{"file":"logic-connection.entry.esm.js","mappings":";;;AAAA,MAAM,kBAAkB,GAAG,sBAAsB;;MCSpC,eAAe;;;QAMlB,SAAI,GAAW,MAAM,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;qBALlC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;mBAChB,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;oBACA,OAAO;;IAQ1C,UAAU;;QAER,MAAM,KAAK,GAAG;YACZ,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;SAC7B,CAAC;QACF,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAExD,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,GAAG,GAAG,CAAC,CAAC;;;QAIpD,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YAC1B,IAAI,CAAC,IAAI,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;cACrC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;cAC5C,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;cACxC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;SACpC;;aAEI;;YAEH,IAAI,CAAC,IAAI,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;cACrC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;cAC5C,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;cACxC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;SACpC;;KAEF;IACD,MAAM;QACJ,QACE,EAAC,IAAI,qDAAC,KAAK,EAAC,kBAAkB,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,IAC1C,4DAAK,KAAK,EAAC,YAAY,IACrB,6DAAM,KAAK,EAAC,iBAAiB,EAAC,CAAC,EAAE,IAAI,CAAC,IAAI,GAAS,CAC/C,CACD,EACP;KACH;;;;;;;;;;;","names":[],"sources":["src/components/logic-connection/logic-connection.css?tag=logic-connection","src/components/logic-connection/logic-connection.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, Watch, h } from '@stencil/core';\nimport { Point } from '../../types/Point';\nimport { global } from '../../global';\n\n@Component({\n  tag: 'logic-connection',\n  styleUrl: 'logic-connection.css',\n  shadow: false,\n})\nexport class LogicConnection {\n  @Prop() start: Point = { x: 0, y: 0 };\n  @Prop() end: Point = { x: 0, y: 0 };\n  @Prop() type: 'input' | 'output' = 'input';\n\n  path: string;\n  private _uid: string = global().registerConnection(this);\n\n  @Watch('start')\n  @Watch('end')\n  @Watch('type')\n  updatePath() {\n    // requestAnimationFrame(() => {\n    const delta = {\n      x: this.end.x - this.start.x,\n      y: this.end.y - this.start.y,\n    };\n    const distance = Math.sqrt(delta.x ** 2 + delta.y ** 2);\n\n    const controlOffset = Math.min(200, distance * 0.5);\n\n    // curve should be different depending on the direction\n    // if point comes out from left - curve should go to the right\n    if (this.type === 'output') {\n      this.path = `M ${this.start.x},${this.start.y}\n          C ${this.start.x + controlOffset},${this.start.y}\n            ${this.end.x - controlOffset},${this.end.y}\n            ${this.end.x},${this.end.y}`;\n    }\n    // if point comes out from right - curve should go to the left\n    else {\n      // so we need to swap control points\n      this.path = `M ${this.start.x},${this.start.y}\n          C ${this.start.x - controlOffset},${this.start.y}\n            ${this.end.x + controlOffset},${this.end.y}\n            ${this.end.x},${this.end.y}`;\n    }\n    // });\n  }\n  render() {\n    return (\n      <Host class=\"logic-connection\" id={this._uid}>\n        <svg class=\"connection\">\n          <path class=\"connection-line\" d={this.path}></path>\n        </svg>\n      </Host>\n    );\n  }\n}\n"],"version":3}