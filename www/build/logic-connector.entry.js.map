{"file":"logic-connector.entry.esm.js","mappings":";;;AAAA,MAAM,iBAAiB,GAAG,sBAAsB;;MCSnC,cAAc;;;QAOjB,SAAI,GAAW,MAAM,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAChD,gBAAW,GAAW,EAAE,CAAC;oBALE,OAAO;mCACW,IAAI;2BAChB,EAAE;;IAM3C,MAAM,MAAM;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;IAGD,MAAM,OAAO;QACX,MAAM,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzC;IAGD,cAAc;;QAEZ,MAAM,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,YAAY,CAAgB,CAAC;QACrE,MAAM,IAAI,GAAG,SAAS,CAAC,qBAAqB,EAAE,CAAC;;;;;;;;QAS/C,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;QAEnE,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;QAE3B,QAAQ,CAAC,MAAM,CAAC;YACd,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC;YAC1B,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC;YAC3B,EAAE,EAAE,IAAI,CAAC,IAAI;SACd,CAAC,CAAC;KACJ;IAED,gBAAgB;QACd,MAAM,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,YAAY,CAAgB,CAAC;QACrE,MAAM,IAAI,GAAG,SAAS,CAAC,qBAAqB,EAAE,CAAC;QAC/C,MAAM,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;YACnC,IAAI,EAAE,IAAI,CAAC,CAAC;YACZ,GAAG,EAAE,IAAI,CAAC,CAAC;YACX,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;;QAGF,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,cAAc,CAA2B,CAAC;QAE3E,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;gBACvB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;;gBAGtB,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;;gBAErD,QAAQ,CAAC,MAAM,CAAC;oBACd,CAAC,EAAE,IAAI,CAAC,CAAC;oBACT,CAAC,EAAE,IAAI,CAAC,CAAC;oBACT,EAAE,EAAE,IAAI,CAAC,IAAI;iBACd,CAAC,CAAC;aACJ,CAAC,CAAC;SACJ;KACF;IAED,oBAAoB;QAClB,MAAM,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzC;IAED,MAAM;QACJ,MAAM,SAAS,GACb,IAAI,CAAC,IAAI,KAAK,OAAO,GAAG,gBAAgB,GAAG,iBAAiB,CAAC;QAC/D,MAAM,SAAS,GACb,IAAI,CAAC,IAAI,KAAK,OAAO,GAAG,iBAAiB,GAAG,kBAAkB,CAAC;QAEjE,QACE,EAAC,IAAI,qDAAC,KAAK,EAAE,mBAAmB,SAAS,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,IAAI,IACxD,4DACE,KAAK,EAAE,aAAa,SAAS,IAC3B,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,WACjC,EAAE,GACG,EACP,4DAAK,KAAK,EAAE,qBAAqB,SAAS,EAAE,IAC1C,8DAAa,CACT,CACD,EACP;KACH;;;;;;;","names":[],"sources":["src/components/logic-connector/logic-connector.css?tag=logic-connector","src/components/logic-connector/logic-connector.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element, Method } from '@stencil/core';\nimport { LogicConnection } from '../logic-connection/logic-connection';\nimport { global } from '../../global';\n\n@Component({\n  tag: 'logic-connector',\n  styleUrl: 'logic-connector.css',\n  shadow: false,\n})\nexport class LogicConnector {\n  @Element() el: HTMLElement;\n\n  @Prop() type: 'input' | 'output' = 'input';\n  @Prop() connectingConnector: LogicConnector | null = null;\n  @Prop() connections: LogicConnection[] = [];\n\n  private _uid: string = global().registerConnector(this);\n  private _viewportId: string = '';\n\n  @Method()\n  async getUid() {\n    return this._uid;\n  }\n\n  @Method()\n  async destroy() {\n    global().unregisterConnector(this._uid);\n  }\n\n  @Method()\n  updateQuadtree() {\n    // console.log('updateQuadtree');\n    const connector = this.el.querySelector('.connector') as HTMLElement;\n    const rect = connector.getBoundingClientRect();\n    // global().connectorRects[this._uid] = {\n    //   left: rect.x,\n    //   top: rect.y,\n    //   width: rect.width,\n    //   height: rect.height,\n    // };\n\n    // Get the quadtree for the viewport\n    const quadtree = global().connectorQuadTrees.get(this._viewportId);\n    //remove the connector from the quadtree\n    quadtree.remove(this._uid);\n    // Add the connector to the quadtree\n    quadtree.insert({\n      x: rect.x + rect.width / 2,\n      y: rect.y + rect.height / 2,\n      id: this._uid,\n    });\n  }\n\n  componentDidLoad() {\n    const connector = this.el.querySelector('.connector') as HTMLElement;\n    const rect = connector.getBoundingClientRect();\n    global().connectorRects[this._uid] = {\n      left: rect.x,\n      top: rect.y,\n      width: rect.width,\n      height: rect.height,\n    };\n\n    // Get the viewport\n    const viewport = this.el.closest('flowy-canvas') as HTMLFlowyCanvasElement;\n\n    if (viewport) {\n      viewport.getUid().then(id => {\n        this._viewportId = id;\n\n        // Get the quadtree for the viewport\n        const quadtree = global().connectorQuadTrees.get(id);\n        // Add the connector to the quadtree\n        quadtree.insert({\n          x: rect.x,\n          y: rect.y,\n          id: this._uid,\n        });\n      });\n    }\n  }\n\n  disconnectedCallback() {\n    global().unregisterConnector(this._uid);\n  }\n\n  render() {\n    const sideClass =\n      this.type === 'input' ? 'left-connector' : 'right-connector';\n    const typeClass =\n      this.type === 'input' ? 'input-connector' : 'output-connector';\n\n    return (\n      <Host class={`logic-connector ${typeClass}`} id={this._uid}>\n        <div\n          class={`connector ${sideClass} ${\n            this.connections.length > 0 && 'connected'\n          }`}\n        ></div>\n        <div class={`connector-content ${sideClass}`}>\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}