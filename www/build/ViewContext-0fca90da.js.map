{"file":"ViewContext-0fca90da.js","mappings":"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AE,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEzE,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;KAC7C;CACF;AAED;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;MCpca,MAAM;IAKjB;QACE,IAAI,CAAC,GAAG,GAAG,MAAM,EAAE,CAAC;QACpB,IAAI,CAAC,GAAG,GAAG,E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","names":["scopedUrlAlphabet"],"sources":["src/utils/throttle.ts","node_modules/nanoid/url-alphabet/index.js","node_modules/nanoid/index.browser.js","src/types/Quadtree.ts","src/types/Camera.ts","src/types/ViewContext.ts"],"sourcesContent":["export const throttle = (fn: (...args: any[]) => void, delay: number) => {\n  let lastFunc: ReturnType<typeof setTimeout>;\n  let lastRan: number;\n  return (...args: any[]) => {\n    if (!lastRan) {\n      fn(...args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc);\n      lastFunc = setTimeout(() => {\n        if (Date.now() - lastRan >= delay) {\n          fn(...args);\n          lastRan = Date.now();\n        }\n      }, delay - (Date.now() - lastRan));\n    }\n  };\n};\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { Coords } from './Coords';\nimport { Rect } from './Rect';\nimport { Camera } from './Camera';\n\n// SpatialObject can be either a Point or a Rect with an ID for tracking\ntype SpatialObject = Point | BBox;\n\ninterface Point extends Coords {\n  id: string; // Unique ID of the point (e.g., connector)\n}\n\ninterface BBox extends Rect {\n  id: string; // Unique ID of the rect (e.g., node)\n}\n\nexport class Quadtree {\n  boundary: Rect;\n  capacity: number;\n  objects: SpatialObject[];\n  divided: boolean;\n  northeast: Quadtree | null;\n  northwest: Quadtree | null;\n  southeast: Quadtree | null;\n  southwest: Quadtree | null;\n  camera: Camera;\n\n  constructor(boundary: Rect, capacity: number, camera: Camera) {\n    this.boundary = boundary;\n    this.capacity = capacity;\n    this.objects = [];\n    this.divided = false;\n    this.northeast = null;\n    this.northwest = null;\n    this.southeast = null;\n    this.southwest = null;\n    this.camera = camera;\n  }\n\n  subdivide() {\n    const { left, top, width, height } = this.boundary;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n\n    this.northeast = new Quadtree(\n      { left: left + halfWidth, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.northwest = new Quadtree(\n      { left, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.southeast = new Quadtree(\n      {\n        left: left + halfWidth,\n        top: top + halfHeight,\n        width: halfWidth,\n        height: halfHeight,\n      },\n      this.capacity,\n      this.camera,\n    );\n    this.southwest = new Quadtree(\n      { left, top: top + halfHeight, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n\n    this.divided = true;\n  }\n\n  insert(object: SpatialObject): boolean {\n    if (!this.contains(object)) return false;\n\n    if (this.objects.length < this.capacity) {\n      this.objects.push(object);\n      return true;\n    } else {\n      if (!this.divided) this.subdivide();\n\n      return (\n        this.northeast!.insert(object) ||\n        this.northwest!.insert(object) ||\n        this.southeast!.insert(object) ||\n        this.southwest!.insert(object)\n      );\n    }\n  }\n\n  remove(id: string): boolean {\n    const removeFromNode = (node: Quadtree | null): boolean => {\n      if (!node) return false;\n\n      const originalLength = node.objects.length;\n      node.objects = node.objects.filter(obj => (obj as any).id !== id);\n\n      // If any objects were removed, return true\n      if (originalLength !== node.objects.length) return true;\n\n      // Recursively remove from child nodes if subdivided\n      if (node.divided) {\n        return (\n          removeFromNode(node.northwest) ||\n          removeFromNode(node.northeast) ||\n          removeFromNode(node.southwest) ||\n          removeFromNode(node.southeast)\n        );\n      }\n      return false;\n    };\n\n    return removeFromNode(this);\n  }\n\n  contains(object: SpatialObject): boolean {\n    if ('x' in object && 'y' in object) {\n      // It's a point\n      return this.containsPoint(object);\n    } else {\n      // It's a rect\n      return this.containsRect(object);\n    }\n  }\n\n  containsPoint(point: Point): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      point.x >= left &&\n      point.x < left + width &&\n      point.y >= top &&\n      point.y < top + height\n    );\n  }\n\n  containsRect(rect: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      rect.left >= left &&\n      rect.left + rect.width <= left + width &&\n      rect.top >= top &&\n      rect.top + rect.height <= top + height\n    );\n  }\n\n  query(\n    range: Rect,\n    found: SpatialObject[] = [],\n    pan: Coords,\n    zoom: number,\n  ): SpatialObject[] {\n    if (!this.intersects(range)) return found;\n\n    this.objects.forEach(obj => {\n      if (this.inRange(obj, range, pan, zoom)) {\n        found.push(obj);\n      }\n    });\n\n    if (this.divided) {\n      this.northwest!.query(range, found, pan, zoom);\n      this.northeast!.query(range, found, pan, zoom);\n      this.southwest!.query(range, found, pan, zoom);\n      this.southeast!.query(range, found, pan, zoom);\n    }\n\n    return found;\n  }\n\n  inRange(\n    object: SpatialObject,\n    range: Rect,\n    pan: Coords,\n    zoom: number,\n  ): boolean {\n    if ('x' in object && 'y' in object) {\n      // It's a point\n      return this.pointInRange(object, range, pan, zoom);\n    } else {\n      // It's a rect\n      return this.rectInRange(object, range, pan, zoom);\n    }\n  }\n\n  pointInRange(point: Point, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust point position relative to pan and zoom\n    const adjX = (point.x + pan.x) * zoom;\n    const adjY = (point.y + pan.y) * zoom;\n\n    return (\n      adjX >= range.left &&\n      adjX < range.left + range.width &&\n      adjY >= range.top &&\n      adjY < range.top + range.height\n    );\n  }\n\n  rectInRange(rect: Rect, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust rect position relative to pan and zoom\n    const adjLeft = (rect.left + pan.x) * zoom;\n    const adjTop = (rect.top + pan.y) * zoom;\n    const adjRight = adjLeft + rect.width * zoom;\n    const adjBottom = adjTop + rect.height * zoom;\n\n    return !(\n      adjRight < range.left ||\n      adjLeft > range.left + range.width ||\n      adjBottom < range.top ||\n      adjTop > range.top + range.height\n    );\n  }\n\n  intersects(range: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return !(\n      range.left > left + width ||\n      range.left + range.width < left ||\n      range.top > top + height ||\n      range.top + range.height < top\n    );\n  }\n\n  checkNearby(coords: Coords, range: number): SpatialObject | null {\n    const bounds = {\n      left: coords.x - range / 2,\n      top: coords.y - range / 2,\n      width: range,\n      height: range,\n    };\n\n    const nearby = this.query(bounds, [], this.camera.pos, this.camera.zoom);\n\n    return nearby.length > 0 ? nearby[0] : null;\n  }\n}\n\n// import { Camera } from './Camera';\n\n// interface Point {\n//   x: number;\n//   y: number;\n//   id: string; // Unique ID of the connector\n// }\n\n// interface BoundingBox {\n//   x: number;\n//   y: number;\n//   width: number;\n//   height: number;\n// }\n\n// export class Quadtree {\n//   boundary: BoundingBox;\n//   capacity: number;\n//   points: Point[];\n//   divided: boolean;\n//   northeast: Quadtree | null;\n//   northwest: Quadtree | null;\n//   southeast: Quadtree | null;\n//   southwest: Quadtree | null;\n//   camera: Camera;\n\n//   constructor(boundary: BoundingBox, capacity: number, camera: Camera) {\n//     this.boundary = boundary;\n//     this.capacity = capacity;\n//     this.points = [];\n//     this.divided = false;\n//     this.northeast = null;\n//     this.northwest = null;\n//     this.southeast = null;\n//     this.southwest = null;\n//     this.camera = camera;\n//   }\n\n//   subdivide() {\n//     const { x, y, width, height } = this.boundary;\n//     const halfWidth = width / 2;\n//     const halfHeight = height / 2;\n\n//     this.northeast = new Quadtree(\n//       { x: x + halfWidth, y: y, width: halfWidth, height: halfHeight },\n//       this.capacity,\n//       this.camera,\n//     );\n//     this.northwest = new Quadtree(\n//       { x: x, y: y, width: halfWidth, height: halfHeight },\n//       this.capacity,\n//       this.camera,\n//     );\n//     this.southeast = new Quadtree(\n//       {\n//         x: x + halfWidth,\n//         y: y + halfHeight,\n//         width: halfWidth,\n//         height: halfHeight,\n//       },\n//       this.capacity,\n//       this.camera,\n//     );\n//     this.southwest = new Quadtree(\n//       { x: x, y: y + halfHeight, width: halfWidth, height: halfHeight },\n//       this.capacity,\n//       this.camera,\n//     );\n\n//     this.divided = true;\n//   }\n\n//   insert(point: Point): boolean {\n//     if (!this.contains(point)) return false;\n\n//     if (this.points.length < this.capacity) {\n//       this.points.push(point);\n//       return true;\n//     } else {\n//       if (!this.divided) this.subdivide();\n\n//       return (\n//         this.northeast!.insert(point) ||\n//         this.northwest!.insert(point) ||\n//         this.southeast!.insert(point) ||\n//         this.southwest!.insert(point)\n//       );\n//     }\n//   }\n\n//   insertItems(points: Point[]): void {\n//     for (let point of points) {\n//       this.insert(point);\n//     }\n//   }\n\n//   remove(id: string): boolean {\n//     const removeFromNode = (node: Quadtree | null): boolean => {\n//       if (node === null) return false;\n\n//       // Remove points from the node\n//       node.points = node.points.filter(point => point.id !== id);\n\n//       // Recursively remove from child nodes\n//       const removed =\n//         removeFromNode(node.northwest) ||\n//         removeFromNode(node.northeast) ||\n//         removeFromNode(node.southwest) ||\n//         removeFromNode(node.southeast);\n\n//       // If no points in the node and no children have points, remove the node\n//       if (node.points.length === 0 && !node.divided) {\n//         node.northwest =\n//           node.northeast =\n//           node.southwest =\n//           node.southeast =\n//             null;\n//       }\n\n//       return removed;\n//     };\n\n//     return removeFromNode(this);\n//   }\n\n//   removeItems(ids: string[]): void {\n//     for (let id of ids) {\n//       this.remove(id);\n//     }\n//   }\n\n//   contains(point: Point): boolean {\n//     const { x, y, width, height } = this.boundary;\n//     return (\n//       point.x >= x &&\n//       point.x < x + width &&\n//       point.y >= y &&\n//       point.y < y + height\n//     );\n//   }\n\n//   query(\n//     range: BoundingBox,\n//     found: Point[] = [],\n//     pan: { x: number; y: number },\n//     zoom: number,\n//   ): Point[] {\n//     if (!this.intersects(range)) return found;\n\n//     for (let point of this.points) {\n//       if (this.inRange(point, range, pan, zoom)) {\n//         found.push(point);\n//       }\n//     }\n\n//     if (this.divided) {\n//       this.northwest!.query(range, found, pan, zoom);\n//       this.northeast!.query(range, found, pan, zoom);\n//       this.southwest!.query(range, found, pan, zoom);\n//       this.southeast!.query(range, found, pan, zoom);\n//     }\n\n//     return found;\n//   }\n\n//   inRange(\n//     point: Point,\n//     range: BoundingBox,\n//     pan: { x: number; y: number },\n//     zoom: number,\n//   ): boolean {\n//     // Adjust the point position relative to pan and zoom\n//     const adjPoint = {\n//       x: (point.x + pan.x) * zoom,\n//       y: (point.y + pan.y) * zoom,\n//     };\n\n//     // Check if the adjusted point is within the adjusted range\n//     return (\n//       adjPoint.x >= range.x &&\n//       adjPoint.x < range.x + range.width &&\n//       adjPoint.y >= range.y &&\n//       adjPoint.y < range.y + range.height\n//     );\n//   }\n\n//   intersects(range: BoundingBox): boolean {\n//     const { x, y, width, height } = this.boundary;\n//     return !(\n//       range.x > x + width ||\n//       range.x + range.width < x ||\n//       range.y > y + height ||\n//       range.y + range.height < y\n//     );\n//   }\n\n//   checkNearby(\n//     x: number,\n//     y: number,\n//     range: number,\n//     // pan: { x: number; y: number },\n//     // zoom: number,\n//   ) {\n//     const bounds = {\n//       x: x - range / 2,\n//       y: y - range / 2,\n//       width: range,\n//       height: range,\n//     };\n\n//     const nearby = this.query(bounds, [], this.camera.pos, this.camera.zoom);\n\n//     if (nearby.length > 0) {\n//       const nearest = nearby[0];\n//       return nearest;\n//     }\n\n//     return null;\n//   }\n// }\n","import { nanoid } from 'nanoid';\nimport { Coords } from './Coords';\n\nexport class Camera {\n  uid: string;\n  pos: Coords;\n  zoom: number;\n\n  constructor() {\n    this.uid = nanoid();\n    this.pos = { x: 0, y: 0 };\n    this.zoom = 1;\n  }\n\n  toScreenCoords(worldCoords: Coords): Coords {\n    return {\n      x: (worldCoords.x - this.pos.x) * this.zoom,\n      y: (worldCoords.y - this.pos.y) * this.zoom,\n    };\n  }\n\n  toWorldCoords(screenCoords: Coords): Coords {\n    return {\n      x: screenCoords.x / this.zoom - this.pos.x,\n      y: screenCoords.y / this.zoom - this.pos.y,\n    };\n  }\n}\n","import { nanoid } from 'nanoid';\nimport { Rect } from './Rect';\nimport { Quadtree } from './Quadtree';\nimport { Camera } from './Camera';\nimport { Coords } from './Coords';\nimport { throttle } from '../utils/throttle';\n\ntype EntityType = 'node' | 'connector' | 'connection' | 'viewport';\n\nexport class ViewContext {\n  static instances = new Map<string, ViewContext>();\n\n  uid: string;\n  nodes = new Map<string, HTMLLogicNodeElement>();\n  connectors = new Map<string, HTMLLogicConnectorElement>();\n  connections = new Map<string, HTMLLogicConnectionElement>();\n  connectorRects = <Record<string, Rect>>{};\n  connectorQuadtree: Quadtree;\n  viewportQuadtree: Quadtree;\n  camera = new Camera();\n  observer: MutationObserver;\n  visibleElements: string[] = [];\n  prevVisibleElements: string[] = [];\n\n  // viewport variables\n  viewportEl: HTMLDivElement;\n  contentEl: HTMLDivElement;\n  gridEl: HTMLCanvasElement;\n  needsRedraw = true;\n  viewportRect: DOMRect;\n  initialPinchDistance = 0;\n  isPanning = false;\n  dragStart: Coords = { x: 0, y: 0 };\n  activeNode: HTMLLogicNodeElement;\n  activeNodeDragging = false;\n  activeNodeDragStart: Coords = { x: 0, y: 0 };\n  activeConnector: HTMLLogicConnectorElement;\n  activeConnectorStartPos: Coords = { x: 0, y: 0 };\n  activeConnection: HTMLLogicConnectionElement;\n\n  debouncedUpdateVisibleElements = throttle(\n    () => this.updateVisibleElements(),\n    100,\n  );\n\n  constructor(viewport: HTMLFlowyCanvasElement) {\n    const id = nanoid();\n    viewport.id = id;\n    const viewportId = id;\n    if (ViewContext.instances.has(viewportId)) {\n      return ViewContext.instances.get(viewportId);\n    }\n    this.uid = viewportId;\n    ViewContext.instances.set(this.uid, this);\n\n    const boundry = {\n      top: 0,\n      left: 0,\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n\n    this.connectorQuadtree = new Quadtree(boundry, 4, this.camera);\n    this.viewportQuadtree = new Quadtree(boundry, 4, this.camera);\n\n    ViewContext.initializeViewport(viewport);\n\n    this.observer = new MutationObserver(this.viewportMutation);\n    this.observer.observe(viewport, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  destroy() {\n    this.observer.disconnect();\n\n    ViewContext.instances.delete(this.uid);\n  }\n\n  static seekAndDestroy(type: EntityType, id: string) {\n    // search and destroy in all instances\n    for (const [, instance] of ViewContext.instances) {\n      switch (type) {\n        case 'node':\n          instance.unregisterNode(id);\n          break;\n        case 'connector':\n          instance.unregisterConnector(id);\n          break;\n        case 'connection':\n          instance.unregisterConnection(id);\n          break;\n        case 'viewport':\n          instance.destroy();\n          break;\n      }\n    }\n  }\n\n  registerNode(node: HTMLLogicNodeElement) {\n    const id = nanoid();\n    node.id = id;\n    this.nodes.set(id, node);\n\n    // set data attribute for the context id\n    node.setAttribute('data-viewport', this.uid);\n    // add to quadtree\n    this.updateViewportQuadtree(node);\n    this.updateNodeConnectorsQuadtree(node);\n\n    return id;\n  }\n\n  unregisterNode(id: string) {\n    // remove all connections and connectors associated with the node\n    // get connectors\n    const node = this.nodes.get(id);\n    if (node) {\n      // TODO: not sure if this is necessary with mutation observer\n\n      // const connectors = node.querySelectorAll('logic-connector');\n      // connectors.forEach((connector: HTMLLogicConnectorElement) => {\n      //   const cid = connector.id;\n      //   // remove connections\n      //   connector.connections.forEach(\n      //     (connection: HTMLLogicConnectionElement) => {\n      //       const id = connection.id;\n      //       if (id) this.unregisterConnection(id);\n      //     },\n      //   );\n      //   // remove connector\n      //   this.unregisterConnector(cid);\n      // });\n\n      // remove from quadtree\n      this.viewportQuadtree.remove(id);\n      node.setAttribute('data-viewport', '');\n\n      // remove from nodes\n      this.nodes.delete(id);\n    }\n  }\n\n  registerConnector(connector: HTMLLogicConnectorElement) {\n    const id = nanoid();\n    connector.id = id;\n    this.connectors.set(id, connector);\n    const connectorEl = connector.querySelector('.connector');\n    const rect = connectorEl.getBoundingClientRect();\n    this.connectorRects[id] = {\n      left: rect.x,\n      top: rect.y,\n      width: rect.width,\n      height: rect.height,\n    };\n\n    return id;\n  }\n\n  unregisterConnector(id: string) {\n    this.connectors.delete(id);\n    this.connectorQuadtree.remove(id);\n    delete this.connectorRects[id];\n  }\n\n  registerConnection(connection: HTMLLogicConnectionElement) {\n    const id = nanoid();\n    connection.id = id;\n    this.connections.set(id, connection);\n    // set data attribute for the context id\n    connection.setAttribute('data-viewport', this.uid);\n\n    return id;\n  }\n\n  unregisterConnection(id: string) {\n    const connection = this.connections.get(id);\n    connection.setAttribute('data-viewport', '');\n    // remove from dom\n    const el = document.getElementById(id);\n    if (el) {\n      el.remove();\n    }\n\n    this.connections.delete(id);\n  }\n\n  // mutation observer callback\n  // when elements are added or removed from the dom\n  // we need to register or unregister them if they are nodes, connectors or connections\n  viewportMutation(mutations: MutationRecord[]) {\n    if (!mutations.length) return;\n    // happens whenu using bringNodeToFront\n    // - stop the observer from firing\n    if (!this.registerNode) return;\n\n    mutations.forEach(mutation => {\n      if (mutation.type === 'childList') {\n        for (let i = 0; i < mutation.addedNodes.length; i++) {\n          const node = mutation.addedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-NODE') {\n              const logicNode = node as HTMLLogicNodeElement;\n              this.registerNode(logicNode);\n            } else if (node.tagName === 'LOGIC-CONNECTOR') {\n              const logicConnector = node as HTMLLogicConnectorElement;\n              this.registerConnector(logicConnector);\n            } else if (node.tagName === 'LOGIC-CONNECTION') {\n              const logicConnection = node as HTMLLogicConnectionElement;\n              this.registerConnection(logicConnection);\n            }\n          }\n        }\n\n        for (let i = 0; i < mutation.removedNodes.length; i++) {\n          const node = mutation.removedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-NODE') {\n              const logicNode = node as HTMLLogicNodeElement;\n              this.unregisterNode(logicNode.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-CONNECTOR') {\n              const logicConnector = node as HTMLLogicConnectorElement;\n              this.unregisterConnector(logicConnector.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-CONNECTION') {\n              const logicConnection = node as HTMLLogicConnectionElement;\n              this.unregisterConnection(logicConnection.getAttribute('id'));\n            }\n          }\n        }\n      }\n    });\n  }\n\n  static initializeViewport(viewport: HTMLFlowyCanvasElement) {\n    // need to register all nodes, connectors and connections\n    // that are already in the dom\n\n    const id = viewport.id;\n    const instance = ViewContext.instances.get(id);\n\n    const contentEl = viewport.querySelector('.flowy-content');\n    const children = contentEl.children;\n\n    const traverse = (el: HTMLElement) => {\n      if (el.tagName === 'LOGIC-NODE') {\n        const logicNode = el as HTMLLogicNodeElement;\n        instance.registerNode(logicNode);\n      } else if (el.tagName === 'LOGIC-CONNECTOR') {\n        const logicConnector = el as HTMLLogicConnectorElement;\n        instance.registerConnector(logicConnector);\n      } else if (el.tagName === 'LOGIC-CONNECTION') {\n        const logicConnection = el as HTMLLogicConnectionElement;\n        instance.registerConnection(logicConnection);\n      }\n\n      const children = el.children;\n      for (let i = 0; i < children.length; i++) {\n        traverse(children[i] as HTMLElement);\n      }\n    };\n\n    for (let i = 0; i < children.length; i++) {\n      traverse(children[i] as HTMLElement);\n    }\n  }\n\n  static bringToFront(node: HTMLElement) {\n    node.parentElement?.appendChild(node);\n  }\n\n  static setCursor(cursor: string) {\n    document.body.style.cursor = cursor;\n  }\n\n  static resetCursor() {\n    document.body.style.cursor = 'default';\n  }\n\n  getRectCenter(rect: DOMRect | Rect) {\n    return {\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height / 2,\n    };\n  }\n\n  startPanning(worldCoords: Coords, cursor = 'grabbing') {\n    ViewContext.setCursor(cursor);\n    this.isPanning = true;\n    this.dragStart = worldCoords;\n  }\n\n  panCamera(loc: Coords) {\n    this.camera.pos = {\n      x: loc.x / this.camera.zoom - this.dragStart.x,\n      y: loc.y / this.camera.zoom - this.dragStart.y,\n    };\n\n    this.debouncedUpdateVisibleElements();\n  }\n\n  resetPointerStates() {\n    this.isPanning = false;\n    this.initialPinchDistance = 0;\n    ViewContext.resetCursor();\n  }\n\n  startNodeDrag(\n    target: HTMLLogicNodeElement,\n    worldCoords: Coords,\n    cursor = 'grabbing',\n  ): boolean {\n    const node = target.closest('logic-node') as HTMLLogicNodeElement;\n    if (!node) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeNode = node;\n    ViewContext.bringToFront(node);\n\n    const pos = this.activeNode.position;\n    this.activeNodeDragging = true;\n    this.activeNodeDragStart = {\n      x: worldCoords.x - pos.x,\n      y: worldCoords.y - pos.y,\n    };\n\n    return true;\n  }\n\n  updateNodeConnectorPos(aNode: HTMLLogicNodeElement, delta: Coords) {\n    const connectors = aNode.querySelectorAll(\n      'logic-connector',\n    ) as NodeListOf<HTMLLogicConnectorElement>;\n\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      const rect = { ...this.connectorRects[connector.id] };\n      rect.left += delta.x;\n      rect.top += delta.y;\n      this.connectorRects[connector.id] = rect;\n\n      this.updateNodeConnectorConnectionsPos(connector, rect);\n    }\n  }\n\n  updateNodeConnectorConnectionsPos(\n    connector: HTMLLogicConnectorElement,\n    rect: Rect,\n  ) {\n    if (connector.connections.length) {\n      const pos = this.getRectCenter(rect);\n\n      for (let i = 0; i < connector.connections.length; i++) {\n        const connection = connector.connections[i];\n        if (connector.type === 'input') {\n          connection.end = pos;\n        } else {\n          connection.start = pos;\n        }\n      }\n    }\n  }\n\n  snapToGrid(pos: Coords, gridSize: number) {\n    return {\n      x: Math.round(pos.x / gridSize) * gridSize,\n      y: Math.round(pos.y / gridSize) * gridSize,\n    };\n  }\n\n  calcNodePos(worldCoords: Coords) {\n    const pos = {\n      x: worldCoords.x - this.activeNodeDragStart.x,\n      y: worldCoords.y - this.activeNodeDragStart.y,\n    };\n\n    return this.snapToGrid(pos, 10);\n  }\n\n  moveNode(loc: Coords, gridSize: number) {\n    const aNode = this.activeNode;\n    const worldCoords = this.camera.toWorldCoords(loc);\n    const oldPos = aNode.position;\n\n    let newPos = this.calcNodePos(worldCoords);\n\n    // calc new position\n    if (this.snapToGrid) {\n      newPos = this.snapToGrid(newPos, gridSize);\n    }\n\n    const delta = {\n      x: newPos.x - oldPos.x,\n      y: newPos.y - oldPos.y,\n    };\n\n    // update node position and it's connections\n    this.updateNodeConnectorPos(aNode, delta); // ???\n\n    aNode.position = newPos;\n  }\n\n  endNodeDrag() {\n    this.activeNodeDragging = false;\n    this.updateNodeConnectorsQuadtree(this.activeNode);\n    this.updateViewportQuadtree(this.activeNode);\n    this.activeNode = null;\n  }\n\n  createNewConnection(startPos: Coords, type: 'input' | 'output') {\n    const connection = document.createElement(\n      'logic-connection',\n    ) as HTMLLogicConnectionElement;\n    connection.start = startPos;\n    connection.end = startPos;\n    connection.type = type;\n\n    this.activeConnection = connection;\n    this.contentEl.appendChild(connection);\n  }\n\n  moveActiveConnection(loc: Coords, snappingDist: number) {\n    const aConn = this.activeConnection;\n    const worldCoords = this.camera.toWorldCoords(loc);\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      loc,\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappableConnector) {\n      const rect = this.connectorRects[snappableConnector.id];\n      aConn.end = this.getRectCenter(rect);\n    } else {\n      aConn.end = worldCoords;\n    }\n  }\n\n  getTargetConnector(target: HTMLElement, loc: Coords, snappingDist: number) {\n    let targetConnector = target.closest(\n      'logic-connector .connector',\n    ) as HTMLLogicConnectorElement;\n\n    const snappedConnector = this.connectorQuadtree.checkNearby(\n      loc,\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappedConnector) {\n      targetConnector = this.connectors.get(snappedConnector.id);\n    }\n\n    return targetConnector;\n  }\n\n  startNewConnection(target: HTMLLogicConnectorElement, cursor = 'grabbing') {\n    const connEl = target.closest(\n      'logic-connector .connector',\n    ) as HTMLLogicConnectorElement;\n    if (!connEl) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnector = connEl;\n\n    const parentConn = connEl.closest(\n      'logic-connector',\n    ) as HTMLLogicConnectorElement;\n    const rect = this.connectorRects[parentConn.id];\n    const center = this.getRectCenter(rect);\n\n    this.createNewConnection(center, parentConn.type);\n\n    return true;\n  }\n\n  processConnection(target: HTMLLogicConnectorElement) {\n    const aConn = this.activeConnector.closest(\n      'logic-connector',\n    ) as HTMLLogicConnectorElement;\n    const tConn = target.closest(\n      'logic-connector',\n    ) as HTMLLogicConnectorElement;\n\n    // find parent nodes\n    const aNode = aConn.closest('logic-node') as HTMLLogicNodeElement;\n    const tNode = tConn.closest('logic-node') as HTMLLogicNodeElement;\n\n    // validate connection\n    if (!this.isValidConnection(aConn, tConn, aNode, tNode, target)) {\n      this.activeConnection.remove();\n      return;\n    }\n\n    this.updateConnectionEndpoints(aConn, tConn);\n    this.finalizeConnection(aConn, tConn);\n  }\n\n  isValidConnection(\n    aConn: HTMLLogicConnectorElement,\n    tConn: HTMLLogicConnectorElement,\n    aNode: HTMLLogicNodeElement,\n    tNode: HTMLLogicNodeElement,\n    targetConn: HTMLLogicConnectorElement,\n  ) {\n    // avoid connecting to self or already connected\n    if (\n      this.activeConnector.connectingConnector === tConn ||\n      tConn.connectingConnector === aConn\n    ) {\n      // perhaps send an error event\n      // console.log('already connected');\n      return false;\n    }\n\n    if (aNode === tNode || this.activeConnector === targetConn) {\n      // connecting to self\n      return false;\n    }\n\n    // ensure is between input/output not same type\n    if (aConn.type === tConn.type) {\n      // console.log('same type');\n      return false;\n    }\n\n    return true;\n  }\n\n  updateConnectionEndpoints(\n    active: HTMLLogicConnectorElement,\n    target: HTMLLogicConnectorElement,\n  ) {\n    const targRect = this.connectorRects[target.id];\n\n    if (active.type === 'input') {\n      // swap start and end connections\n      this.activeConnection.start = this.getRectCenter(targRect);\n      this.activeConnection.end = this.activeConnectorStartPos;\n      this.activeConnection.type = 'output';\n\n      const rect = this.connectorRects[active.id];\n      this.activeConnection.end = this.getRectCenter(rect);\n    } else {\n      this.activeConnection.end = this.getRectCenter(targRect);\n    }\n  }\n\n  finalizeConnection(\n    active: HTMLLogicConnectorElement,\n    target: HTMLLogicConnectorElement,\n  ) {\n    active.connectingConnector = target;\n    active.connections.push(this.activeConnection);\n    target.connectingConnector = active;\n    target.connections.push(this.activeConnection);\n  }\n\n  startDisconnectConnection(\n    target: HTMLLogicConnectionElement,\n    loc: Coords,\n    snappingDist: number,\n    cursor = 'grabbing',\n  ) {\n    const connection = target.closest(\n      'logic-connection',\n    ) as HTMLLogicConnectionElement;\n    if (!connection) return false;\n\n    ViewContext.bringToFront(connection);\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      loc,\n      snappingDist * this.camera.zoom,\n    );\n\n    if (!snappableConnector) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnection = connection;\n\n    const snapConnector = this.connectors.get(snappableConnector.id);\n    this.activeConnector =\n      snapConnector.connectingConnector as HTMLLogicConnectorElement;\n\n    this.disconnectConnector(\n      this.activeConnection,\n      this.activeConnector,\n      snapConnector,\n    );\n\n    // handle type specific logic\n    if (this.activeConnector.type === 'input') {\n      this.swapConnectionEndpoints(this.activeConnection);\n      this.activeConnection.type = 'input';\n    }\n\n    return true;\n  }\n\n  disconnectConnector(\n    connection: HTMLLogicConnectionElement,\n    connector: HTMLLogicConnectorElement,\n    snapConnector: HTMLLogicConnectorElement,\n  ) {\n    connector.connections = connector.connections.filter(c => c !== connection);\n    snapConnector.connections = snapConnector.connections.filter(\n      c => c !== connection,\n    );\n\n    connector.connectingConnector = null;\n    snapConnector.connectingConnector = null;\n  }\n\n  swapConnectionEndpoints(connection: HTMLLogicConnectionElement) {\n    const { start, end } = connection;\n    connection.start = end;\n    connection.end = start;\n  }\n\n  updateNodeConnectorsQuadtree(node: HTMLLogicNodeElement) {\n    const connectors = node.querySelectorAll(\n      'logic-connector',\n    ) as NodeListOf<HTMLLogicConnectorElement>;\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      let rect = this.connectorRects[connector.id];\n      if (!rect) {\n        const connectorEl = connector.querySelector('.connector');\n        const r = connectorEl.getBoundingClientRect();\n        this.connectorRects[connector.id] = {\n          left: r.x,\n          top: r.y,\n          width: r.width,\n          height: r.height,\n        };\n        rect = this.connectorRects[connector.id];\n      }\n\n      this.connectorQuadtree.remove(connector.id);\n      this.connectorQuadtree.insert({\n        id: connector.id,\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height / 2,\n      });\n    }\n  }\n\n  updateViewportQuadtree(node: HTMLLogicNodeElement) {\n    const rect = node.getBoundingClientRect();\n    this.viewportQuadtree.remove(node.id);\n    // const pos = this.camera.toWorldCoords({ x: rect.left, y: rect.top });\n    this.viewportQuadtree.insert({\n      id: node.id,\n      top: rect.top,\n      left: rect.left,\n      width: rect.width / this.camera.zoom,\n      height: rect.height / this.camera.zoom,\n    });\n  }\n\n  updateVisibleElements() {\n    // get visible nodes within the viewport quadtree\n    const rect = this.viewportRect;\n    // const pos = this.camera.toWorldCoords({ x: rect.left, y: rect.top });\n    const visibleNodes = this.viewportQuadtree.query(\n      {\n        top: rect.top,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n      },\n      [],\n      this.camera.pos,\n      this.camera.zoom,\n    );\n\n    this.prevVisibleElements = this.visibleElements;\n    this.visibleElements = visibleNodes.map((node: any) => node.id);\n\n    // combine both arrays and set data-visible attribute\n    const allElements = new Set([\n      ...this.prevVisibleElements,\n      ...this.visibleElements,\n    ]);\n\n    for (const id of allElements) {\n      const el = document.getElementById(id);\n      if (el) {\n        el.setAttribute(\n          'data-visible',\n          this.visibleElements.includes(id) ? 'visible' : 'hidden',\n        );\n      }\n    }\n\n    // console.log(this.visibleElements);\n  }\n}\n"],"version":3}