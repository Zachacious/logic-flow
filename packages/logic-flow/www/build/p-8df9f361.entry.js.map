{"version":3,"names":["logicFlowConnectorCss","LogicFlowConnectorStyle0","LogicFlowConnector","render","sideClass","this","type","typeClass","h","Host","key","class","connections","length","logicFlowNodeCss","LogicFlowNodeStyle0","LogicFlowNode","style","x","y","componentWillLoad","position","startX","startY","onPositionChange","newValue","JSON","parse","updateTransform","el","transform","componentWillRender","isVisible","display","tabIndex","debounce","fn","delay","timeout","args","clearTimeout","setTimeout","throttle","lastFunc","lastRan","Date","now","getEventLocation","e","MouseEvent","clientX","clientY","TouchEvent","touches","changedTouches","urlAlphabet","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet","Quadtree","constructor","boundary","capacity","camera","objects","divided","northeast","northwest","southeast","southwest","subdivide","left","top","width","height","halfWidth","halfHeight","expandBoundaryToInclude","object","expandBoundaryToPoint","expandBoundaryToRect","point","newLeft","Math","min","newTop","newRight","max","newBottom","rect","rectLeft","rectTop","rectWidth","rectHeight","insert","contains","push","console","log","remove","removeFromNode","node","originalLength","filter","obj","containsPoint","containsRect","inRange","range","pan","zoom","pointInRange","rectInRange","adjX","adjY","adjLeft","adjTop","adjRight","adjBottom","query","found","intersects","i","checkNearby","coords","bounds","nearby","pos","Camera","uid","toScreenCoords","worldCoords","toWorldCoords","screenCoords","ViewContext","viewport","nodes","Map","connectors","connectorSnapDistance","connectorRects","connectionRects","nodeRects","visibleElements","prevVisibleElements","needsRedraw","initialPinchDistance","isPanning","snapToGrid","dragStart","activeNodeDragging","activeNodeDragStart","activeConnectorStartPos","viewportOffset","bringingToFront","debouncedUpdateVisibleElements","updateVisibleElements","viewportId","instances","has","get","set","viewportRect","getBoundingClientRect","boundry","connectorQuadtree","viewportQuadtree","initializeViewport","observer","MutationObserver","m","viewportMutation","observe","childList","subtree","destroy","disconnect","delete","updateViewportRect","viewportEl","addNode","setAttribute","n","requestAnimationFrame","_a","_b","updateViewportQuadtree","removeNode","querySelectorAll","forEach","connector","cid","connection","removeConnection","removeConnector","addConnector","connectorEl","querySelector","qrect","addConnection","connIndex","indexOf","splice","connectingConnector","mutations","mutation","addedNodes","HTMLElement","tagName","logicNode","logicConnector","logicConnection","removedNodes","getAttribute","instance","contentEl","children","traverse","bringToFront","parentElement","appendChild","setCursor","cursor","document","body","resetCursor","getRectCenter","startPanning","panCamera","loc","resetPointerStates","startNodeDrag","target","closest","activeNode","updateNodeConnectorPos","aNode","delta","Object","assign","updateNodeConnectorConnectionsPos","end","start","calcSnapToGrid","gridSize","round","calcNodePos","moveNode","oldPos","newPos","clientWidth","clientHeight","endNodeDrag","updateNodeConnectorsQuadtree","concat","path","createNewConnection","startPos","createElement","activeConnection","moveActiveConnection","snappingDist","aConn","snappableConnector","getTargetConnector","targetConnector","snappedConnector","startNewConnection","connEl","activeConnector","parentConn","center","processConnection","tConn","tNode","isValidConnection","updateConnectionEndpoints","finalizeConnection","targetConn","active","targRect","clear","add","startDisconnectConnection","snapConnector","disconnectConnector","swapConnectionEndpoints","c","r","entity","visibleEntities","newVisibleElements","map","allItems","Set","getElementById","entityComponent","curstate","prevState","includes","newstate","renderCanvasGrid","canvas","color","bgColor","ctx","getContext","step","strokeStyle","lineWidth","fillStyle","fillRect","offsetX","offsetY","beginPath","moveTo","lineTo","stroke","renderCanvasDotGrid","logicFlowViewportCss","LogicFlowViewportStyle0","LogicFlowViewport","debouncedResize","onResize","debouncedUpdateScreen","updateScreen","debouncedUpdateViewportRect","throttledTouchMove","handleTouchMove","forceContentReflowDebounced","forceContentReflow","elMouseDown","onPointerDown","elMouseUp","onPointerUp","elMouseMove","onPointerMove","elTouchStart","handleTouchStart","elTouchMove","elTouchEnd","elWheel","handleWheel","elScroll","elKeyPress","onKeyPress","default","panning","moving","componentDidLoad","gridEl","connectorSnappingDistance","window","addEventListener","passive","resizeObserver","ResizeObserver","renderGrid","disconnectedCallback","canvasEl","removeEventListener","getCamera","screenToWorldCoords","onSnapToGridChange","onGridTypeChange","scheduleComponentUpdate","showGrid","gridType","gridLineColor","gridBgColor","event","activeElement","elementFromPoint","cursors","onEndActiveConnection","preventDefault","canvasRect","mouseX","mouseY","zoomDelta","deltaY","zoomSpeed","newZoom","maxZoom","minZoom","scaleFactor","newPanX","newPanY","handlePinch","touch1","touch2","distance","sqrt","pinchCenterX","pinchCenterY","adjustZoomOnPinch","pinchContentX","pinchContentY","cdisplay"],"sources":["src/components/logic-flow-connector/logic-flow-connector.css?tag=logic-flow-connector","src/components/logic-flow-connector/logic-flow-connector.tsx","src/components/logic-flow-node/logic-flow-node.css?tag=logic-flow-node","src/components/logic-flow-node/logic-flow-node.tsx","src/utils/debounce.ts","src/utils/throttle.ts","src/utils/getEventLocation.ts","../../node_modules/nanoid/url-alphabet/index.js","../../node_modules/nanoid/index.browser.js","src/types/Quadtree.ts","src/types/Camera.ts","src/types/ViewContext.ts","src/utils/renderCanvasGrid.ts","src/components/logic-flow-viewport/logic-flow-viewport.css?tag=logic-flow-viewport","src/components/logic-flow-viewport/logic-flow-viewport.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { LogicFlowConnection } from '../logic-flow-connection/logic-flow-connection';\n\n@Component({\n  tag: 'logic-flow-connector',\n  styleUrl: 'logic-flow-connector.css',\n  shadow: false,\n})\nexport class LogicFlowConnector {\n  @Element() el: HTMLElement;\n\n  @Prop() type: 'input' | 'output' = 'input';\n  @Prop() connectingConnector: LogicFlowConnector | null = null;\n  @Prop() connections: LogicFlowConnection[] = [];\n\n  render() {\n    const sideClass =\n      this.type === 'input' ? 'left-connector' : 'right-connector';\n    const typeClass =\n      this.type === 'input' ? 'input-connector' : 'output-connector';\n\n    return (\n      <Host class={`logic-flow-connector ${typeClass}`}>\n        <div\n          class={`connector ${sideClass} ${\n            (this.connections.length > 0 && 'connected') || ''\n          }`}\n        ></div>\n        <div class={`connector-content ${sideClass}`}>\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element, State, Watch } from '@stencil/core';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-node',\n  styleUrl: 'logic-flow-node.css',\n  shadow: false,\n})\nexport class LogicFlowNode {\n  @Element() el: HTMLElement;\n\n  @Prop() type: string = 'default';\n  // @Prop() name: string = 'Node';\n  @Prop() startX: number = 0;\n  @Prop() startY: number = 0;\n  @Prop({ mutable: true }) position: Coords = { x: 0, y: 0 };\n  @Prop({ mutable: true }) isVisible: boolean = true;\n\n  @State() isDragging = false;\n\n  style = {};\n\n  componentWillLoad() {\n    //  set initial size\n    this.position.x = this.startX;\n    this.position.y = this.startY;\n\n    // this.updateTransform();\n\n    // this.position = { x: this.position.x, y: this.position.y };\n    this.onPositionChange(this.position);\n  }\n\n  @Watch('position')\n  onPositionChange(newValue: Coords | string) {\n    if (typeof newValue === 'string') {\n      this.position = JSON.parse(newValue);\n    }\n    // update transform\n    this.updateTransform();\n  }\n\n  updateTransform() {\n    this.el.style.transform = `translate(${this.position.x}px, ${this.position.y}px )`;\n  }\n\n  componentWillRender() {\n    if (!this.isVisible) {\n      this.style = { display: 'none' };\n    } else {\n      this.style = {};\n    }\n  }\n\n  render() {\n    // console.log('render', this.isVisible);\n    return (\n      <Host class=\"logic-flow-node\" style={this.style} tabIndex=\"0\">\n        {/* <div class=\"logic-flow-node-header\">\n          {this.name}\n          <slot name=\"header\"></slot>\n        </div> */}\n        <slot></slot>\n        {/* <div class=\"logic-flow-node-footer\">\n          <slot name=\"footer\"></slot>\n        </div> */}\n      </Host>\n    );\n  }\n}\n","export const debounce = (fn: (...args: any[]) => void, delay: number) => {\n  let timeout: ReturnType<typeof setTimeout>;\n  return (...args: any[]) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n};\n","export const throttle = (fn: (...args: any[]) => void, delay: number) => {\n  let lastFunc: ReturnType<typeof setTimeout>;\n  let lastRan: number;\n  return (...args: any[]) => {\n    if (!lastRan) {\n      fn(...args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc);\n      lastFunc = setTimeout(() => {\n        if (Date.now() - lastRan >= delay) {\n          fn(...args);\n          lastRan = Date.now();\n        }\n      }, delay - (Date.now() - lastRan));\n    }\n  };\n};\n","export const getEventLocation = (e: MouseEvent | TouchEvent) => {\n  if (e instanceof MouseEvent) {\n    return { x: e.clientX, y: e.clientY };\n  } else if (e instanceof TouchEvent && e.touches.length > 0) {\n    return { x: e.touches[0].clientX, y: e.touches[0].clientY };\n  } else if (e instanceof TouchEvent && e.changedTouches.length > 0) {\n    return { x: e.changedTouches[0].clientX, y: e.changedTouches[0].clientY };\n  }\n  return { x: 0, y: 0 };\n};\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { Coords } from './Coords';\nimport { Rect } from './Rect';\nimport { Camera } from './Camera';\n\n// SpatialObject can be either a Point or a Rect with an ID for tracking\ntype SpatialObject = Point | BBox;\n\ninterface Point extends Coords {\n  id: string; // Unique ID of the point (e.g., connector)\n}\n\ninterface BBox extends Rect {\n  id: string; // Unique ID of the rect (e.g., node)\n}\n\n// export class Quadtree {\n//   boundary: Rect;\n//   capacity: number;\n//   objects: SpatialObject[];\n//   divided: boolean;\n//   northeast: Quadtree | null;\n//   northwest: Quadtree | null;\n//   southeast: Quadtree | null;\n//   southwest: Quadtree | null;\n//   camera: Camera;\n\n//   constructor(boundary: Rect, capacity: number, camera: Camera) {\n//     this.boundary = boundary;\n//     this.capacity = capacity;\n//     this.objects = [];\n//     this.divided = false;\n//     this.northeast = null;\n//     this.northwest = null;\n//     this.southeast = null;\n//     this.southwest = null;\n//     this.camera = camera;\n//   }\n\n//   subdivide() {\n//     const { left, top, width, height } = this.boundary;\n//     const halfWidth = width / 2;\n//     const halfHeight = height / 2;\n\n//     this.northeast = new Quadtree(\n//       { left: left + halfWidth, top, width: halfWidth, height: halfHeight },\n//       this.capacity,\n//       this.camera,\n//     );\n//     this.northwest = new Quadtree(\n//       { left, top, width: halfWidth, height: halfHeight },\n//       this.capacity,\n//       this.camera,\n//     );\n//     this.southeast = new Quadtree(\n//       {\n//         left: left + halfWidth,\n//         top: top + halfHeight,\n//         width: halfWidth,\n//         height: halfHeight,\n//       },\n//       this.capacity,\n//       this.camera,\n//     );\n//     this.southwest = new Quadtree(\n//       { left, top: top + halfHeight, width: halfWidth, height: halfHeight },\n//       this.capacity,\n//       this.camera,\n//     );\n\n//     this.divided = true;\n\n//     // Move objects into their respective quadrants\n//     for (let i = 0; i < this.objects.length; i++) {\n//       const obj = this.objects[i];\n//       if (this.northeast.contains(obj)) {\n//         this.northeast.insert(obj);\n//       }\n//       if (this.northwest.contains(obj)) {\n//         this.northwest.insert(obj);\n//       }\n//       if (this.southeast.contains(obj)) {\n//         this.southeast.insert(obj);\n//       }\n//       if (this.southwest.contains(obj)) {\n//         this.southwest.insert(obj);\n//       }\n//     }\n\n//     this.objects = [];\n//   }\n\n//   insert(object: SpatialObject): boolean {\n//     // Check if the object is within the boundary of this Quadtree.\n//     if (!this.contains(object)) {\n//       return false;\n//     }\n\n//     // If there's room and we haven't reached capacity, add the object here.\n//     if (this.objects.length < this.capacity) {\n//       this.objects.push(object);\n//       return true;\n//     }\n\n//     // Otherwise, subdivide if not already done and insert into the appropriate quadrant.\n//     if (!this.divided) {\n//       this.subdivide();\n//     }\n\n//     // Try to insert into each of the quadrants.\n//     if (this.northeast!.insert(object)) return true;\n//     if (this.northwest!.insert(object)) return true;\n//     if (this.southeast!.insert(object)) return true;\n//     if (this.southwest!.insert(object)) return true;\n\n//     // If the object doesn't fit in any quadrant (which ideally shouldn't happen), add it to this node.\n//     this.objects.push(object);\n//     return true;\n//   }\n\n//   remove(id: string): boolean {\n//     const removeFromNode = (node: Quadtree | null): boolean => {\n//       if (!node) return false;\n\n//       const originalLength = node.objects.length;\n//       node.objects = node.objects.filter(obj => (obj as any).id !== id);\n\n//       // If any objects were removed, return true\n//       if (originalLength !== node.objects.length) return true;\n\n//       // Recursively remove from child nodes if subdivided\n//       if (node.divided) {\n//         return (\n//           removeFromNode(node.northwest) ||\n//           removeFromNode(node.northeast) ||\n//           removeFromNode(node.southwest) ||\n//           removeFromNode(node.southeast)\n//         );\n//       }\n//       return false;\n//     };\n\n//     return removeFromNode(this);\n//   }\n\n//   contains(object: SpatialObject): boolean {\n//     if ('x' in object && 'y' in object) {\n//       // It's a point\n//       return this.containsPoint(object);\n//     } else {\n//       // It's a rect\n//       return this.containsRect(object);\n//     }\n//   }\n\n//   containsPoint(point: Point): boolean {\n//     // const { left, top, width, height } = this.boundary;\n//     // return (\n//     //   point.x >= left &&\n//     //   point.x < left + width &&\n//     //   point.y >= top &&\n//     //   point.y < top + height\n//     // );\n//     const { left, top, width, height } = this.boundary;\n//     return (\n//       point.x >= left &&\n//       point.x < left + width &&\n//       point.y >= top &&\n//       point.y < top + height\n//     );\n//   }\n\n//   containsRect(rect: Rect): boolean {\n//     const { left, top, width, height } = this.boundary;\n//     return (\n//       rect.left >= left &&\n//       rect.left + rect.width <= left + width &&\n//       rect.top >= top &&\n//       rect.top + rect.height <= top + height\n//     );\n//   }\n\n//   query(\n//     range: Rect,\n//     found: SpatialObject[] = [],\n//     pan: Coords,\n//     zoom: number,\n//   ): SpatialObject[] {\n//     if (!this.intersects(range)) return found;\n\n//     for (let i = 0; i < this.objects.length; i++) {\n//       if (this.inRange(this.objects[i], range, pan, zoom)) {\n//         found.push(this.objects[i]);\n//       }\n//     }\n\n//     if (this.divided) {\n//       this.northwest!.query(range, found, pan, zoom);\n//       this.northeast!.query(range, found, pan, zoom);\n//       this.southwest!.query(range, found, pan, zoom);\n//       this.southeast!.query(range, found, pan, zoom);\n//     }\n\n//     return found;\n//   }\n\n//   inRange(\n//     object: SpatialObject,\n//     range: Rect,\n//     pan: Coords,\n//     zoom: number,\n//   ): boolean {\n//     if ('x' in object && 'y' in object) {\n//       // It's a point\n//       return this.pointInRange(object, range, pan, zoom);\n//     } else {\n//       // It's a rect\n//       return this.rectInRange(object, range, pan, zoom);\n//     }\n//   }\n\n//   pointInRange(point: Point, range: Rect, pan: Coords, zoom: number): boolean {\n//     // Adjust point position relative to pan and zoom\n//     const adjX = (point.x + pan.x) * zoom;\n//     const adjY = (point.y + pan.y) * zoom;\n\n//     // const screenX = adjX / zoom - pan.x;\n//     // const screenY = adjY / zoom - pan.y;\n\n//     // // show debug\n//     // const debugDiv = document.getElementById('debug');\n//     // debugDiv.style.left = `${screenX}px`;\n//     // debugDiv.style.top = `${screenY}px`;\n//     // debugDiv.style.width = '10px';\n//     // debugDiv.style.height = '10px';\n\n//     // // // show debug range\n//     // const screenRange = {\n//     //   left: range.left / zoom - pan.x,\n//     //   top: range.top / zoom - pan.y,\n//     //   width: range.width / zoom,\n//     //   height: range.height / zoom,\n//     // };\n\n//     // const debugDiv2 = document.getElementById('debug2');\n//     // debugDiv2.style.left = `${screenRange.left}px`;\n//     // debugDiv2.style.top = `${screenRange.top}px`;\n//     // debugDiv2.style.width = `${screenRange.width}px`;\n//     // debugDiv2.style.height = `${screenRange.height}px`;\n\n//     return (\n//       adjX >= range.left &&\n//       adjX < range.left + range.width &&\n//       adjY >= range.top &&\n//       adjY < range.top + range.height\n//     );\n//   }\n\n//   rectInRange(rect: Rect, range: Rect, pan: Coords, zoom: number): boolean {\n//     // Adjust rect position relative to pan and zoom\n//     const adjLeft = (rect.left + pan.x) * zoom;\n//     const adjTop = (rect.top + pan.y) * zoom;\n\n//     const adjRight = adjLeft + rect.width * zoom;\n//     const adjBottom = adjTop + rect.height * zoom;\n\n//     // const screenW = (adjRight - adjLeft) / this.camera.zoom;\n//     // const screenH = (adjBottom - adjTop) / this.camera.zoom;\n//     // const screenX = adjLeft / this.camera.zoom - pan.x;\n//     // const screenY = adjTop / this.camera.zoom - pan.y;\n\n//     // const debugDiv2 = document.getElementById('debug2');\n//     // debugDiv2.style.width = `${screenW}px`;\n//     // debugDiv2.style.height = `${screenH}px`;\n//     // debugDiv2.style.left = `${screenX}px`;\n//     // debugDiv2.style.top = `${screenY}px`;\n\n//     // const screenRange = {\n//     //   left: range.left / zoom - pan.x,\n//     //   top: range.top / zoom - pan.y,\n//     //   width: range.width / zoom,\n//     //   height: range.height / zoom,\n//     // };\n\n//     // const debugDiv = document.getElementById('debug2');\n//     // debugDiv.style.width = `${screenRange.width}px`;\n//     // debugDiv.style.height = `${screenRange.height}px`;\n//     // debugDiv.style.left = `${screenRange.left}px`;\n//     // debugDiv.style.top = `${screenRange.top}px`;\n\n//     return !(\n//       adjRight < range.left ||\n//       adjLeft > range.left + range.width ||\n//       adjBottom < range.top ||\n//       adjTop > range.top + range.height\n//     );\n//   }\n\n//   intersects(range: Rect): boolean {\n//     const { left, top, width, height } = this.boundary;\n//     return !(\n//       range.left > left + width ||\n//       range.left + range.width < left ||\n//       range.top > top + height ||\n//       range.top + range.height < top\n//     );\n//   }\n\n//   checkNearby(coords: Coords, range: number): SpatialObject | null {\n//     const bounds = {\n//       left: coords.x - range / 2,\n//       top: coords.y - range / 2,\n//       width: range,\n//       height: range,\n//     };\n\n//     const nearby = this.query(bounds, [], this.camera.pos, this.camera.zoom);\n\n//     return nearby.length > 0 ? nearby[0] : null;\n//   }\n// }\n\nexport class Quadtree {\n  boundary: Rect;\n  capacity: number;\n  objects: SpatialObject[];\n  divided: boolean;\n  northeast: Quadtree | null;\n  northwest: Quadtree | null;\n  southeast: Quadtree | null;\n  southwest: Quadtree | null;\n  camera: Camera;\n\n  constructor(boundary: Rect, capacity: number, camera: Camera) {\n    this.boundary = boundary;\n    this.capacity = capacity;\n    this.objects = [];\n    this.divided = false;\n    this.northeast = null;\n    this.northwest = null;\n    this.southeast = null;\n    this.southwest = null;\n    this.camera = camera;\n  }\n\n  subdivide() {\n    const { left, top, width, height } = this.boundary;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n\n    this.northeast = new Quadtree(\n      { left: left + halfWidth, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.northwest = new Quadtree(\n      { left, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.southeast = new Quadtree(\n      {\n        left: left + halfWidth,\n        top: top + halfHeight,\n        width: halfWidth,\n        height: halfHeight,\n      },\n      this.capacity,\n      this.camera,\n    );\n    this.southwest = new Quadtree(\n      { left, top: top + halfHeight, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n\n    this.divided = true;\n  }\n\n  expandBoundaryToInclude(object: SpatialObject) {\n    if ('x' in object && 'y' in object) {\n      this.expandBoundaryToPoint(object);\n    } else {\n      this.expandBoundaryToRect(object);\n    }\n  }\n\n  expandBoundaryToPoint(point: Point) {\n    const { left, top, width, height } = this.boundary;\n    const { x, y } = point;\n\n    const newLeft = Math.min(left, x);\n    const newTop = Math.min(top, y);\n    const newRight = Math.max(left + width, x);\n    const newBottom = Math.max(top + height, y);\n\n    this.boundary = {\n      left: newLeft,\n      top: newTop,\n      width: newRight - newLeft,\n      height: newBottom - newTop,\n    };\n  }\n\n  expandBoundaryToRect(rect: Rect) {\n    const { left, top, width, height } = this.boundary;\n    const {\n      left: rectLeft,\n      top: rectTop,\n      width: rectWidth,\n      height: rectHeight,\n    } = rect;\n\n    const newLeft = Math.min(left, rectLeft);\n    const newTop = Math.min(top, rectTop);\n    const newRight = Math.max(left + width, rectLeft + rectWidth);\n    const newBottom = Math.max(top + height, rectTop + rectHeight);\n\n    this.boundary = {\n      left: newLeft,\n      top: newTop,\n      width: newRight - newLeft,\n      height: newBottom - newTop,\n    };\n  }\n\n  insert(object: SpatialObject): boolean {\n    // if (!this.contains(object)) return false;\n\n    if (!this.contains(object)) {\n      this.expandBoundaryToInclude(object);\n    }\n\n    if (this.objects.length < this.capacity) {\n      this.objects.push(object);\n      return true;\n    } else {\n      if (!this.divided) {\n        this.subdivide();\n      }\n\n      if (this.northeast!.insert(object)) return true;\n      if (this.northwest!.insert(object)) return true;\n      if (this.southeast!.insert(object)) return true;\n      if (this.southwest!.insert(object)) return true;\n\n      console.log('Object could not be inserted into any child node');\n\n      // If none of the children can contain the object, keep it in the current node\n      this.objects.push(object);\n      return true;\n    }\n  }\n\n  remove(id: string): boolean {\n    const removeFromNode = (node: Quadtree | null): boolean => {\n      if (!node) return false;\n\n      const originalLength = node.objects.length;\n      node.objects = node.objects.filter(obj => (obj as any).id !== id);\n\n      if (originalLength !== node.objects.length) return true;\n\n      if (node.divided) {\n        return (\n          removeFromNode(node.northwest) ||\n          removeFromNode(node.northeast) ||\n          removeFromNode(node.southwest) ||\n          removeFromNode(node.southeast)\n        );\n      }\n\n      return false;\n    };\n\n    return removeFromNode(this);\n  }\n\n  contains(object: SpatialObject): boolean {\n    if ('x' in object && 'y' in object) {\n      return this.containsPoint(object);\n    } else {\n      return this.containsRect(object);\n    }\n  }\n\n  containsPoint(point: Point): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      point.x >= left &&\n      point.x < left + width &&\n      point.y >= top &&\n      point.y < top + height\n    );\n\n    // boundary adjusted to world space\n    // const adjBounds = {\n    //   left: this.boundary.left + this.camera.pos.x,\n    //   top: this.boundary.top + this.camera.pos.y,\n    //   width: this.boundary.width,\n    //   height: this.boundary.height,\n    // };\n\n    // return (\n    //   point.x >= adjBounds.left &&\n    //   point.x < adjBounds.left + adjBounds.width &&\n    //   point.y >= adjBounds.top &&\n    //   point.y < adjBounds.top + adjBounds.height\n    // );\n  }\n\n  containsRect(rect: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      rect.left >= left &&\n      rect.left + rect.width <= left + width &&\n      rect.top >= top &&\n      rect.top + rect.height <= top + height\n    );\n  }\n\n  inRange(\n    object: SpatialObject,\n    range: Rect,\n    pan: Coords,\n    zoom: number,\n  ): boolean {\n    if ('x' in object && 'y' in object) {\n      // It's a point\n      return this.pointInRange(object, range, pan, zoom);\n    } else {\n      // It's a rect\n      return this.rectInRange(object, range, pan, zoom);\n    }\n  }\n\n  pointInRange(point: Point, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust point position relative to pan and zoom\n    const adjX = (point.x + pan.x) * zoom;\n    const adjY = (point.y + pan.y) * zoom;\n\n    // const screenX = adjX / zoom - pan.x;\n    // const screenY = adjY / zoom - pan.y;\n\n    // // show debug\n    // const debugDiv = document.getElementById('debug');\n    // debugDiv.style.left = `${screenX}px`;\n    // debugDiv.style.top = `${screenY}px`;\n    // debugDiv.style.width = '10px';\n    // debugDiv.style.height = '10px';\n\n    // // // show debug range\n    // const screenRange = {\n    //   left: range.left / zoom - pan.x,\n    //   top: range.top / zoom - pan.y,\n    //   width: range.width / zoom,\n    //   height: range.height / zoom,\n    // };\n\n    // const debugDiv2 = document.getElementById('debug2');\n    // debugDiv2.style.left = `${screenRange.left}px`;\n    // debugDiv2.style.top = `${screenRange.top}px`;\n    // debugDiv2.style.width = `${screenRange.width}px`;\n    // debugDiv2.style.height = `${screenRange.height}px`;\n\n    return (\n      adjX >= range.left &&\n      adjX < range.left + range.width &&\n      adjY >= range.top &&\n      adjY < range.top + range.height\n    );\n  }\n\n  rectInRange(rect: Rect, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust rect position relative to pan and zoom\n    const adjLeft = (rect.left + pan.x) * zoom;\n    const adjTop = (rect.top + pan.y) * zoom;\n\n    const adjRight = adjLeft + rect.width * zoom;\n    const adjBottom = adjTop + rect.height * zoom;\n\n    // const screenW = (adjRight - adjLeft) / this.camera.zoom;\n    // const screenH = (adjBottom - adjTop) / this.camera.zoom;\n    // const screenX = adjLeft / this.camera.zoom - pan.x;\n    // const screenY = adjTop / this.camera.zoom - pan.y;\n\n    // const debugDiv2 = document.getElementById('debug2');\n    // debugDiv2.style.width = `${screenW}px`;\n    // debugDiv2.style.height = `${screenH}px`;\n    // debugDiv2.style.left = `${screenX}px`;\n    // debugDiv2.style.top = `${screenY}px`;\n\n    // const screenRange = {\n    //   left: range.left / zoom - pan.x,\n    //   top: range.top / zoom - pan.y,\n    //   width: range.width / zoom,\n    //   height: range.height / zoom,\n    // };\n\n    // const debugDiv = document.getElementById('debug2');\n    // debugDiv.style.width = `${screenRange.width}px`;\n    // debugDiv.style.height = `${screenRange.height}px`;\n    // debugDiv.style.left = `${screenRange.left}px`;\n    // debugDiv.style.top = `${screenRange.top}px`;\n\n    return !(\n      adjRight < range.left ||\n      adjLeft > range.left + range.width ||\n      adjBottom < range.top ||\n      adjTop > range.top + range.height\n    );\n  }\n\n  query(\n    range: Rect,\n    found: SpatialObject[] = [],\n    pan: Coords,\n    zoom: number,\n  ): SpatialObject[] {\n    if (!this.intersects(range)) return found;\n\n    for (let i = 0; i < this.objects.length; i++) {\n      if (this.inRange(this.objects[i], range, pan, zoom)) {\n        found.push(this.objects[i]);\n      }\n    }\n\n    if (this.divided) {\n      this.northwest!.query(range, found, pan, zoom);\n      this.northeast!.query(range, found, pan, zoom);\n      this.southwest!.query(range, found, pan, zoom);\n      this.southeast!.query(range, found, pan, zoom);\n    }\n\n    return found;\n  }\n\n  intersects(range: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return !(\n      range.left > left + width ||\n      range.left + range.width < left ||\n      range.top > top + height ||\n      range.top + range.height < top\n    );\n  }\n\n  checkNearby(coords: Coords, range: number): SpatialObject | null {\n    const bounds = {\n      left: coords.x - range / 2,\n      top: coords.y - range / 2,\n      width: range,\n      height: range,\n    };\n\n    const nearby = this.query(bounds, [], this.camera.pos, this.camera.zoom);\n    return nearby.length > 0 ? nearby[0] : null;\n  }\n}\n","import { nanoid } from 'nanoid';\nimport { Coords } from './Coords';\n\nexport class Camera {\n  uid: string;\n  pos: Coords;\n  zoom: number;\n\n  constructor() {\n    this.uid = nanoid();\n    this.pos = { x: 0, y: 0 };\n    this.zoom = 1;\n  }\n\n  toScreenCoords(worldCoords: Coords): Coords {\n    return {\n      x: (worldCoords.x - this.pos.x) * this.zoom,\n      y: (worldCoords.y - this.pos.y) * this.zoom,\n    };\n  }\n\n  toWorldCoords(screenCoords: Coords): Coords {\n    return {\n      x: screenCoords.x / this.zoom - this.pos.x,\n      y: screenCoords.y / this.zoom - this.pos.y,\n    };\n  }\n}\n","import { nanoid } from 'nanoid';\nimport { Rect } from './Rect';\nimport { Quadtree } from './Quadtree';\nimport { Camera } from './Camera';\nimport { Coords } from './Coords';\nimport { throttle } from '../utils/throttle';\nimport { Offset } from './Offset';\n// import { LogicFlowNode } from '../components/logic-flow-node/logic-flow-node';\n// import { LogicFlowConnection } from '../components/logic-flow-connection/logic-flow-connection';\n\n// type EntityType = 'node' | 'connector' | 'connection' | 'viewport';\n\nexport class ViewContext {\n  static instances = new Map<string, ViewContext>();\n\n  uid: string;\n  nodes = new Map<string, HTMLLogicFlowNodeElement>();\n  connectors = new Map<string, HTMLLogicFlowConnectorElement>();\n  connectorSnapDistance = 10;\n  connections = new Map<string, HTMLLogicFlowConnectionElement>();\n  connectorRects = <Record<string, Rect>>{};\n  connectionRects = <Record<string, Rect>>{};\n  connectorQuadtree: Quadtree;\n  viewportQuadtree: Quadtree;\n  nodeRects = <Record<string, Rect>>{};\n  camera = new Camera();\n  observer: MutationObserver;\n  visibleElements: string[] = [];\n  prevVisibleElements: string[] = [];\n\n  // viewport variables\n  viewportEl: HTMLDivElement;\n  contentEl: HTMLDivElement;\n  gridEl: HTMLCanvasElement;\n  needsRedraw = true;\n  viewportRect: Rect;\n  initialPinchDistance = 0;\n  isPanning = false;\n  snapToGrid = false;\n  dragStart: Coords = { x: 0, y: 0 };\n  activeNode: HTMLLogicFlowNodeElement;\n  activeNodeDragging = false;\n  activeNodeDragStart: Coords = { x: 0, y: 0 };\n  activeConnector: HTMLLogicFlowConnectorElement;\n  activeConnectorStartPos: Coords = { x: 0, y: 0 };\n  activeConnection: HTMLLogicFlowConnectionElement;\n  viewportOffset: Offset = { top: 0, left: 0 };\n  bringingToFront = false;\n\n  debouncedUpdateVisibleElements = throttle(\n    () => this.updateVisibleElements(),\n    100,\n  );\n\n  constructor(viewport: HTMLLogicFlowViewportElement) {\n    const id = viewport.id || nanoid();\n    viewport.id = id;\n    const viewportId = id;\n    if (ViewContext.instances.has(viewportId)) {\n      return ViewContext.instances.get(viewportId);\n    }\n    this.uid = viewportId;\n    ViewContext.instances.set(this.uid, this);\n\n    if (!this.viewportRect) {\n      const rect = viewport.getBoundingClientRect();\n      this.viewportOffset = {\n        top: rect.top,\n        left: rect.left,\n      };\n      this.viewportRect = {\n        left: rect.left - rect.left,\n        top: rect.top - rect.top,\n        width: rect.width - rect.left,\n        height: rect.height - rect.top,\n      };\n      // this.updateViewportRect();\n    }\n\n    const boundry = {\n      left: this.viewportRect.left,\n      top: this.viewportRect.top,\n      width: this.viewportRect.width,\n      height: this.viewportRect.height,\n    };\n\n    this.connectorQuadtree = new Quadtree(boundry, 4, this.camera);\n    this.viewportQuadtree = new Quadtree(boundry, 4, this.camera);\n\n    ViewContext.initializeViewport(viewport);\n\n    this.observer = new MutationObserver((m: MutationRecord[]) =>\n      this.viewportMutation(m),\n    );\n    this.observer.observe(viewport, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  destroy() {\n    this.observer.disconnect();\n\n    ViewContext.instances.delete(this.uid);\n  }\n\n  updateViewportRect() {\n    const rect = this.viewportEl.getBoundingClientRect();\n    this.viewportOffset = {\n      top: rect.top,\n      left: rect.left,\n    };\n    this.viewportRect = {\n      left: rect.left - rect.left,\n      top: rect.top - rect.top,\n      width: rect.width - rect.left,\n      height: rect.height - rect.top,\n    };\n  }\n\n  // static seekAndDestroy(type: EntityType, id: string) {\n  //   // search and destroy in all instances\n  //   for (const [, instance] of ViewContext.instances) {\n  //     switch (type) {\n  //       case 'node':\n  //         instance.unregisterNode(id);\n  //         break;\n  //       case 'connector':\n  //         instance.unregisterConnector(id);\n  //         break;\n  //       case 'connection':\n  //         instance.unregisterConnection(id);\n  //         break;\n  //       case 'viewport':\n  //         instance.destroy();\n  //         break;\n  //     }\n  //   }\n  // }\n\n  addNode(node: HTMLLogicFlowNodeElement) {\n    const id = nanoid();\n    node.id = id;\n    this.nodes.set(id, node);\n\n    // set data attribute for the context id\n    node.setAttribute('data-viewport', this.uid);\n\n    const n = node;\n\n    // wait for next frame to update connectors rects until the connectors have registered\n    requestAnimationFrame(() => {\n      // update rect\n      const rect = n.getBoundingClientRect();\n      this.nodeRects[id] = {\n        left: n?.position?.x || n.startX || rect.x,\n        top: n?.position?.y || n.startY || rect.y,\n        width: rect.width,\n        height: rect.height,\n      };\n\n      // add to quadtree\n      this.updateViewportQuadtree(n);\n\n      // this.updateNodeConnectorsQuadtree(node);\n    });\n\n    return id;\n  }\n\n  removeNode(id: string) {\n    console.log('remove node', id);\n    // remove all connections and connectors associated with the node\n    // get connectors\n    const node = this.nodes.get(id);\n    if (node) {\n      // TODO: not sure if this is necessary with mutation observer\n\n      const connectors = node.querySelectorAll('logic-flow-connector');\n      connectors.forEach((connector: HTMLLogicFlowConnectorElement) => {\n        const cid = connector.id;\n        // remove connections\n        connector.connections.forEach(\n          (connection: HTMLLogicFlowConnectionElement) => {\n            const id = connection.id;\n            if (id) this.removeConnection(id);\n          },\n        );\n        // remove connector\n        this.removeConnector(cid);\n      });\n\n      // remove from quadtree\n      this.viewportQuadtree.remove(id);\n      delete this.nodeRects[id];\n      // node.setAttribute('data-viewport', '');\n\n      // remove from nodes\n      this.nodes.delete(id);\n    }\n  }\n\n  addConnector(connector: HTMLLogicFlowConnectorElement) {\n    const id = nanoid();\n    connector.id = id;\n    this.connectors.set(id, connector);\n    requestAnimationFrame(() => {\n      const connectorEl = connector.querySelector('.connector');\n      const rect = connectorEl.getBoundingClientRect();\n      this.connectorRects[id] = {\n        left:\n          (rect.x - this.viewportOffset.left) / this.camera.zoom -\n          this.camera.pos.x,\n        top:\n          (rect.y - this.viewportOffset.top) / this.camera.zoom -\n          this.camera.pos.y,\n        width: rect.width / this.camera.zoom,\n        height: rect.height / this.camera.zoom,\n      };\n\n      // add to quadtree\n      const qrect = this.connectorRects[id];\n      this.connectorQuadtree.insert({\n        id,\n        x: qrect.left + qrect.width / 2,\n        y: qrect.top + qrect.height / 2,\n      });\n    });\n\n    return id;\n  }\n\n  removeConnector(id: string) {\n    const connector = this.connectors.get(id);\n    if (!connector) return;\n\n    // remove connections\n    connector.connections.forEach(\n      (connection: HTMLLogicFlowConnectionElement) => {\n        const id = connection.id;\n        if (id) this.removeConnection(id);\n      },\n    );\n\n    this.connectors.delete(id);\n    this.connectorQuadtree.remove(id);\n    delete this.connectorRects[id];\n  }\n\n  addConnection(connection: HTMLLogicFlowConnectionElement) {\n    const id = nanoid();\n    connection.id = id;\n    this.connections.set(id, connection);\n    // set data attribute for the context id\n    connection.setAttribute('data-viewport', this.uid);\n\n    return id;\n  }\n\n  removeConnection(id: string) {\n    const connection = this.connections.get(id);\n    if (!connection) return;\n    // connection.setAttribute('data-viewport', '');\n    // remove from dom\n    // const el = document.getElementById(id);\n\n    // if (el) {\n    //   el.remove();\n    // }\n\n    // TODO: find connectors and remove connections\n    // handle connectors\n    const connectors = connection.connectors;\n    if (connectors.size > 0) {\n      // for (let i = 0; i < connectors.size; i++) {\n      //   const connector = connectors.\n      //   const connIndex = connector.connections.indexOf(connection);\n      //   if (connIndex > -1) {\n      //     connector.connections.splice(connIndex, 1);\n      //   }\n      //   connector.connectingConnector = null;\n\n      //   // update quadtree\n      // }\n      for (const connector of connectors) {\n        const connIndex = connector.connections.indexOf(connection);\n        if (connIndex > -1) {\n          connector.connections.splice(connIndex, 1);\n        }\n        connector.connectingConnector = null;\n        // update quadtree\n      }\n    }\n\n    delete this.connectionRects[id];\n    this.viewportQuadtree.remove(id);\n    this.connections.delete(id);\n    connection.remove();\n  }\n\n  // mutation observer callback\n  // when elements are added or removed from the dom\n  // we need to register or unregister them if they are nodes, connectors or connections\n  viewportMutation(mutations: MutationRecord[]) {\n    if (!mutations.length) return;\n    // happens whenu using bringNodeToFront\n    // - stop the observer from firing\n    // if (!this.registerNode) return;\n    if (this.bringingToFront) {\n      this.bringingToFront = false;\n      return;\n    }\n\n    mutations.forEach(mutation => {\n      if (mutation.type === 'childList') {\n        for (let i = 0; i < mutation.addedNodes.length; i++) {\n          const node = mutation.addedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-FLOW-NODE') {\n              const logicNode = node as HTMLLogicFlowNodeElement;\n              this.addNode(logicNode);\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTOR') {\n              const logicConnector = node as HTMLLogicFlowConnectorElement;\n              this.addConnector(logicConnector);\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTION') {\n              const logicConnection = node as HTMLLogicFlowConnectionElement;\n              this.addConnection(logicConnection);\n            }\n          }\n        }\n\n        for (let i = 0; i < mutation.removedNodes.length; i++) {\n          const node = mutation.removedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-FLOW-NODE') {\n              const logicNode = node as HTMLLogicFlowNodeElement;\n              this.removeNode(logicNode.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTOR') {\n              const logicConnector = node as HTMLLogicFlowConnectorElement;\n              this.removeConnector(logicConnector.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTION') {\n              const logicConnection = node as HTMLLogicFlowConnectionElement;\n              this.removeConnection(logicConnection.getAttribute('id'));\n            }\n          }\n        }\n      }\n    });\n  }\n\n  static initializeViewport(viewport: HTMLLogicFlowViewportElement) {\n    // need to register all nodes, connectors and connections\n    // that are already in the dom\n\n    const id = viewport.id;\n    const instance = ViewContext.instances.get(id);\n\n    const contentEl = viewport.querySelector('.viewport-content');\n    const children = contentEl.children;\n\n    const traverse = (el: HTMLElement) => {\n      if (el.tagName === 'LOGIC-FLOW-NODE') {\n        const logicNode = el as HTMLLogicFlowNodeElement;\n        instance.addNode(logicNode);\n      } else if (el.tagName === 'LOGIC-FLOW-CONNECTOR') {\n        const logicConnector = el as HTMLLogicFlowConnectorElement;\n        instance.addConnector(logicConnector);\n      } else if (el.tagName === 'LOGIC-FLOW-CONNECTION') {\n        const logicConnection = el as HTMLLogicFlowConnectionElement;\n        instance.addConnection(logicConnection);\n      }\n\n      const children = el.children;\n      for (let i = 0; i < children.length; i++) {\n        traverse(children[i] as HTMLElement);\n      }\n    };\n\n    for (let i = 0; i < children.length; i++) {\n      traverse(children[i] as HTMLElement);\n    }\n  }\n\n  bringToFront(node: HTMLElement) {\n    this.bringingToFront = true;\n    node.parentElement?.appendChild(node);\n  }\n\n  static setCursor(cursor: string) {\n    document.body.style.cursor = cursor;\n  }\n\n  static resetCursor() {\n    document.body.style.cursor = 'default';\n  }\n\n  getRectCenter(rect: DOMRect | Rect) {\n    return {\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height / 2,\n    };\n  }\n\n  startPanning(worldCoords: Coords, cursor = 'grabbing') {\n    ViewContext.setCursor(cursor);\n    this.isPanning = true;\n    this.dragStart = worldCoords;\n  }\n\n  panCamera(loc: Coords) {\n    this.camera.pos = {\n      x: loc.x / this.camera.zoom - this.dragStart.x,\n      y: loc.y / this.camera.zoom - this.dragStart.y,\n    };\n\n    this.debouncedUpdateVisibleElements();\n  }\n\n  resetPointerStates() {\n    this.isPanning = false;\n    this.initialPinchDistance = 0;\n    ViewContext.resetCursor();\n  }\n\n  startNodeDrag(\n    target: HTMLLogicFlowNodeElement,\n    worldCoords: Coords,\n    cursor = 'grabbing',\n  ): boolean {\n    if (!target) return false;\n\n    const node = target.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n    if (!node) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeNode = node;\n    this.bringToFront(node);\n\n    const pos = this.activeNode.position;\n    this.activeNodeDragging = true;\n    this.activeNodeDragStart = {\n      x: worldCoords.x - pos.x,\n      y: worldCoords.y - pos.y,\n    };\n\n    return true;\n  }\n\n  updateNodeConnectorPos(aNode: HTMLLogicFlowNodeElement, delta: Coords) {\n    const connectors = aNode.querySelectorAll(\n      'logic-flow-connector',\n    ) as NodeListOf<HTMLLogicFlowConnectorElement>;\n\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      const rect = { ...this.connectorRects[connector.id] };\n      rect.left += delta.x;\n      rect.top += delta.y;\n      this.connectorRects[connector.id] = rect;\n\n      this.updateNodeConnectorConnectionsPos(connector, rect);\n    }\n  }\n\n  updateNodeConnectorConnectionsPos(\n    connector: HTMLLogicFlowConnectorElement,\n    rect: Rect,\n  ) {\n    if (connector.connections.length) {\n      const pos = this.getRectCenter(rect);\n\n      for (let i = 0; i < connector.connections.length; i++) {\n        const connection = connector.connections[i];\n        if (connector.type === 'input') {\n          connection.end = pos;\n        } else {\n          connection.start = pos;\n        }\n      }\n    }\n  }\n\n  calcSnapToGrid(pos: Coords, gridSize: number) {\n    return {\n      x: Math.round(pos.x / gridSize) * gridSize,\n      y: Math.round(pos.y / gridSize) * gridSize,\n    };\n  }\n\n  calcNodePos(worldCoords: Coords) {\n    const pos = {\n      x: worldCoords.x - this.activeNodeDragStart.x,\n      y: worldCoords.y - this.activeNodeDragStart.y,\n    };\n\n    if (!this.snapToGrid) return pos;\n\n    return this.calcSnapToGrid(pos, this.connectorSnapDistance);\n  }\n\n  moveNode(loc: Coords, gridSize: number) {\n    const aNode = this.activeNode;\n    const worldCoords = this.camera.toWorldCoords(loc);\n    const oldPos = aNode.position;\n\n    let newPos = this.calcNodePos(worldCoords);\n\n    // calc new position\n    if (this.snapToGrid) {\n      newPos = this.calcSnapToGrid(newPos, gridSize);\n    }\n\n    const delta = {\n      x: newPos.x - oldPos.x,\n      y: newPos.y - oldPos.y,\n    };\n\n    // update node rect\n    const rect = this.nodeRects[aNode.id];\n    rect.left = newPos.x;\n    rect.top = newPos.y;\n    rect.width = aNode.clientWidth || rect.width;\n    rect.height = aNode.clientHeight || rect.height;\n    this.nodeRects[aNode.id] = rect;\n\n    aNode.position = newPos;\n\n    // update node position and it's connections\n    this.updateNodeConnectorPos(aNode, delta); // ???\n  }\n\n  endNodeDrag() {\n    this.activeNodeDragging = false;\n    this.updateNodeConnectorsQuadtree(this.activeNode);\n\n    const connectors = this.activeNode.querySelectorAll('logic-flow-connector');\n\n    let connections = [];\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i] as HTMLLogicFlowConnectorElement;\n      connections = connections.concat(connector.connections);\n    }\n\n    for (let i = 0; i < connections.length; i++) {\n      const connection = connections[i] as HTMLLogicFlowConnectionElement;\n      const path = connection.querySelector('path');\n      const rect = path.getBoundingClientRect();\n      this.connectionRects[connection.id] = {\n        left:\n          (rect.x - this.viewportOffset.left) / this.camera.zoom -\n          this.camera.pos.x,\n        top:\n          (rect.y - this.viewportOffset.top) / this.camera.zoom -\n          this.camera.pos.y,\n        width: rect.width / this.camera.zoom,\n        height: rect.height / this.camera.zoom,\n      };\n      this.updateViewportQuadtree(connection);\n\n      // use debug div to show connection\n      // const debug = document.getElementById('debug');\n      // const debugRect = this.connectionRects[connection.id];\n      // if (debug) {\n      //   debug.style.left = `${debugRect.left}px`;\n      //   debug.style.top = `${debugRect.top}px`;\n      //   debug.style.width = `${debugRect.width}px`;\n      //   debug.style.height = `${debugRect.height}px`;\n      // }\n    }\n    this.updateViewportQuadtree(this.activeNode);\n\n    this.activeNode = null;\n  }\n\n  createNewConnection(startPos: Coords, type: 'input' | 'output') {\n    const connection = document.createElement(\n      'logic-flow-connection',\n    ) as HTMLLogicFlowConnectionElement;\n    connection.start = startPos;\n    connection.end = startPos;\n    connection.type = type;\n\n    this.activeConnection = connection;\n    this.contentEl.appendChild(connection);\n  }\n\n  moveActiveConnection(loc: Coords, snappingDist: number) {\n    const aConn = this.activeConnection;\n    // const scrollOffset = {\n    //   x: window.scrollX,\n    //   y: window.screenY,\n    // };\n    // console.log(\n    //   'scrollOffset',\n    //   window.screenY,\n    //   window.scrollY,\n    //   this.viewportEl.offsetTop,\n    // );\n\n    const worldCoords = this.camera.toWorldCoords({\n      x: loc.x - this.viewportOffset.left,\n      y: loc.y - this.viewportOffset.top,\n    });\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappableConnector) {\n      const rect = this.connectorRects[snappableConnector.id];\n      aConn.end = this.getRectCenter(rect);\n    } else {\n      aConn.end = worldCoords;\n    }\n  }\n\n  getTargetConnector(target: HTMLElement, loc: Coords, snappingDist: number) {\n    let targetConnector = target.closest(\n      'logic-flow-connector .connector',\n    ) as HTMLLogicFlowConnectorElement;\n\n    // const scrollOffset = {\n    //   x: window.scrollX,\n    //   y: window.scrollY,\n    // };\n\n    const snappedConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappedConnector) {\n      targetConnector = this.connectors.get(snappedConnector.id);\n    }\n\n    return targetConnector;\n  }\n\n  startNewConnection(\n    target: HTMLLogicFlowConnectorElement,\n    cursor = 'grabbing',\n  ) {\n    if (!target) return false;\n\n    const connEl = target.closest(\n      'logic-flow-connector .connector',\n    ) as HTMLLogicFlowConnectorElement;\n    if (!connEl) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnector = connEl;\n\n    const parentConn = connEl.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n    const rect = this.connectorRects[parentConn.id];\n    const center = this.getRectCenter(rect);\n\n    this.createNewConnection(center, parentConn.type);\n\n    return true;\n  }\n\n  processConnection(target: HTMLLogicFlowConnectorElement) {\n    const aConn = this.activeConnector.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n    const tConn = target.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n\n    // find parent nodes\n    const aNode = aConn.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n    const tNode = tConn.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n\n    // validate connection\n    if (!this.isValidConnection(aConn, tConn, aNode, tNode, target)) {\n      this.activeConnection.remove();\n      // remove from rects\n      delete this.connectionRects[this.activeConnection.id];\n      return;\n    }\n\n    this.updateConnectionEndpoints(aConn, tConn);\n    this.finalizeConnection(aConn, tConn);\n\n    // update rect\n    const path = this.activeConnection.querySelector('path');\n    const rect = path.getBoundingClientRect();\n    this.connectionRects[this.activeConnection.id] = {\n      left:\n        (rect.x - this.viewportOffset.left) / this.camera.zoom -\n        this.camera.pos.x,\n      top:\n        (rect.y - this.viewportOffset.top) / this.camera.zoom -\n        this.camera.pos.y,\n      width: rect.width / this.camera.zoom,\n      height: rect.height / this.camera.zoom,\n    };\n\n    // use debug div to show connection\n    // const debug = document.getElementById('debug');\n    // const debugRect = this.connectionRects[this.activeConnection.id];\n    // if (debug) {\n    //   debug.style.left = `${debugRect.left}px`;\n    //   debug.style.top = `${debugRect.top}px`;\n    //   debug.style.width = `${debugRect.width}px`;\n    //   debug.style.height = `${debugRect.height}px`;\n    // }\n\n    // update quadtree\n    this.updateViewportQuadtree(this.activeConnection);\n  }\n\n  isValidConnection(\n    aConn: HTMLLogicFlowConnectorElement,\n    tConn: HTMLLogicFlowConnectorElement,\n    aNode: HTMLLogicFlowNodeElement,\n    tNode: HTMLLogicFlowNodeElement,\n    targetConn: HTMLLogicFlowConnectorElement,\n  ) {\n    // avoid connecting to self or already connected\n    if (\n      this.activeConnector.connectingConnector === tConn ||\n      tConn.connectingConnector === aConn\n    ) {\n      // perhaps send an error event\n      // console.log('already connected');\n      return false;\n    }\n\n    if (aNode === tNode || this.activeConnector === targetConn) {\n      // connecting to self\n      return false;\n    }\n\n    // ensure is between input/output not same type\n    if (aConn.type === tConn.type) {\n      // console.log('same type');\n      return false;\n    }\n\n    return true;\n  }\n\n  updateConnectionEndpoints(\n    active: HTMLLogicFlowConnectorElement,\n    target: HTMLLogicFlowConnectorElement,\n  ) {\n    const targRect = this.connectorRects[target.id];\n\n    if (active.type === 'input') {\n      // swap start and end connections\n      this.activeConnection.start = this.getRectCenter(targRect);\n      this.activeConnection.end = this.activeConnectorStartPos;\n      this.activeConnection.type = 'output';\n\n      const rect = this.connectorRects[active.id];\n      this.activeConnection.end = this.getRectCenter(rect);\n    } else {\n      this.activeConnection.end = this.getRectCenter(targRect);\n    }\n  }\n\n  finalizeConnection(\n    active: HTMLLogicFlowConnectorElement,\n    target: HTMLLogicFlowConnectorElement,\n  ) {\n    active.connectingConnector = target;\n    active.connections.push(this.activeConnection);\n    target.connectingConnector = active;\n    target.connections.push(this.activeConnection);\n\n    this.activeConnection.connectors.clear();\n    this.activeConnection.connectors.add(active);\n    this.activeConnection.connectors.add(target);\n  }\n\n  startDisconnectConnection(\n    target: HTMLLogicFlowConnectionElement,\n    loc: Coords,\n    snappingDist: number,\n    cursor = 'grabbing',\n  ) {\n    if (!target) return false;\n\n    const connection = target.closest(\n      'logic-flow-connection',\n    ) as HTMLLogicFlowConnectionElement;\n    if (!connection) return false;\n\n    this.bringToFront(connection);\n\n    // const scrollOffset = {\n    //   x: window.scrollX,\n    //   y: window.scrollY,\n    // };\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (!snappableConnector) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnection = connection;\n\n    const snapConnector = this.connectors.get(snappableConnector.id);\n    this.activeConnector =\n      snapConnector.connectingConnector as HTMLLogicFlowConnectorElement;\n\n    this.disconnectConnector(\n      this.activeConnection,\n      this.activeConnector,\n      snapConnector,\n    );\n\n    // handle type specific logic\n    if (this.activeConnector.type === 'input') {\n      this.swapConnectionEndpoints(this.activeConnection);\n      this.activeConnection.type = 'input';\n    }\n\n    return true;\n  }\n\n  disconnectConnector(\n    connection: HTMLLogicFlowConnectionElement,\n    connector: HTMLLogicFlowConnectorElement,\n    snapConnector: HTMLLogicFlowConnectorElement,\n  ) {\n    connector.connections = connector.connections.filter(c => c !== connection);\n    snapConnector.connections = snapConnector.connections.filter(\n      c => c !== connection,\n    );\n\n    connector.connectingConnector = null;\n    snapConnector.connectingConnector = null;\n  }\n\n  swapConnectionEndpoints(connection: HTMLLogicFlowConnectionElement) {\n    const { start, end } = connection;\n    connection.start = end;\n    connection.end = start;\n  }\n\n  updateNodeConnectorsQuadtree(node: HTMLLogicFlowNodeElement) {\n    const connectors = node.querySelectorAll(\n      'logic-flow-connector',\n    ) as NodeListOf<HTMLLogicFlowConnectorElement>;\n\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      let rect = this.connectorRects[connector.id];\n      if (!rect) {\n        console.log('no rect');\n        let connectorEl = connector.querySelector('.connector');\n\n        const r = connectorEl.getBoundingClientRect();\n        this.connectorRects[connector.id] = {\n          left: r.x,\n          top: r.y,\n          width: r.width,\n          height: r.height,\n        };\n        rect = this.connectorRects[connector.id];\n      }\n\n      this.connectorQuadtree.remove(connector.id);\n      this.connectorQuadtree.insert({\n        id: connector.id,\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height / 2,\n      });\n    }\n  }\n\n  updateViewportQuadtree(\n    entity: HTMLLogicFlowNodeElement | HTMLLogicFlowConnectionElement,\n  ) {\n    if (entity.tagName === 'LOGIC-FLOW-NODE') {\n      const rect = this.nodeRects[entity.id];\n\n      this.viewportQuadtree.remove(entity.id);\n\n      this.viewportQuadtree.insert({\n        id: entity.id,\n        top: rect.top,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n      });\n    } else if (entity.tagName === 'LOGIC-FLOW-CONNECTION') {\n      const rect = this.connectionRects[entity.id];\n\n      this.viewportQuadtree.remove(entity.id);\n\n      this.viewportQuadtree.insert({\n        id: entity.id,\n        top: rect.top,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n      });\n    }\n  }\n\n  updateVisibleElements() {\n    // Get visible nodes within the viewport quadtree\n    let rect = this.viewportRect;\n    rect = {\n      left: rect.left,\n      top: rect.top,\n      width: rect.width,\n      height: rect.height,\n    };\n\n    const visibleEntities = this.viewportQuadtree.query(\n      rect,\n      [],\n      this.camera.pos,\n      this.camera.zoom,\n    );\n\n    const newVisibleElements = visibleEntities.map((entity: any) => entity.id);\n    // console.log('newVisibleElements', newVisibleElements);\n\n    const allItems = new Set([\n      ...this.prevVisibleElements,\n      ...newVisibleElements,\n    ]);\n\n    // Update the previous visible elements\n    this.prevVisibleElements = newVisibleElements;\n\n    // Update elements that changed visibility\n    for (const id of allItems) {\n      const el = document.getElementById(id);\n      if (el) {\n        const entityComponent = el as\n          | HTMLLogicFlowNodeElement\n          | HTMLLogicFlowConnectionElement;\n        const curstate = entityComponent.isVisible;\n        const prevState = this.prevVisibleElements.includes(id);\n        const newstate = newVisibleElements.includes(id);\n        if (prevState === curstate && newstate === curstate) {\n          continue;\n        }\n\n        entityComponent.isVisible = newVisibleElements.includes(id);\n      }\n    }\n  }\n}\n","import { Camera } from '../types/Camera';\n\nexport const renderCanvasGrid = (\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  gridSize: number,\n  color: string,\n  bgColor: string,\n  camera: Camera,\n) => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n\n  let step = gridSize * camera.zoom;\n\n  // if the step is too small because of zoom, increase it by a factor of 10\n  if (step < 10) {\n    step *= 2;\n  }\n\n  // const dpr = window.devicePixelRatio || 1;\n  // canvas.width = width * dpr;\n  // canvas.height = height * dpr;\n  // ctx.scale(dpr, dpr);\n\n  // canvas.width = width;\n  // canvas.height = height;\n\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n\n  //clear\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(0, 0, width, height);\n\n  const offsetX = (-camera.pos.x % gridSize) * camera.zoom;\n  const offsetY = (-camera.pos.y % gridSize) * camera.zoom;\n\n  ctx.beginPath();\n\n  for (let x = -offsetX; x < width; x += step) {\n    ctx.moveTo(x, 0);\n    ctx.lineTo(x, height);\n  }\n\n  for (let y = -offsetY; y < height; y += step) {\n    ctx.moveTo(0, y);\n    ctx.lineTo(width, y);\n  }\n\n  ctx.stroke();\n};\n\nexport const renderCanvasDotGrid = (\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  gridSize: number,\n  color: string,\n  bgColor: string,\n  camera: Camera,\n) => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n\n  let step = gridSize * camera.zoom;\n\n  // if the step is too small because of zoom, increase it by a factor of 10\n  if (step < 10) {\n    step *= 2;\n  }\n\n  // const dpr = window.devicePixelRatio || 1;\n  // canvas.width = width * dpr;\n  // canvas.height = height * dpr;\n  // ctx.scale(dpr, dpr);\n\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n\n  //clear\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(0, 0, width, height);\n\n  const offsetX = (-camera.pos.x % gridSize) * camera.zoom;\n  const offsetY = (-camera.pos.y % gridSize) * camera.zoom;\n\n  ctx.beginPath();\n\n  // for (let x = -offsetX; x < width; x += step) {\n  //   for (let y = -offsetY; y < height; y += step) {\n  //     ctx.moveTo(x, y);\n  //     ctx.arc(x, y, 1, 0, 2 * Math.PI);\n  //   }\n  // }\n\n  ctx.fillStyle = color;\n\n  for (let x = -offsetX; x < width; x += step) {\n    for (let y = -offsetY; y < height; y += step) {\n      //  ctx.moveTo(x, y);\n      //  ctx.arc(x, y, 1, 0, 2 * Math.PI);\n      // use fill rect\n      ctx.fillRect(x - 1, y - 1, 2, 2);\n    }\n  }\n\n  ctx.stroke();\n};\n",":host {\n  display: block;\n}\n","import { Component, Prop, h, Element, Watch, Method } from '@stencil/core';\nimport { debounce } from '../../utils/debounce';\nimport { throttle } from '../../utils/throttle';\nimport { getEventLocation } from '../../utils/getEventLocation';\nimport { ViewContext } from '../../types/ViewContext';\nimport {\n  renderCanvasDotGrid,\n  renderCanvasGrid,\n} from '../../utils/renderCanvasGrid';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-viewport',\n  styleUrl: 'logic-flow-viewport.css',\n  shadow: false,\n})\nexport class LogicFlowViewport {\n  @Element() el: HTMLLogicFlowViewportElement;\n\n  // @Prop() showGrid: boolean = true;\n  // @Prop() showDotGrid: boolean = false;\n  @Prop() showGrid: boolean = true;\n  @Prop() gridType: 'line' | 'dot' = 'line';\n  @Prop() gridSize: number = 20;\n  @Prop() gridBgColor: string = '#f7f7f7';\n  @Prop() gridLineColor: string = '#555555';\n  @Prop() maxZoom: number = 3;\n  @Prop() minZoom: number = 0.2;\n  @Prop() zoomSpeed: number = 0.08;\n  @Prop() snapToGrid: boolean = false;\n  @Prop() connectorSnappingDistance: number = 37;\n  @Prop() cursors: Record<string, string> = {\n    default: 'auto',\n    panning: 'grabbing',\n    moving: 'grabbing',\n  };\n\n  ctx: ViewContext;\n\n  resizeObserver: ResizeObserver;\n  debouncedResize = debounce(() => this.onResize(), 16);\n  debouncedUpdateScreen = debounce(() => this.updateScreen(), 1);\n  debouncedUpdateViewportRect = debounce(\n    () => this.ctx.updateViewportRect(),\n    100,\n  );\n  throttledTouchMove = throttle(e => this.handleTouchMove(e), 1);\n  forceContentReflowDebounced = debounce(() => this.forceContentReflow(), 30);\n\n  elMouseDown = (e: MouseEvent | TouchEvent) => this.onPointerDown(e);\n  elMouseUp = (e: MouseEvent | TouchEvent) => this.onPointerUp(e);\n  elMouseMove = (e: MouseEvent | TouchEvent) => this.onPointerMove(e);\n\n  elTouchStart = (e: TouchEvent) => this.handleTouchStart(e);\n  elTouchMove = (e: TouchEvent) => this.throttledTouchMove(e);\n  elTouchEnd = (e: MouseEvent | TouchEvent) => this.onPointerUp(e);\n\n  elWheel = (e: WheelEvent) => this.handleWheel(e);\n\n  elScroll = () => this.debouncedUpdateViewportRect();\n\n  elKeyPress = (e: KeyboardEvent) => this.onKeyPress(e);\n\n  componentDidLoad() {\n    this.ctx = new ViewContext(this.el);\n    // this.ctx.camera = this.ctx.camera;\n\n    this.ctx.viewportEl = this.el.querySelector(\n      '.logic-flow-viewport',\n    ) as HTMLDivElement;\n    this.ctx.contentEl = this.el.querySelector(\n      '.viewport-content',\n    ) as HTMLDivElement;\n    this.ctx.gridEl = this.el.querySelector(\n      '.logic-flow-grid',\n    ) as HTMLCanvasElement;\n    // this.ctx.viewportRect = this.ctx.viewportEl.getBoundingClientRect();\n    this.ctx.initialPinchDistance = 0;\n    this.ctx.snapToGrid = this.snapToGrid;\n    this.ctx.connectorSnapDistance = this.connectorSnappingDistance;\n\n    const viewportEl = this.ctx.viewportEl;\n\n    // setup event listeners\n    window.addEventListener('mousedown', this.elMouseDown, {\n      passive: true,\n    });\n    viewportEl.addEventListener('mouseup', this.elMouseUp, { passive: true });\n    viewportEl.addEventListener('mousemove', this.elMouseMove, {\n      passive: true,\n    });\n\n    viewportEl.addEventListener('touchstart', this.elTouchStart, {\n      passive: false,\n    });\n    viewportEl.addEventListener('touchmove', this.elTouchMove, {\n      passive: false,\n    });\n    viewportEl.addEventListener('touchend', this.elTouchEnd, { passive: true });\n\n    viewportEl.addEventListener('wheel', this.elWheel, { passive: false });\n\n    window.addEventListener('scroll', this.elScroll, { passive: true });\n\n    window.addEventListener('keydown', this.elKeyPress, { passive: true });\n\n    // Handle resize events\n    this.resizeObserver = new ResizeObserver(() => this.debouncedResize());\n    this.resizeObserver.observe(this.ctx.viewportEl);\n\n    this.renderGrid();\n  }\n\n  disconnectedCallback() {\n    // Clean up resize observer\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n\n    // Clean up event listeners\n    const canvasEl = this.ctx.viewportEl;\n    window.removeEventListener('mousedown', this.elMouseDown);\n    canvasEl.removeEventListener('mouseup', this.elMouseUp);\n    canvasEl.removeEventListener('mousemove', this.elMouseMove);\n\n    canvasEl.removeEventListener('touchstart', this.elTouchStart);\n    canvasEl.removeEventListener('touchmove', this.elTouchMove);\n    canvasEl.removeEventListener('touchend', this.elTouchEnd);\n\n    canvasEl.removeEventListener('wheel', this.elWheel);\n\n    window.removeEventListener('scroll', this.elScroll);\n\n    window.removeEventListener('keydown', this.elKeyPress);\n\n    this.ctx.destroy();\n  }\n\n  @Method()\n  async getCamera() {\n    return this.ctx.camera;\n  }\n\n  @Method()\n  async screenToWorldCoords(screenCoords: Coords) {\n    // adjust screen coords to viewport offset\n    const loc = {\n      x: screenCoords.x - this.ctx.viewportOffset.left,\n      y: screenCoords.y - this.ctx.viewportOffset.top,\n    };\n\n    return this.ctx.camera.toWorldCoords(loc);\n  }\n\n  @Watch('snapToGrid')\n  onSnapToGridChange() {\n    this.ctx.snapToGrid = this.snapToGrid;\n  }\n\n  @Watch('gridType')\n  onGridTypeChange() {\n    this.ctx.needsRedraw = true;\n    this.renderGrid();\n  }\n\n  scheduleComponentUpdate() {\n    this.ctx.needsRedraw = true;\n    this.ctx.debouncedUpdateVisibleElements();\n    this.debouncedUpdateScreen();\n  }\n\n  onResize() {\n    // console.log('onResize');\n    this.ctx.needsRedraw = true;\n    this.ctx.viewportRect = this.ctx.viewportEl.getBoundingClientRect();\n\n    this.ctx.gridEl.width = this.ctx.viewportRect.width;\n    this.ctx.gridEl.height = this.ctx.viewportRect.height;\n\n    this.ctx.viewportOffset = {\n      top: this.ctx.viewportRect.top,\n      left: this.ctx.viewportRect.left,\n    };\n\n    // update quadtree boundary\n    const boundary = {\n      left: this.ctx.viewportRect.left - this.ctx.viewportRect.left,\n      top: this.ctx.viewportRect.top - this.ctx.viewportRect.top,\n      width: this.ctx.viewportRect.width,\n      height: this.ctx.viewportRect.height,\n    };\n\n    // get set viewport rect\n    this.ctx.viewportRect = boundary;\n\n    // this.ctx.connectorQuadtree.boundary = this.ctx.viewportRect;\n    this.ctx.viewportQuadtree.boundary = this.ctx.viewportRect;\n\n    this.renderGrid();\n  }\n\n  renderGrid() {\n    if (!this.showGrid || !this.ctx.needsRedraw) return;\n\n    requestAnimationFrame(() => {\n      if (this.gridType === 'line') {\n        renderCanvasGrid(\n          this.ctx.gridEl,\n          this.ctx.viewportRect.width,\n          this.ctx.viewportRect.height,\n          this.gridSize,\n          this.gridLineColor,\n          this.gridBgColor,\n          this.ctx.camera,\n        );\n      }\n\n      if (this.gridType === 'dot') {\n        renderCanvasDotGrid(\n          this.ctx.gridEl,\n          this.ctx.viewportRect.width,\n          this.ctx.viewportRect.height,\n          this.gridSize,\n          this.gridLineColor,\n          this.gridBgColor,\n          this.ctx.camera,\n        );\n      }\n    });\n\n    this.ctx.needsRedraw = false;\n  }\n\n  updateScreen() {\n    requestAnimationFrame(() => {\n      const contentEl = this.ctx.contentEl;\n      // Apply transformations to the content, aligning with the grid\n      contentEl.style.transform = `perspective(1px) scale(${this.ctx.camera.zoom}) translate(${this.ctx.camera.pos.x}px, ${this.ctx.camera.pos.y}px)`;\n      this.renderGrid();\n    });\n  }\n\n  onKeyPress(event: KeyboardEvent) {\n    // if delete key pressed\n    // check if node or connection is current focused\n    // if so, delete it\n\n    if (event.key === 'Delete') {\n      const target = document.activeElement as HTMLElement;\n\n      if (target.tagName === 'LOGIC-FLOW-NODE') {\n        // this.ctx.removeNode(target.id);\n        // remove from dom\n        target.remove();\n      } else if (target.closest('logic-flow-connection')) {\n        // this.ctx.removeConnection(target.id);\n        // remove from dom\n        // target.remove();\n        const connection = target.closest('logic-flow-connection');\n        connection.remove();\n      }\n    }\n  }\n\n  onPointerDown(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n    const worldCoords = this.ctx.camera.toWorldCoords(loc);\n    const target = document.elementFromPoint(loc.x, loc.y) as HTMLElement;\n\n    // if pointer outside viewport, return\n    if (\n      loc.x > this.ctx.viewportOffset.left + this.ctx.viewportRect.width ||\n      loc.x < this.ctx.viewportOffset.left ||\n      loc.y > this.ctx.viewportOffset.top + this.ctx.viewportRect.height ||\n      loc.y < this.ctx.viewportOffset.top\n    ) {\n      return;\n    }\n\n    // if target is not a logic-flow element, return\n    if (\n      !target ||\n      !target.closest(\n        'logic-flow-node, logic-flow-connector, logic-flow-connection, logic-flow-viewport',\n      )\n    ) {\n      return;\n    }\n\n    // if a connection clicked\n    if (\n      this.ctx.startDisconnectConnection(\n        target as HTMLLogicFlowConnectionElement,\n        loc,\n        this.connectorSnappingDistance,\n        this.cursors.moving,\n      )\n    )\n      return;\n\n    // if a connector clicked\n    if (this.ctx.startNewConnection(target as HTMLLogicFlowConnectorElement))\n      return;\n\n    // if a node clicked\n    if (this.ctx.startNodeDrag(target as HTMLLogicFlowNodeElement, worldCoords))\n      return;\n\n    // if nothing clicked, then start panning\n    this.ctx.startPanning(worldCoords);\n  }\n\n  onPointerUp(event: MouseEvent | TouchEvent) {\n    if (this.ctx.activeConnector && this.ctx.activeConnection) {\n      this.onEndActiveConnection(event);\n    } else if (this.ctx.activeNode && this.ctx.activeNodeDragging) {\n      this.ctx.endNodeDrag();\n    }\n\n    this.ctx.resetPointerStates();\n  }\n\n  onEndActiveConnection(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n    let target = event.target as HTMLElement;\n\n    // For touch events, get the element at the touch point\n    if (event instanceof TouchEvent) {\n      target = document.elementFromPoint(loc.x, loc.y) as HTMLElement;\n    }\n\n    let targetConnector = this.ctx.getTargetConnector(\n      target,\n      loc,\n      this.connectorSnappingDistance,\n    );\n\n    if (targetConnector) {\n      this.ctx.processConnection(targetConnector);\n    } else {\n      this.ctx.activeConnection.remove();\n    }\n\n    // clear active states\n    this.ctx.activeConnector = null;\n    this.ctx.activeConnection = null;\n  }\n\n  onPointerMove(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n\n    if (this.ctx.activeConnector && this.ctx.activeConnection) {\n      this.ctx.moveActiveConnection(loc, this.connectorSnappingDistance);\n    } else if (this.ctx.activeNode && this.ctx.activeNodeDragging) {\n      this.ctx.moveNode(loc, this.gridSize);\n    } else if (this.ctx.isPanning) {\n      this.ctx.panCamera(loc);\n      this.scheduleComponentUpdate();\n    }\n  }\n\n  handleWheel(event: WheelEvent) {\n    event.preventDefault();\n\n    const canvasRect = this.ctx.viewportRect;\n    const mouseX =\n      event.clientX - canvasRect.left - this.ctx.viewportOffset.left;\n    const mouseY = event.clientY - canvasRect.top - this.ctx.viewportOffset.top;\n\n    // Calculate the zoom level change\n    const zoomDelta = event.deltaY < 0 ? this.zoomSpeed : -this.zoomSpeed;\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.ctx.camera.zoom + zoomDelta),\n    );\n\n    // Calculate the scale factor\n    const scaleFactor = newZoom / this.ctx.camera.zoom;\n\n    // Adjust the pan position to keep the same point under the cursor\n    const newPanX =\n      mouseX -\n      (mouseX - this.ctx.camera.pos.x * this.ctx.camera.zoom) * scaleFactor;\n\n    const newPanY =\n      mouseY -\n      (mouseY - this.ctx.camera.pos.y * this.ctx.camera.zoom) * scaleFactor;\n\n    // Update pan and zoom\n    this.ctx.camera.pos = { x: newPanX / newZoom, y: newPanY / newZoom };\n\n    // this.lastZoom = this.ctx.camera.zoom;\n    this.ctx.camera.zoom = newZoom;\n\n    // if zooming in, force a reflow to prevent blurry text\n    if (zoomDelta > 0) {\n      this.forceContentReflowDebounced();\n    }\n\n    // this.ctx.needsRedraw = true;\n    this.scheduleComponentUpdate();\n  }\n\n  handleTouchStart(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> start panning\n      this.onPointerDown(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> start pinch zoom\n      this.ctx.initialPinchDistance = 0; // Reset initial pinch distance\n      this.handlePinch(event); // Start pinch gesture\n    }\n  }\n\n  handleTouchMove(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> panning\n      this.onPointerMove(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> pinch zooming\n      this.handlePinch(event);\n    }\n  }\n\n  handlePinch(event: TouchEvent) {\n    if (event.touches.length !== 2) return;\n\n    // handle panning while pinching\n    this.onPointerMove(event);\n\n    event.preventDefault(); // Prevent default behavior like scrolling\n\n    const touch1 = event.touches[0];\n    const touch2 = event.touches[1];\n\n    // Calculate the distance between the two touch points (pinch)\n    const distance = Math.sqrt(\n      (touch1.clientX - touch2.clientX) ** 2 +\n        (touch1.clientY - touch2.clientY) ** 2,\n    );\n\n    if (this.ctx.initialPinchDistance === 0) {\n      // If it's the start of the pinch, initialize the pinch distance\n      this.ctx.initialPinchDistance = distance;\n    } else {\n      // Calculate the scale factor based on the distance change\n      const scaleFactor = distance / this.ctx.initialPinchDistance;\n\n      // Calculate the midpoint between the two fingers (the pinch center)\n      const pinchCenterX = (touch1.clientX + touch2.clientX) / 2;\n      const pinchCenterY = (touch1.clientY + touch2.clientY) / 2;\n\n      // Apply zoom and keep the pinch center fixed\n      this.adjustZoomOnPinch(scaleFactor, pinchCenterX, pinchCenterY);\n\n      // Update the initial pinch distance for the next move\n      this.ctx.initialPinchDistance = distance;\n    }\n  }\n\n  adjustZoomOnPinch(\n    scaleFactor: number,\n    pinchCenterX: number,\n    pinchCenterY: number,\n  ) {\n    // Calculate new zoom, ensuring it stays within min/max bounds\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.ctx.camera.zoom * scaleFactor),\n    );\n\n    // Find the pinch center position relative to the content's current position and zoom\n    const pinchContentX =\n      (pinchCenterX - this.ctx.camera.pos.x * this.ctx.camera.zoom) /\n      this.ctx.camera.zoom;\n    const pinchContentY =\n      (pinchCenterY - this.ctx.camera.pos.y * this.ctx.camera.zoom) /\n      this.ctx.camera.zoom;\n\n    // Adjust pan so the pinch center stays fixed after zooming\n    this.ctx.camera.pos = {\n      x: pinchCenterX / newZoom - pinchContentX,\n      y: pinchCenterY / newZoom - pinchContentY,\n    };\n\n    // Apply the new zoom level\n    this.ctx.camera.zoom = newZoom;\n\n    // Trigger a screen redraw\n    this.debouncedUpdateScreen();\n  }\n\n  forceContentReflow() {\n    // force repaint the content\n    const cdisplay = this.ctx.contentEl.style.display;\n    this.ctx.contentEl.style.display = 'none';\n    this.ctx.contentEl.offsetHeight; // trigger reflow\n    this.ctx.contentEl.style.display = cdisplay;\n  }\n\n  render() {\n    return (\n      // <Host>\n      <div class=\"logic-flow-viewport\">\n        <canvas\n          class=\"logic-flow-grid\"\n          style={{ display: this.showGrid ? 'block' : 'none' }}\n        ></canvas>\n        <div class=\"viewport-content\">\n          <slot></slot>\n        </div>\n      </div>\n      // /* </Host> */\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}