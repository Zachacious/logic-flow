{"file":"logic-flow-connection.entry.esm.js","mappings":"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","names":[],"sources":["src/components/logic-flow-connection/logic-flow-connection.css?tag=logic-flow-connection","src/components/logic-flow-connection/logic-flow-connection.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, Watch, h } from '@stencil/core';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-connection',\n  styleUrl: 'logic-flow-connection.css',\n  shadow: false,\n})\nexport class LogicFlowConnection {\n  @Prop() start: Coords = { x: 0, y: 0 };\n  @Prop() end: Coords = { x: 0, y: 0 };\n  @Prop() type: 'input' | 'output' = 'input';\n  @Prop({ mutable: true }) isVisible: boolean = true;\n\n  path: string;\n  private _capRadius = 5;\n  style = {};\n\n  componentWillLoad() {\n    // calculate cap width based on connector size\n    // grab a .connector element from the dom\n    const connector = document.querySelector('.connector');\n    if (connector) {\n      // get size from css\n      const style = getComputedStyle(connector);\n      this._capRadius = parseInt(style.width) / 2;\n    }\n  }\n\n  @Watch('start')\n  @Watch('end')\n  @Watch('type')\n  updatePath() {\n    const delta = {\n      x: this.end.x - this.start.x,\n      y: this.end.y - this.start.y,\n    };\n    const distance = Math.sqrt(delta.x ** 2 + delta.y ** 2);\n    const controlOffset = Math.min(100, distance * 0.35);\n    const capOffset = this._capRadius;\n\n    // Generate the path based on type\n    if (this.type === 'output') {\n      // Calculate start and end points for the path\n      const startInset = {\n        x: this.start.x + capOffset - 1,\n        y: this.start.y,\n      };\n      const endInset = {\n        x: this.end.x - capOffset + 1,\n        y: this.end.y,\n      };\n\n      this.path = `M ${startInset.x},${startInset.y}\n          C ${startInset.x + controlOffset},${startInset.y}\n            ${endInset.x - controlOffset},${endInset.y}\n            ${endInset.x},${endInset.y}`;\n    } else {\n      // Calculate start and end points for the path\n      const startInset = {\n        x: this.start.x - capOffset + 1,\n        y: this.start.y,\n      };\n      const endInset = {\n        x: this.end.x + capOffset - 1,\n        y: this.end.y,\n      };\n\n      this.path = `M ${startInset.x},${startInset.y}\n          C ${startInset.x - controlOffset},${startInset.y}\n            ${endInset.x + controlOffset},${endInset.y}\n            ${endInset.x},${endInset.y}`;\n    }\n  }\n\n  componentWillRender() {\n    if (!this.isVisible) {\n      this.style = { display: 'none' };\n    } else {\n      this.style = {};\n    }\n  }\n\n  render() {\n    // console.log('render', this.isVisible);\n    return (\n      <Host class=\"logic-flow-connection\" style={this.style}>\n        <svg class=\"connection\">\n          <path class=\"connection-line\" d={this.path} tabindex={0}></path>\n          {/* Start cap */}\n          <circle\n            cx={this.start.x}\n            cy={this.start.y}\n            r=\"1.5px\"\n            class=\"connection-cap start-cap\"\n          />\n          {/* End cap */}\n          <circle\n            cx={this.end.x}\n            cy={this.end.y}\n            r=\"1.5px\"\n            class=\"connection-cap end-cap\"\n          />\n        </svg>\n      </Host>\n    );\n  }\n}\n"],"version":3}