{"version":3,"names":["logicFlowConnectionCss","LogicFlowConnectionStyle0","LogicFlowConnection","this","_capRadius","x","y","componentWillLoad","connector","document","querySelector","style","getComputedStyle","parseInt","width","updatePath","delta","end","start","distance","Math","sqrt","controlOffset","min","capOffset","type","startInset","endInset","path","render","h","Host","key","class","d","cx","cy","r"],"sources":["src/components/logic-flow-connection/logic-flow-connection.css?tag=logic-flow-connection","src/components/logic-flow-connection/logic-flow-connection.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, Watch, h } from '@stencil/core';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-connection',\n  styleUrl: 'logic-flow-connection.css',\n  shadow: false,\n})\nexport class LogicFlowConnection {\n  @Prop() start: Coords = { x: 0, y: 0 };\n  @Prop() end: Coords = { x: 0, y: 0 };\n  @Prop() type: 'input' | 'output' = 'input';\n\n  path: string;\n  private _capRadius = 5;\n\n  componentWillLoad() {\n    // calculate cap width based on connector size\n    // grab a .connector element from the dom\n    const connector = document.querySelector('.connector');\n    if (connector) {\n      // get size from css\n      const style = getComputedStyle(connector);\n      this._capRadius = parseInt(style.width) / 2;\n    }\n  }\n\n  @Watch('start')\n  @Watch('end')\n  @Watch('type')\n  updatePath() {\n    const delta = {\n      x: this.end.x - this.start.x,\n      y: this.end.y - this.start.y,\n    };\n    const distance = Math.sqrt(delta.x ** 2 + delta.y ** 2);\n    const controlOffset = Math.min(100, distance * 0.35);\n    const capOffset = this._capRadius;\n\n    // Generate the path based on type\n    if (this.type === 'output') {\n      // Calculate start and end points for the path\n      const startInset = {\n        x: this.start.x + capOffset - 1,\n        y: this.start.y,\n      };\n      const endInset = {\n        x: this.end.x - capOffset + 1,\n        y: this.end.y,\n      };\n\n      this.path = `M ${startInset.x},${startInset.y}\n          C ${startInset.x + controlOffset},${startInset.y}\n            ${endInset.x - controlOffset},${endInset.y}\n            ${endInset.x},${endInset.y}`;\n    } else {\n      // Calculate start and end points for the path\n      const startInset = {\n        x: this.start.x - capOffset + 1,\n        y: this.start.y,\n      };\n      const endInset = {\n        x: this.end.x + capOffset - 1,\n        y: this.end.y,\n      };\n\n      this.path = `M ${startInset.x},${startInset.y}\n          C ${startInset.x - controlOffset},${startInset.y}\n            ${endInset.x + controlOffset},${endInset.y}\n            ${endInset.x},${endInset.y}`;\n    }\n  }\n\n  render() {\n    return (\n      <Host class=\"logic-flow-connection\">\n        <svg class=\"connection\">\n          <path class=\"connection-line\" d={this.path}></path>\n          {/* Start cap */}\n          <circle\n            cx={this.start.x}\n            cy={this.start.y}\n            r=\"1.5px\"\n            class=\"connection-cap start-cap\"\n          />\n          {/* End cap */}\n          <circle\n            cx={this.end.x}\n            cy={this.end.y}\n            r=\"1.5px\"\n            class=\"connection-cap end-cap\"\n          />\n        </svg>\n      </Host>\n    );\n  }\n}\n"],"mappings":"kDAAA,MAAMA,EAAyB,uBAC/B,MAAAC,EAAeD,E,MCOFE,EAAmB,M,yBAMtBC,KAAAC,WAAa,E,WALG,CAAEC,EAAG,EAAGC,EAAG,G,SACb,CAAED,EAAG,EAAGC,EAAG,G,UACE,O,CAKnC,iBAAAC,GAGE,MAAMC,EAAYC,SAASC,cAAc,cACzC,GAAIF,EAAW,CAEb,MAAMG,EAAQC,iBAAiBJ,GAC/BL,KAAKC,WAAaS,SAASF,EAAMG,OAAS,C,EAO9C,UAAAC,GACE,MAAMC,EAAQ,CACZX,EAAGF,KAAKc,IAAIZ,EAAIF,KAAKe,MAAMb,EAC3BC,EAAGH,KAAKc,IAAIX,EAAIH,KAAKe,MAAMZ,GAE7B,MAAMa,EAAWC,KAAKC,KAAKL,EAAMX,GAAK,EAAIW,EAAMV,GAAK,GACrD,MAAMgB,EAAgBF,KAAKG,IAAI,IAAKJ,EAAW,KAC/C,MAAMK,EAAYrB,KAAKC,WAGvB,GAAID,KAAKsB,OAAS,SAAU,CAE1B,MAAMC,EAAa,CACjBrB,EAAGF,KAAKe,MAAMb,EAAImB,EAAY,EAC9BlB,EAAGH,KAAKe,MAAMZ,GAEhB,MAAMqB,EAAW,CACftB,EAAGF,KAAKc,IAAIZ,EAAImB,EAAY,EAC5BlB,EAAGH,KAAKc,IAAIX,GAGdH,KAAKyB,KAAO,KAAKF,EAAWrB,KAAKqB,EAAWpB,kBACpCoB,EAAWrB,EAAIiB,KAAiBI,EAAWpB,kBAC3CqB,EAAStB,EAAIiB,KAAiBK,EAASrB,kBACvCqB,EAAStB,KAAKsB,EAASrB,G,KAC1B,CAEL,MAAMoB,EAAa,CACjBrB,EAAGF,KAAKe,MAAMb,EAAImB,EAAY,EAC9BlB,EAAGH,KAAKe,MAAMZ,GAEhB,MAAMqB,EAAW,CACftB,EAAGF,KAAKc,IAAIZ,EAAImB,EAAY,EAC5BlB,EAAGH,KAAKc,IAAIX,GAGdH,KAAKyB,KAAO,KAAKF,EAAWrB,KAAKqB,EAAWpB,kBACpCoB,EAAWrB,EAAIiB,KAAiBI,EAAWpB,kBAC3CqB,EAAStB,EAAIiB,KAAiBK,EAASrB,kBACvCqB,EAAStB,KAAKsB,EAASrB,G,EAInC,MAAAuB,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,2CAACC,MAAM,yBACVH,EAAA,OAAAE,IAAA,2CAAKC,MAAM,cACTH,EAAA,QAAAE,IAAA,2CAAMC,MAAM,kBAAkBC,EAAG/B,KAAKyB,OAEtCE,EAAA,UAAAE,IAAA,2CACEG,GAAIhC,KAAKe,MAAMb,EACf+B,GAAIjC,KAAKe,MAAMZ,EACf+B,EAAE,QACFJ,MAAM,6BAGRH,EAAA,UAAAE,IAAA,2CACEG,GAAIhC,KAAKc,IAAIZ,EACb+B,GAAIjC,KAAKc,IAAIX,EACb+B,EAAE,QACFJ,MAAM,4B","ignoreList":[]}