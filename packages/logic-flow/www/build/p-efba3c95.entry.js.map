{"version":3,"names":["logicFlowConnectorCss","LogicFlowConnectorStyle0","LogicFlowConnector","getNode","this","el","closest","render","sideClass","type","typeClass","h","Host","key","class","connections","length","logicFlowNodeCss","LogicFlowNodeStyle0","LogicFlowNode","style","connectors","Set","x","y","componentWillLoad","position","startX","startY","onPositionChange","observer","MutationObserver","mutations","mutation","addedNodes","forEach","node","nodeName","connector","add","removedNodes","delete","newValue","JSON","parse","updateTransform","getInputConnectors","querySelectorAll","getOutputConnectors","getConnectors","Array","from","filter","getConnectedNodes","connection","size","otherConnector","find","c","notifyConnectedConnectors","data","onUpdateFromConnectedNode","transform","componentWillRender","isVisible","display","tabIndex","debounce","fn","delay","timeout","args","clearTimeout","setTimeout","throttle","lastFunc","lastRan","Date","now","getEventLocation","e","MouseEvent","clientX","clientY","TouchEvent","touches","changedTouches","urlAlphabet","nanoid","id","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet","Quadtree","constructor","boundary","capacity","camera","objects","divided","northeast","northwest","southeast","southwest","subdivide","left","top","width","height","halfWidth","halfHeight","expandBoundaryToInclude","object","expandBoundaryToPoint","expandBoundaryToRect","point","newLeft","Math","min","newTop","newRight","max","newBottom","rect","rectLeft","rectTop","rectWidth","rectHeight","insert","contains","push","console","log","remove","removeFromNode","originalLength","obj","containsPoint","containsRect","inRange","range","pan","zoom","pointInRange","rectInRange","adjX","adjY","adjLeft","adjTop","adjRight","adjBottom","query","found","intersects","i","checkNearby","coords","bounds","nearby","pos","Camera","uid","toScreenCoords","worldCoords","toWorldCoords","screenCoords","ViewContext","viewport","nodes","Map","connectorSnapDistance","connectorRects","connectionRects","nodeRects","visibleElements","prevVisibleElements","needsRedraw","initialPinchDistance","isPanning","snapToGrid","dragStart","activeNodeDragging","activeNodeDragStart","activeConnectorStartPos","viewportOffset","bringingToFront","debouncedUpdateVisibleElements","updateVisibleElements","viewportId","instances","has","get","set","viewportRect","getBoundingClientRect","boundry","connectorQuadtree","viewportQuadtree","initializeViewport","m","viewportMutation","observe","childList","subtree","destroy","disconnect","updateViewportRect","viewportEl","addNode","setAttribute","n","requestIdleCallback","_a","_b","updateViewportQuadtree","removeNode","cid","removeConnection","removeConnector","addConnector","requestAnimationFrame","connectorEl","querySelector","qrect","addConnection","connIndex","indexOf","splice","connectingConnector","HTMLElement","tagName","logicNode","logicConnector","logicConnection","getAttribute","instance","contentEl","children","traverse","bringToFront","parentElement","appendChild","setCursor","cursor","document","body","resetCursor","getRectCenter","startPanning","panCamera","loc","resetPointerStates","startNodeDrag","target","activeNode","updateNodeConnectorPos","aNode","delta","Object","assign","updateNodeConnectorConnectionsPos","end","start","calcSnapToGrid","gridSize","round","calcNodePos","moveNode","oldPos","newPos","clientWidth","clientHeight","endNodeDrag","updateNodeConnectorsQuadtree","concat","path","createNewConnection","startPos","createElement","activeConnection","moveActiveConnection","snappingDist","aConn","snappableConnector","getTargetConnector","targetConnector","snappedConnector","startNewConnection","connEl","activeConnector","parentConn","center","processConnection","tConn","tNode","isValidConnection","onConnection","then","result","updateConnectionEndpoints","finalizeConnection","targetConn","active","targRect","clear","startDisconnectConnection","snapConnector","disconnectConnector","swapConnectionEndpoints","onDisconnection","r","entity","visibleEntities","newVisibleElements","map","allItems","getElementById","entityComponent","curstate","prevState","includes","newstate","renderCanvasGrid","canvas","color","bgColor","ctx","getContext","step","strokeStyle","lineWidth","fillStyle","fillRect","offsetX","offsetY","beginPath","moveTo","lineTo","stroke","renderCanvasDotGrid","logicFlowViewportCss","LogicFlowViewportStyle0","LogicFlowViewport","debouncedResize","onResize","debouncedUpdateScreen","updateScreen","debouncedUpdateViewportRect","throttledTouchMove","handleTouchMove","forceContentReflowDebounced","forceContentReflow","elMouseDown","onPointerDown","elMouseUp","onPointerUp","elMouseMove","onPointerMove","elTouchStart","handleTouchStart","elTouchMove","elTouchEnd","elWheel","handleWheel","elScroll","elKeyPress","onKeyPress","default","panning","moving","componentDidLoad","gridEl","connectorSnappingDistance","window","addEventListener","passive","resizeObserver","ResizeObserver","renderGrid","disconnectedCallback","canvasEl","removeEventListener","screenToWorldCoords","onSnapToGridChange","onGridTypeChange","scheduleComponentUpdate","showGrid","gridType","gridLineColor","gridBgColor","event","activeElement","elementFromPoint","cursors","onEndActiveConnection","preventDefault","canvasRect","mouseX","mouseY","zoomDelta","deltaY","zoomSpeed","newZoom","maxZoom","minZoom","scaleFactor","newPanX","newPanY","handlePinch","touch1","touch2","distance","sqrt","pinchCenterX","pinchCenterY","adjustZoomOnPinch","pinchContentX","pinchContentY","cdisplay"],"sources":["src/components/logic-flow-connector/logic-flow-connector.css?tag=logic-flow-connector","src/components/logic-flow-connector/logic-flow-connector.tsx","src/components/logic-flow-node/logic-flow-node.css?tag=logic-flow-node","src/components/logic-flow-node/logic-flow-node.tsx","src/utils/debounce.ts","src/utils/throttle.ts","src/utils/getEventLocation.ts","../../node_modules/nanoid/url-alphabet/index.js","../../node_modules/nanoid/index.browser.js","src/types/Quadtree.ts","src/types/Camera.ts","src/types/ViewContext.ts","src/utils/renderCanvasGrid.ts","src/components/logic-flow-viewport/logic-flow-viewport.css?tag=logic-flow-viewport","src/components/logic-flow-viewport/logic-flow-viewport.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element, Method } from '@stencil/core';\nimport { LogicFlowConnection } from '../logic-flow-connection/logic-flow-connection';\n\n@Component({\n  tag: 'logic-flow-connector',\n  styleUrl: 'logic-flow-connector.css',\n  shadow: false,\n})\nexport class LogicFlowConnector {\n  @Element() el: HTMLElement;\n\n  @Prop() type: 'input' | 'output' = 'input';\n  @Prop() connectingConnector: LogicFlowConnector | null = null;\n  @Prop() connections: LogicFlowConnection[] = [];\n  @Prop() onConnection: (\n    sourceConnector: HTMLLogicFlowConnectorElement,\n    // targetConnector: HTMLLogicFlowConnectorElement,\n  ) => Promise<boolean>;\n  @Prop() onDisconnection: (\n    sourceConnector: HTMLLogicFlowConnectorElement,\n    // targetConnector: HTMLLogicFlowConnectorElement,\n  ) => Promise<boolean>;\n  @Prop() onUpdateFromConnectedNode: (\n    connector: HTMLLogicFlowConnectorElement,\n    node: HTMLLogicFlowNodeElement,\n    data: any,\n  ) => Promise<void>;\n\n  @Method()\n  async getNode() {\n    return this.el.closest('logic-flow-node');\n  }\n\n  render() {\n    const sideClass =\n      this.type === 'input' ? 'left-connector' : 'right-connector';\n    const typeClass =\n      this.type === 'input' ? 'input-connector' : 'output-connector';\n\n    return (\n      <Host class={`logic-flow-connector ${typeClass}`}>\n        <div\n          class={`connector ${sideClass} ${\n            (this.connections.length > 0 && 'connected') || ''\n          }`}\n        ></div>\n        <div class={`connector-content ${sideClass}`}>\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import {\n  Component,\n  Host,\n  Prop,\n  h,\n  Element,\n  State,\n  Watch,\n  Method,\n  EventEmitter,\n  Event,\n} from '@stencil/core';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-node',\n  styleUrl: 'logic-flow-node.css',\n  shadow: false,\n})\nexport class LogicFlowNode {\n  @Element() el: HTMLLogicFlowNodeElement;\n\n  @Prop() type: string = 'default';\n  // @Prop() name: string = 'Node';\n  @Prop() startX: number = 0;\n  @Prop() startY: number = 0;\n  @Prop({ mutable: true }) position: Coords = { x: 0, y: 0 };\n  @Prop({ mutable: true }) isVisible: boolean = true;\n\n  @State() isDragging = false;\n\n  @Event() notifyConnectors: EventEmitter;\n\n  style = {};\n  observer: MutationObserver;\n  connectors: Set<HTMLLogicFlowConnectorElement> = new Set();\n\n  componentWillLoad() {\n    //  set initial size\n    this.position.x = this.startX;\n    this.position.y = this.startY;\n\n    this.onPositionChange(this.position);\n\n    // set up observer - watch for adding or removing connectors\n    this.observer = new MutationObserver((mutations: MutationRecord[]) => {\n      for (const mutation of mutations) {\n        if (mutation.type === 'childList') {\n          mutation.addedNodes.forEach((node: Node) => {\n            if (node.nodeName === 'LOGIC-FLOW-CONNECTOR') {\n              const connector = node as HTMLLogicFlowConnectorElement;\n              this.connectors.add(connector);\n            }\n          });\n\n          mutation.removedNodes.forEach((node: Node) => {\n            if (node.nodeName === 'LOGIC-FLOW-CONNECTOR') {\n              const connector = node as HTMLLogicFlowConnectorElement;\n              this.connectors.delete(connector);\n            }\n          });\n        }\n      }\n    });\n  }\n\n  @Watch('position')\n  onPositionChange(newValue: Coords | string) {\n    if (typeof newValue === 'string') {\n      this.position = JSON.parse(newValue);\n    }\n    // update transform\n    this.updateTransform();\n  }\n\n  @Method()\n  async getInputConnectors() {\n    return this.el.querySelectorAll('logic-flow-connector[type=\"input\"]');\n  }\n\n  @Method()\n  async getOutputConnectors() {\n    return this.el.querySelectorAll('logic-flow-connector[type=\"output\"]');\n  }\n\n  @Method()\n  async getConnectors(type: 'input' | 'output' | 'both' = 'both') {\n    let connectors = this.connectors;\n    if (type === 'input') {\n      connectors = new Set(\n        Array.from(connectors).filter(connector => connector.type === 'input'),\n      );\n    } else if (type === 'output') {\n      connectors = new Set(\n        Array.from(connectors).filter(connector => connector.type === 'output'),\n      );\n    }\n\n    return connectors;\n  }\n\n  @Method()\n  async getConnectedNodes(type: 'input' | 'output' | 'both' = 'both') {\n    const nodes = [];\n    const connectors = await this.getConnectors(type);\n\n    for (const connector of connectors) {\n      const connections = connector.connections;\n      for (const connection of connections) {\n        // if connectors length is greater than 1, then we have a connection\n        if (connection.connectors.size > 1) {\n          // get the other connector\n          const otherConnector = Array.from(connection.connectors).find(\n            c => c !== connector,\n          );\n          // get the node\n          const node = await otherConnector.getNode();\n          nodes.push(node);\n        }\n      }\n    }\n  }\n\n  @Method()\n  async notifyConnectedConnectors(\n    type: 'input' | 'output' | 'both' = 'both',\n    data: any,\n  ) {\n    const connectors = await this.getConnectors(type);\n    for (const connector of connectors) {\n      const connections = connector.connections;\n      for (const connection of connections) {\n        // if connectors length is greater than 1, then we have a connection\n        if (connection.connectors.size > 1) {\n          // get the other connector\n          const otherConnector = Array.from(connection.connectors).find(\n            c => c !== connector,\n          );\n\n          if (otherConnector.onUpdateFromConnectedNode) {\n            otherConnector.onUpdateFromConnectedNode(\n              otherConnector,\n              this.el,\n              data,\n            );\n          }\n        }\n      }\n    }\n  }\n\n  updateTransform() {\n    this.el.style.transform = `translate(${this.position.x}px, ${this.position.y}px )`;\n  }\n\n  componentWillRender() {\n    if (!this.isVisible) {\n      this.style = { display: 'none' };\n    } else {\n      this.style = {};\n    }\n  }\n\n  render() {\n    return (\n      <Host class=\"logic-flow-node\" style={this.style} tabIndex=\"0\">\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n","export const debounce = (fn: (...args: any[]) => void, delay: number) => {\n  let timeout: ReturnType<typeof setTimeout>;\n  return (...args: any[]) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n};\n","export const throttle = (fn: (...args: any[]) => void, delay: number) => {\n  let lastFunc: ReturnType<typeof setTimeout>;\n  let lastRan: number;\n  return (...args: any[]) => {\n    if (!lastRan) {\n      fn(...args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc);\n      lastFunc = setTimeout(() => {\n        if (Date.now() - lastRan >= delay) {\n          fn(...args);\n          lastRan = Date.now();\n        }\n      }, delay - (Date.now() - lastRan));\n    }\n  };\n};\n","export const getEventLocation = (e: MouseEvent | TouchEvent) => {\n  if (e instanceof MouseEvent) {\n    return { x: e.clientX, y: e.clientY };\n  } else if (e instanceof TouchEvent && e.touches.length > 0) {\n    return { x: e.touches[0].clientX, y: e.touches[0].clientY };\n  } else if (e instanceof TouchEvent && e.changedTouches.length > 0) {\n    return { x: e.changedTouches[0].clientX, y: e.changedTouches[0].clientY };\n  }\n  return { x: 0, y: 0 };\n};\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { Coords } from './Coords';\nimport { Rect } from './Rect';\nimport { Camera } from './Camera';\n\n// SpatialObject can be either a Point or a Rect with an ID for tracking\ntype SpatialObject = Point | BBox;\n\ninterface Point extends Coords {\n  id: string; // Unique ID of the point (e.g., connector)\n}\n\ninterface BBox extends Rect {\n  id: string; // Unique ID of the rect (e.g., node)\n}\n\nexport class Quadtree {\n  boundary: Rect;\n  capacity: number;\n  objects: SpatialObject[];\n  divided: boolean;\n  northeast: Quadtree | null;\n  northwest: Quadtree | null;\n  southeast: Quadtree | null;\n  southwest: Quadtree | null;\n  camera: Camera;\n\n  constructor(boundary: Rect, capacity: number, camera: Camera) {\n    this.boundary = boundary;\n    this.capacity = capacity;\n    this.objects = [];\n    this.divided = false;\n    this.northeast = null;\n    this.northwest = null;\n    this.southeast = null;\n    this.southwest = null;\n    this.camera = camera;\n  }\n\n  subdivide() {\n    const { left, top, width, height } = this.boundary;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n\n    this.northeast = new Quadtree(\n      { left: left + halfWidth, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.northwest = new Quadtree(\n      { left, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.southeast = new Quadtree(\n      {\n        left: left + halfWidth,\n        top: top + halfHeight,\n        width: halfWidth,\n        height: halfHeight,\n      },\n      this.capacity,\n      this.camera,\n    );\n    this.southwest = new Quadtree(\n      { left, top: top + halfHeight, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n\n    this.divided = true;\n  }\n\n  expandBoundaryToInclude(object: SpatialObject) {\n    if ('x' in object && 'y' in object) {\n      this.expandBoundaryToPoint(object);\n    } else {\n      this.expandBoundaryToRect(object);\n    }\n  }\n\n  expandBoundaryToPoint(point: Point) {\n    const { left, top, width, height } = this.boundary;\n    const { x, y } = point;\n\n    const newLeft = Math.min(left, x);\n    const newTop = Math.min(top, y);\n    const newRight = Math.max(left + width, x);\n    const newBottom = Math.max(top + height, y);\n\n    this.boundary = {\n      left: newLeft,\n      top: newTop,\n      width: newRight - newLeft,\n      height: newBottom - newTop,\n    };\n  }\n\n  expandBoundaryToRect(rect: Rect) {\n    const { left, top, width, height } = this.boundary;\n    const {\n      left: rectLeft,\n      top: rectTop,\n      width: rectWidth,\n      height: rectHeight,\n    } = rect;\n\n    const newLeft = Math.min(left, rectLeft);\n    const newTop = Math.min(top, rectTop);\n    const newRight = Math.max(left + width, rectLeft + rectWidth);\n    const newBottom = Math.max(top + height, rectTop + rectHeight);\n\n    this.boundary = {\n      left: newLeft,\n      top: newTop,\n      width: newRight - newLeft,\n      height: newBottom - newTop,\n    };\n  }\n\n  insert(object: SpatialObject): boolean {\n    // if (!this.contains(object)) return false;\n\n    if (!this.contains(object)) {\n      this.expandBoundaryToInclude(object);\n    }\n\n    if (this.objects.length < this.capacity) {\n      this.objects.push(object);\n      return true;\n    } else {\n      if (!this.divided) {\n        this.subdivide();\n      }\n\n      if (this.northeast!.insert(object)) return true;\n      if (this.northwest!.insert(object)) return true;\n      if (this.southeast!.insert(object)) return true;\n      if (this.southwest!.insert(object)) return true;\n\n      console.log('Object could not be inserted into any child node');\n\n      // If none of the children can contain the object, keep it in the current node\n      this.objects.push(object);\n      return true;\n    }\n  }\n\n  remove(id: string): boolean {\n    const removeFromNode = (node: Quadtree | null): boolean => {\n      if (!node) return false;\n\n      const originalLength = node.objects.length;\n      node.objects = node.objects.filter(obj => (obj as any).id !== id);\n\n      if (originalLength !== node.objects.length) return true;\n\n      if (node.divided) {\n        return (\n          removeFromNode(node.northwest) ||\n          removeFromNode(node.northeast) ||\n          removeFromNode(node.southwest) ||\n          removeFromNode(node.southeast)\n        );\n      }\n\n      return false;\n    };\n\n    return removeFromNode(this);\n  }\n\n  contains(object: SpatialObject): boolean {\n    if ('x' in object && 'y' in object) {\n      return this.containsPoint(object);\n    } else {\n      return this.containsRect(object);\n    }\n  }\n\n  containsPoint(point: Point): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      point.x >= left &&\n      point.x < left + width &&\n      point.y >= top &&\n      point.y < top + height\n    );\n\n    // boundary adjusted to world space\n    // const adjBounds = {\n    //   left: this.boundary.left + this.camera.pos.x,\n    //   top: this.boundary.top + this.camera.pos.y,\n    //   width: this.boundary.width,\n    //   height: this.boundary.height,\n    // };\n\n    // return (\n    //   point.x >= adjBounds.left &&\n    //   point.x < adjBounds.left + adjBounds.width &&\n    //   point.y >= adjBounds.top &&\n    //   point.y < adjBounds.top + adjBounds.height\n    // );\n  }\n\n  containsRect(rect: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      rect.left >= left &&\n      rect.left + rect.width <= left + width &&\n      rect.top >= top &&\n      rect.top + rect.height <= top + height\n    );\n  }\n\n  inRange(\n    object: SpatialObject,\n    range: Rect,\n    pan: Coords,\n    zoom: number,\n  ): boolean {\n    if ('x' in object && 'y' in object) {\n      // It's a point\n      return this.pointInRange(object, range, pan, zoom);\n    } else {\n      // It's a rect\n      return this.rectInRange(object, range, pan, zoom);\n    }\n  }\n\n  pointInRange(point: Point, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust point position relative to pan and zoom\n    const adjX = (point.x + pan.x) * zoom;\n    const adjY = (point.y + pan.y) * zoom;\n\n    // const screenX = adjX / zoom - pan.x;\n    // const screenY = adjY / zoom - pan.y;\n\n    // // show debug\n    // const debugDiv = document.getElementById('debug');\n    // debugDiv.style.left = `${screenX}px`;\n    // debugDiv.style.top = `${screenY}px`;\n    // debugDiv.style.width = '10px';\n    // debugDiv.style.height = '10px';\n\n    // // // show debug range\n    // const screenRange = {\n    //   left: range.left / zoom - pan.x,\n    //   top: range.top / zoom - pan.y,\n    //   width: range.width / zoom,\n    //   height: range.height / zoom,\n    // };\n\n    // const debugDiv2 = document.getElementById('debug2');\n    // debugDiv2.style.left = `${screenRange.left}px`;\n    // debugDiv2.style.top = `${screenRange.top}px`;\n    // debugDiv2.style.width = `${screenRange.width}px`;\n    // debugDiv2.style.height = `${screenRange.height}px`;\n\n    return (\n      adjX >= range.left &&\n      adjX < range.left + range.width &&\n      adjY >= range.top &&\n      adjY < range.top + range.height\n    );\n  }\n\n  rectInRange(rect: Rect, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust rect position relative to pan and zoom\n    const adjLeft = (rect.left + pan.x) * zoom;\n    const adjTop = (rect.top + pan.y) * zoom;\n\n    const adjRight = adjLeft + rect.width * zoom;\n    const adjBottom = adjTop + rect.height * zoom;\n\n    // const screenW = (adjRight - adjLeft) / this.camera.zoom;\n    // const screenH = (adjBottom - adjTop) / this.camera.zoom;\n    // const screenX = adjLeft / this.camera.zoom - pan.x;\n    // const screenY = adjTop / this.camera.zoom - pan.y;\n\n    // const debugDiv2 = document.getElementById('debug2');\n    // debugDiv2.style.width = `${screenW}px`;\n    // debugDiv2.style.height = `${screenH}px`;\n    // debugDiv2.style.left = `${screenX}px`;\n    // debugDiv2.style.top = `${screenY}px`;\n\n    // const screenRange = {\n    //   left: range.left / zoom - pan.x,\n    //   top: range.top / zoom - pan.y,\n    //   width: range.width / zoom,\n    //   height: range.height / zoom,\n    // };\n\n    // const debugDiv = document.getElementById('debug2');\n    // debugDiv.style.width = `${screenRange.width}px`;\n    // debugDiv.style.height = `${screenRange.height}px`;\n    // debugDiv.style.left = `${screenRange.left}px`;\n    // debugDiv.style.top = `${screenRange.top}px`;\n\n    return !(\n      adjRight < range.left ||\n      adjLeft > range.left + range.width ||\n      adjBottom < range.top ||\n      adjTop > range.top + range.height\n    );\n  }\n\n  query(\n    range: Rect,\n    found: SpatialObject[] = [],\n    pan: Coords,\n    zoom: number,\n  ): SpatialObject[] {\n    if (!this.intersects(range)) return found;\n\n    for (let i = 0; i < this.objects.length; i++) {\n      if (this.inRange(this.objects[i], range, pan, zoom)) {\n        found.push(this.objects[i]);\n      }\n    }\n\n    if (this.divided) {\n      this.northwest!.query(range, found, pan, zoom);\n      this.northeast!.query(range, found, pan, zoom);\n      this.southwest!.query(range, found, pan, zoom);\n      this.southeast!.query(range, found, pan, zoom);\n    }\n\n    return found;\n  }\n\n  intersects(range: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return !(\n      range.left > left + width ||\n      range.left + range.width < left ||\n      range.top > top + height ||\n      range.top + range.height < top\n    );\n  }\n\n  checkNearby(coords: Coords, range: number): SpatialObject | null {\n    const bounds = {\n      left: coords.x - range / 2,\n      top: coords.y - range / 2,\n      width: range,\n      height: range,\n    };\n\n    const nearby = this.query(bounds, [], this.camera.pos, this.camera.zoom);\n    return nearby.length > 0 ? nearby[0] : null;\n  }\n}\n","import { nanoid } from 'nanoid';\nimport { Coords } from './Coords';\n\nexport class Camera {\n  uid: string;\n  pos: Coords;\n  zoom: number;\n\n  constructor() {\n    this.uid = nanoid();\n    this.pos = { x: 0, y: 0 };\n    this.zoom = 1;\n  }\n\n  toScreenCoords(worldCoords: Coords): Coords {\n    return {\n      x: (worldCoords.x - this.pos.x) * this.zoom,\n      y: (worldCoords.y - this.pos.y) * this.zoom,\n    };\n  }\n\n  toWorldCoords(screenCoords: Coords): Coords {\n    return {\n      x: screenCoords.x / this.zoom - this.pos.x,\n      y: screenCoords.y / this.zoom - this.pos.y,\n    };\n  }\n}\n","import { nanoid } from 'nanoid';\nimport { Rect } from './Rect';\nimport { Quadtree } from './Quadtree';\nimport { Camera } from './Camera';\nimport { Coords } from './Coords';\nimport { throttle } from '../utils/throttle';\nimport { Offset } from './Offset';\n\nexport class ViewContext {\n  static instances = new Map<string, ViewContext>();\n\n  uid: string;\n  nodes = new Map<string, HTMLLogicFlowNodeElement>();\n  connectors = new Map<string, HTMLLogicFlowConnectorElement>();\n  connectorSnapDistance = 10;\n  connections = new Map<string, HTMLLogicFlowConnectionElement>();\n  connectorRects = <Record<string, Rect>>{};\n  connectionRects = <Record<string, Rect>>{};\n  connectorQuadtree: Quadtree;\n  viewportQuadtree: Quadtree;\n  nodeRects = <Record<string, Rect>>{};\n  camera = new Camera();\n  observer: MutationObserver;\n  visibleElements: string[] = [];\n  prevVisibleElements: string[] = [];\n\n  // viewport variables\n  viewportEl: HTMLDivElement;\n  contentEl: HTMLDivElement;\n  gridEl: HTMLCanvasElement;\n  needsRedraw = true;\n  viewportRect: Rect;\n  initialPinchDistance = 0;\n  isPanning = false;\n  snapToGrid = false;\n  dragStart: Coords = { x: 0, y: 0 };\n  activeNode: HTMLLogicFlowNodeElement;\n  activeNodeDragging = false;\n  activeNodeDragStart: Coords = { x: 0, y: 0 };\n  activeConnector: HTMLLogicFlowConnectorElement;\n  activeConnectorStartPos: Coords = { x: 0, y: 0 };\n  activeConnection: HTMLLogicFlowConnectionElement;\n  viewportOffset: Offset = { top: 0, left: 0 };\n  bringingToFront = false;\n\n  debouncedUpdateVisibleElements = throttle(\n    () => this.updateVisibleElements(),\n    20,\n  );\n\n  constructor(viewport: HTMLLogicFlowViewportElement) {\n    const id = viewport.id || nanoid();\n    viewport.id = id;\n    const viewportId = id;\n    if (ViewContext.instances.has(viewportId)) {\n      return ViewContext.instances.get(viewportId);\n    }\n    this.uid = viewportId;\n    ViewContext.instances.set(this.uid, this);\n\n    if (!this.viewportRect) {\n      const rect = viewport.getBoundingClientRect();\n      this.viewportOffset = {\n        top: rect.top,\n        left: rect.left,\n      };\n      this.viewportRect = {\n        left: rect.left - rect.left,\n        top: rect.top - rect.top,\n        width: rect.width - rect.left,\n        height: rect.height - rect.top,\n      };\n      // this.updateViewportRect();\n    }\n\n    const boundry = {\n      left: this.viewportRect.left,\n      top: this.viewportRect.top,\n      width: this.viewportRect.width,\n      height: this.viewportRect.height,\n    };\n\n    this.connectorQuadtree = new Quadtree(boundry, 4, this.camera);\n    this.viewportQuadtree = new Quadtree(boundry, 4, this.camera);\n\n    ViewContext.initializeViewport(viewport);\n\n    this.observer = new MutationObserver((m: MutationRecord[]) =>\n      this.viewportMutation(m),\n    );\n    this.observer.observe(viewport, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  destroy() {\n    this.observer.disconnect();\n\n    ViewContext.instances.delete(this.uid);\n  }\n\n  updateViewportRect() {\n    const rect = this.viewportEl.getBoundingClientRect();\n    this.viewportOffset = {\n      top: rect.top,\n      left: rect.left,\n    };\n    this.viewportRect = {\n      left: rect.left - rect.left,\n      top: rect.top - rect.top,\n      width: rect.width - rect.left,\n      height: rect.height - rect.top,\n    };\n  }\n\n  addNode(node: HTMLLogicFlowNodeElement) {\n    const id = nanoid();\n    node.id = id;\n    this.nodes.set(id, node);\n\n    // set data attribute for the context id\n    node.setAttribute('data-viewport', this.uid);\n\n    const n = node;\n\n    // wait for next frame to update connectors rects until the connectors have registered\n    requestIdleCallback(\n      () => {\n        // update rect\n        const rect = n.getBoundingClientRect();\n\n        this.nodeRects[id] = {\n          left: n?.position?.x || n.startX || rect.x,\n          top: n?.position?.y || n.startY || rect.y,\n          width: rect.width,\n          height: rect.height,\n        };\n\n        // add to quadtree\n        this.updateViewportQuadtree(n);\n\n        // this.updateNodeConnectorsQuadtree(node);\n      },\n      { timeout: 100 },\n    );\n\n    return id;\n  }\n\n  removeNode(id: string) {\n    console.log('remove node', id);\n    // remove all connections and connectors associated with the node\n    // get connectors\n    const node = this.nodes.get(id);\n    if (node) {\n      const connectors = node.querySelectorAll('logic-flow-connector');\n      connectors.forEach((connector: HTMLLogicFlowConnectorElement) => {\n        const cid = connector.id;\n        // remove connections\n        connector.connections.forEach(\n          (connection: HTMLLogicFlowConnectionElement) => {\n            const id = connection.id;\n            if (id) this.removeConnection(id);\n          },\n        );\n        // remove connector\n        this.removeConnector(cid);\n      });\n\n      // remove from quadtree\n      this.viewportQuadtree.remove(id);\n      delete this.nodeRects[id];\n      // node.setAttribute('data-viewport', '');\n\n      // remove from nodes\n      this.nodes.delete(id);\n    }\n  }\n\n  addConnector(connector: HTMLLogicFlowConnectorElement) {\n    const id = nanoid();\n    connector.id = id;\n    this.connectors.set(id, connector);\n    requestAnimationFrame(() => {\n      const connectorEl = connector.querySelector('.connector');\n      const rect = connectorEl.getBoundingClientRect();\n      this.connectorRects[id] = {\n        left:\n          (rect.x - this.viewportOffset.left) / this.camera.zoom -\n          this.camera.pos.x,\n        top:\n          (rect.y - this.viewportOffset.top) / this.camera.zoom -\n          this.camera.pos.y,\n        width: rect.width / this.camera.zoom,\n        height: rect.height / this.camera.zoom,\n      };\n\n      // add to quadtree\n      const qrect = this.connectorRects[id];\n      this.connectorQuadtree.insert({\n        id,\n        x: qrect.left + qrect.width / 2,\n        y: qrect.top + qrect.height / 2,\n      });\n    });\n\n    return id;\n  }\n\n  removeConnector(id: string) {\n    const connector = this.connectors.get(id);\n    if (!connector) return;\n\n    // remove connections\n    connector.connections.forEach(\n      (connection: HTMLLogicFlowConnectionElement) => {\n        const id = connection.id;\n        if (id) this.removeConnection(id);\n      },\n    );\n\n    this.connectors.delete(id);\n    this.connectorQuadtree.remove(id);\n    delete this.connectorRects[id];\n  }\n\n  addConnection(connection: HTMLLogicFlowConnectionElement) {\n    const id = nanoid();\n    connection.id = id;\n    this.connections.set(id, connection);\n    // set data attribute for the context id\n    connection.setAttribute('data-viewport', this.uid);\n\n    return id;\n  }\n\n  removeConnection(id: string) {\n    const connection = this.connections.get(id);\n    if (!connection) return;\n\n    // handle connectors\n    const connectors = connection.connectors;\n    if (connectors.size > 0) {\n      for (const connector of connectors) {\n        const connIndex = connector.connections.indexOf(connection);\n        if (connIndex > -1) {\n          connector.connections.splice(connIndex, 1);\n        }\n        connector.connectingConnector = null;\n        // update quadtree\n      }\n    }\n\n    delete this.connectionRects[id];\n    this.viewportQuadtree.remove(id);\n    this.connections.delete(id);\n    connection.remove();\n  }\n\n  // mutation observer callback\n  // when elements are added or removed from the dom\n  // we need to register or unregister them if they are nodes, connectors or connections\n  viewportMutation(mutations: MutationRecord[]) {\n    if (!mutations.length) return;\n    // happens whenu using bringNodeToFront\n    // - stop the observer from firing\n    // if (!this.registerNode) return;\n    if (this.bringingToFront) {\n      this.bringingToFront = false;\n      return;\n    }\n\n    mutations.forEach(mutation => {\n      if (mutation.type === 'childList') {\n        for (let i = 0; i < mutation.addedNodes.length; i++) {\n          const node = mutation.addedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-FLOW-NODE') {\n              const logicNode = node as HTMLLogicFlowNodeElement;\n              this.addNode(logicNode);\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTOR') {\n              const logicConnector = node as HTMLLogicFlowConnectorElement;\n              this.addConnector(logicConnector);\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTION') {\n              const logicConnection = node as HTMLLogicFlowConnectionElement;\n              this.addConnection(logicConnection);\n            }\n          }\n        }\n\n        for (let i = 0; i < mutation.removedNodes.length; i++) {\n          const node = mutation.removedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-FLOW-NODE') {\n              const logicNode = node as HTMLLogicFlowNodeElement;\n              this.removeNode(logicNode.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTOR') {\n              const logicConnector = node as HTMLLogicFlowConnectorElement;\n              this.removeConnector(logicConnector.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTION') {\n              const logicConnection = node as HTMLLogicFlowConnectionElement;\n              this.removeConnection(logicConnection.getAttribute('id'));\n            }\n          }\n        }\n      }\n    });\n  }\n\n  static initializeViewport(viewport: HTMLLogicFlowViewportElement) {\n    // need to register all nodes, connectors and connections\n    // that are already in the dom\n\n    const id = viewport.id;\n    const instance = ViewContext.instances.get(id);\n\n    const contentEl = viewport.querySelector('.viewport-content');\n    const children = contentEl.children;\n\n    const traverse = (el: HTMLElement) => {\n      if (el.tagName === 'LOGIC-FLOW-NODE') {\n        const logicNode = el as HTMLLogicFlowNodeElement;\n        instance.addNode(logicNode);\n      } else if (el.tagName === 'LOGIC-FLOW-CONNECTOR') {\n        const logicConnector = el as HTMLLogicFlowConnectorElement;\n        instance.addConnector(logicConnector);\n      } else if (el.tagName === 'LOGIC-FLOW-CONNECTION') {\n        const logicConnection = el as HTMLLogicFlowConnectionElement;\n        instance.addConnection(logicConnection);\n      }\n\n      const children = el.children;\n      for (let i = 0; i < children.length; i++) {\n        traverse(children[i] as HTMLElement);\n      }\n    };\n\n    for (let i = 0; i < children.length; i++) {\n      traverse(children[i] as HTMLElement);\n    }\n  }\n\n  bringToFront(node: HTMLElement) {\n    this.bringingToFront = true;\n    node.parentElement?.appendChild(node);\n  }\n\n  static setCursor(cursor: string) {\n    document.body.style.cursor = cursor;\n  }\n\n  static resetCursor() {\n    document.body.style.cursor = 'default';\n  }\n\n  getRectCenter(rect: DOMRect | Rect) {\n    return {\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height / 2,\n    };\n  }\n\n  startPanning(worldCoords: Coords, cursor = 'grabbing') {\n    ViewContext.setCursor(cursor);\n    this.isPanning = true;\n    this.dragStart = worldCoords;\n  }\n\n  panCamera(loc: Coords) {\n    this.camera.pos = {\n      x: loc.x / this.camera.zoom - this.dragStart.x,\n      y: loc.y / this.camera.zoom - this.dragStart.y,\n    };\n\n    this.debouncedUpdateVisibleElements();\n  }\n\n  resetPointerStates() {\n    this.isPanning = false;\n    this.initialPinchDistance = 0;\n    ViewContext.resetCursor();\n  }\n\n  startNodeDrag(\n    target: HTMLLogicFlowNodeElement,\n    worldCoords: Coords,\n    cursor = 'grabbing',\n  ): boolean {\n    if (!target) return false;\n\n    const node = target.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n    if (!node) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeNode = node;\n    this.bringToFront(node);\n\n    const pos = this.activeNode.position;\n    this.activeNodeDragging = true;\n    this.activeNodeDragStart = {\n      x: worldCoords.x - pos.x,\n      y: worldCoords.y - pos.y,\n    };\n\n    return true;\n  }\n\n  updateNodeConnectorPos(aNode: HTMLLogicFlowNodeElement, delta: Coords) {\n    const connectors = aNode.querySelectorAll(\n      'logic-flow-connector',\n    ) as NodeListOf<HTMLLogicFlowConnectorElement>;\n\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      const rect = { ...this.connectorRects[connector.id] };\n      rect.left += delta.x;\n      rect.top += delta.y;\n      this.connectorRects[connector.id] = rect;\n\n      this.updateNodeConnectorConnectionsPos(connector, rect);\n    }\n  }\n\n  updateNodeConnectorConnectionsPos(\n    connector: HTMLLogicFlowConnectorElement,\n    rect: Rect,\n  ) {\n    if (connector.connections.length) {\n      const pos = this.getRectCenter(rect);\n\n      for (let i = 0; i < connector.connections.length; i++) {\n        const connection = connector.connections[i];\n        if (connector.type === 'input') {\n          connection.end = pos;\n        } else {\n          connection.start = pos;\n        }\n      }\n    }\n  }\n\n  calcSnapToGrid(pos: Coords, gridSize: number) {\n    return {\n      x: Math.round(pos.x / gridSize) * gridSize,\n      y: Math.round(pos.y / gridSize) * gridSize,\n    };\n  }\n\n  calcNodePos(worldCoords: Coords) {\n    const pos = {\n      x: worldCoords.x - this.activeNodeDragStart.x,\n      y: worldCoords.y - this.activeNodeDragStart.y,\n    };\n\n    if (!this.snapToGrid) return pos;\n\n    return this.calcSnapToGrid(pos, this.connectorSnapDistance);\n  }\n\n  moveNode(loc: Coords, gridSize: number) {\n    const aNode = this.activeNode;\n    const worldCoords = this.camera.toWorldCoords(loc);\n    const oldPos = aNode.position;\n\n    let newPos = this.calcNodePos(worldCoords);\n\n    // calc new position\n    if (this.snapToGrid) {\n      newPos = this.calcSnapToGrid(newPos, gridSize);\n    }\n\n    const delta = {\n      x: newPos.x - oldPos.x,\n      y: newPos.y - oldPos.y,\n    };\n\n    // update node rect\n    const rect = this.nodeRects[aNode.id];\n    rect.left = newPos.x;\n    rect.top = newPos.y;\n    rect.width = aNode.clientWidth || rect.width;\n    rect.height = aNode.clientHeight || rect.height;\n    this.nodeRects[aNode.id] = rect;\n\n    aNode.position = newPos;\n\n    // update node position and it's connections\n    this.updateNodeConnectorPos(aNode, delta); // ???\n  }\n\n  endNodeDrag() {\n    this.activeNodeDragging = false;\n    this.updateNodeConnectorsQuadtree(this.activeNode);\n\n    const connectors = this.activeNode.querySelectorAll('logic-flow-connector');\n\n    let connections = [];\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i] as HTMLLogicFlowConnectorElement;\n      connections = connections.concat(connector.connections);\n    }\n\n    for (let i = 0; i < connections.length; i++) {\n      const connection = connections[i] as HTMLLogicFlowConnectionElement;\n      const path = connection.querySelector('path');\n      const rect = path.getBoundingClientRect();\n      this.connectionRects[connection.id] = {\n        left:\n          (rect.x - this.viewportOffset.left) / this.camera.zoom -\n          this.camera.pos.x,\n        top:\n          (rect.y - this.viewportOffset.top) / this.camera.zoom -\n          this.camera.pos.y,\n        width: rect.width / this.camera.zoom,\n        height: rect.height / this.camera.zoom,\n      };\n      this.updateViewportQuadtree(connection);\n\n      // use debug div to show connection\n      // const debug = document.getElementById('debug');\n      // const debugRect = this.connectionRects[connection.id];\n      // if (debug) {\n      //   debug.style.left = `${debugRect.left}px`;\n      //   debug.style.top = `${debugRect.top}px`;\n      //   debug.style.width = `${debugRect.width}px`;\n      //   debug.style.height = `${debugRect.height}px`;\n      // }\n    }\n    this.updateViewportQuadtree(this.activeNode);\n\n    this.activeNode = null;\n  }\n\n  createNewConnection(startPos: Coords, type: 'input' | 'output') {\n    const connection = document.createElement(\n      'logic-flow-connection',\n    ) as HTMLLogicFlowConnectionElement;\n    connection.start = startPos;\n    connection.end = startPos;\n    connection.type = type;\n\n    this.activeConnection = connection;\n    this.contentEl.appendChild(connection);\n  }\n\n  moveActiveConnection(loc: Coords, snappingDist: number) {\n    const aConn = this.activeConnection;\n\n    const worldCoords = this.camera.toWorldCoords({\n      x: loc.x - this.viewportOffset.left,\n      y: loc.y - this.viewportOffset.top,\n    });\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappableConnector) {\n      const rect = this.connectorRects[snappableConnector.id];\n      aConn.end = this.getRectCenter(rect);\n    } else {\n      aConn.end = worldCoords;\n    }\n  }\n\n  getTargetConnector(target: HTMLElement, loc: Coords, snappingDist: number) {\n    let targetConnector = target.closest(\n      'logic-flow-connector .connector',\n    ) as HTMLLogicFlowConnectorElement;\n\n    const snappedConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappedConnector) {\n      targetConnector = this.connectors.get(snappedConnector.id);\n    }\n\n    return targetConnector;\n  }\n\n  startNewConnection(\n    target: HTMLLogicFlowConnectorElement,\n    cursor = 'grabbing',\n  ) {\n    if (!target) return false;\n\n    const connEl = target.closest(\n      'logic-flow-connector .connector',\n    ) as HTMLLogicFlowConnectorElement;\n    if (!connEl) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnector = connEl;\n\n    const parentConn = connEl.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n    const rect = this.connectorRects[parentConn.id];\n    const center = this.getRectCenter(rect);\n\n    this.createNewConnection(center, parentConn.type);\n\n    return true;\n  }\n\n  processConnection(target: HTMLLogicFlowConnectorElement) {\n    const aConn = this.activeConnector.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n    const tConn = target.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n\n    // find parent nodes\n    const aNode = aConn.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n    const tNode = tConn.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n\n    // validate connection\n    if (!this.isValidConnection(aConn, tConn, aNode, tNode, target)) {\n      this.activeConnection.remove();\n      // remove from rects\n      delete this.connectionRects[this.activeConnection.id];\n      return;\n    }\n\n    // if connector has a onConnection callback\n    // call it. If it returns false, cancel the connection\n    const connection = this.activeConnection;\n    if (target.onConnection) {\n      target.onConnection(aConn).then(result => {\n        if (result === false) {\n          // destroy connection\n          connection.remove();\n          // remove from rects\n          delete this.connectionRects[connection.id];\n        }\n      });\n    }\n\n    this.updateConnectionEndpoints(aConn, tConn);\n    this.finalizeConnection(aConn, tConn);\n\n    // update rect\n    const path = this.activeConnection.querySelector('path');\n    const rect = path.getBoundingClientRect();\n    this.connectionRects[this.activeConnection.id] = {\n      left:\n        (rect.x - this.viewportOffset.left) / this.camera.zoom -\n        this.camera.pos.x,\n      top:\n        (rect.y - this.viewportOffset.top) / this.camera.zoom -\n        this.camera.pos.y,\n      width: rect.width / this.camera.zoom,\n      height: rect.height / this.camera.zoom,\n    };\n\n    // use debug div to show connection\n    // const debug = document.getElementById('debug');\n    // const debugRect = this.connectionRects[this.activeConnection.id];\n    // if (debug) {\n    //   debug.style.left = `${debugRect.left}px`;\n    //   debug.style.top = `${debugRect.top}px`;\n    //   debug.style.width = `${debugRect.width}px`;\n    //   debug.style.height = `${debugRect.height}px`;\n    // }\n\n    // update quadtree\n    this.updateViewportQuadtree(this.activeConnection);\n  }\n\n  isValidConnection(\n    aConn: HTMLLogicFlowConnectorElement,\n    tConn: HTMLLogicFlowConnectorElement,\n    aNode: HTMLLogicFlowNodeElement,\n    tNode: HTMLLogicFlowNodeElement,\n    targetConn: HTMLLogicFlowConnectorElement,\n  ) {\n    // avoid connecting to self or already connected\n    if (\n      this.activeConnector.connectingConnector === tConn ||\n      tConn.connectingConnector === aConn\n    ) {\n      // perhaps send an error event\n      // console.log('already connected');\n      return false;\n    }\n\n    if (aNode === tNode || this.activeConnector === targetConn) {\n      // connecting to self\n      return false;\n    }\n\n    // ensure is between input/output not same type\n    if (aConn.type === tConn.type) {\n      // console.log('same type');\n      return false;\n    }\n\n    return true;\n  }\n\n  updateConnectionEndpoints(\n    active: HTMLLogicFlowConnectorElement,\n    target: HTMLLogicFlowConnectorElement,\n  ) {\n    const targRect = this.connectorRects[target.id];\n\n    if (active.type === 'input') {\n      // swap start and end connections\n      this.activeConnection.start = this.getRectCenter(targRect);\n      this.activeConnection.end = this.activeConnectorStartPos;\n      this.activeConnection.type = 'output';\n\n      const rect = this.connectorRects[active.id];\n      this.activeConnection.end = this.getRectCenter(rect);\n    } else {\n      this.activeConnection.end = this.getRectCenter(targRect);\n    }\n  }\n\n  finalizeConnection(\n    active: HTMLLogicFlowConnectorElement,\n    target: HTMLLogicFlowConnectorElement,\n  ) {\n    active.connectingConnector = target;\n    active.connections.push(this.activeConnection);\n    target.connectingConnector = active;\n    target.connections.push(this.activeConnection);\n\n    this.activeConnection.connectors.clear();\n    this.activeConnection.connectors.add(active);\n    this.activeConnection.connectors.add(target);\n  }\n\n  startDisconnectConnection(\n    target: HTMLLogicFlowConnectionElement,\n    loc: Coords,\n    snappingDist: number,\n    cursor = 'grabbing',\n  ) {\n    if (!target) return false;\n\n    const connection = target.closest(\n      'logic-flow-connection',\n    ) as HTMLLogicFlowConnectionElement;\n    if (!connection) return false;\n\n    this.bringToFront(connection);\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (!snappableConnector) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnection = connection;\n\n    const snapConnector = this.connectors.get(snappableConnector.id);\n    this.activeConnector =\n      snapConnector.connectingConnector as HTMLLogicFlowConnectorElement;\n\n    this.disconnectConnector(\n      this.activeConnection,\n      this.activeConnector,\n      snapConnector,\n    );\n\n    // handle type specific logic\n    if (this.activeConnector.type === 'input') {\n      this.swapConnectionEndpoints(this.activeConnection);\n      this.activeConnection.type = 'input';\n    }\n\n    return true;\n  }\n\n  disconnectConnector(\n    connection: HTMLLogicFlowConnectionElement,\n    connector: HTMLLogicFlowConnectorElement,\n    snapConnector: HTMLLogicFlowConnectorElement,\n  ) {\n    connector.connections = connector.connections.filter(c => c !== connection);\n    snapConnector.connections = snapConnector.connections.filter(\n      c => c !== connection,\n    );\n\n    connection.connectors.forEach(connector => {\n      if (connector.onDisconnection) {\n        connector.onDisconnection(snapConnector);\n      }\n    });\n\n    connector.connectingConnector = null;\n    snapConnector.connectingConnector = null;\n  }\n\n  swapConnectionEndpoints(connection: HTMLLogicFlowConnectionElement) {\n    const { start, end } = connection;\n    connection.start = end;\n    connection.end = start;\n  }\n\n  updateNodeConnectorsQuadtree(node: HTMLLogicFlowNodeElement) {\n    const connectors = node.querySelectorAll(\n      'logic-flow-connector',\n    ) as NodeListOf<HTMLLogicFlowConnectorElement>;\n\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      let rect = this.connectorRects[connector.id];\n      if (!rect) {\n        console.log('no rect');\n        let connectorEl = connector.querySelector('.connector');\n\n        const r = connectorEl.getBoundingClientRect();\n        this.connectorRects[connector.id] = {\n          left: r.x,\n          top: r.y,\n          width: r.width,\n          height: r.height,\n        };\n        rect = this.connectorRects[connector.id];\n      }\n\n      this.connectorQuadtree.remove(connector.id);\n      this.connectorQuadtree.insert({\n        id: connector.id,\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height / 2,\n      });\n    }\n  }\n\n  updateViewportQuadtree(\n    entity: HTMLLogicFlowNodeElement | HTMLLogicFlowConnectionElement,\n  ) {\n    if (entity.tagName === 'LOGIC-FLOW-NODE') {\n      const rect = this.nodeRects[entity.id];\n\n      this.viewportQuadtree.remove(entity.id);\n\n      this.viewportQuadtree.insert({\n        id: entity.id,\n        top: rect.top,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n      });\n    } else if (entity.tagName === 'LOGIC-FLOW-CONNECTION') {\n      const rect = this.connectionRects[entity.id];\n\n      this.viewportQuadtree.remove(entity.id);\n\n      this.viewportQuadtree.insert({\n        id: entity.id,\n        top: rect.top,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n      });\n    }\n  }\n\n  updateVisibleElements() {\n    // Get visible nodes within the viewport quadtree\n    let rect = this.viewportRect;\n    rect = {\n      left: rect.left,\n      top: rect.top,\n      width: rect.width,\n      height: rect.height,\n    };\n\n    const visibleEntities = this.viewportQuadtree.query(\n      rect,\n      [],\n      this.camera.pos,\n      this.camera.zoom,\n    );\n\n    const newVisibleElements = visibleEntities.map((entity: any) => entity.id);\n    // console.log('newVisibleElements', newVisibleElements);\n\n    const allItems = new Set([\n      ...this.prevVisibleElements,\n      ...newVisibleElements,\n    ]);\n\n    // Update the previous visible elements\n    this.prevVisibleElements = newVisibleElements;\n\n    // Update elements that changed visibility\n    for (const id of allItems) {\n      const el = document.getElementById(id);\n      if (el) {\n        const entityComponent = el as\n          | HTMLLogicFlowNodeElement\n          | HTMLLogicFlowConnectionElement;\n        const curstate = entityComponent.isVisible;\n        const prevState = this.prevVisibleElements.includes(id);\n        const newstate = newVisibleElements.includes(id);\n        if (prevState === curstate && newstate === curstate) {\n          continue;\n        }\n\n        entityComponent.isVisible = newVisibleElements.includes(id);\n      }\n    }\n  }\n}\n","import { Camera } from '../types/Camera';\n\nexport const renderCanvasGrid = (\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  gridSize: number,\n  color: string,\n  bgColor: string,\n  camera: Camera,\n) => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n\n  let step = gridSize * camera.zoom;\n\n  // if the step is too small because of zoom, increase it by a factor of 10\n  if (step < 10) {\n    step *= 2;\n  }\n\n  // const dpr = window.devicePixelRatio || 1;\n  // canvas.width = width * dpr;\n  // canvas.height = height * dpr;\n  // ctx.scale(dpr, dpr);\n\n  // canvas.width = width;\n  // canvas.height = height;\n\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n\n  //clear\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(0, 0, width, height);\n\n  const offsetX = (-camera.pos.x % gridSize) * camera.zoom;\n  const offsetY = (-camera.pos.y % gridSize) * camera.zoom;\n\n  ctx.beginPath();\n\n  for (let x = -offsetX; x < width; x += step) {\n    ctx.moveTo(x, 0);\n    ctx.lineTo(x, height);\n  }\n\n  for (let y = -offsetY; y < height; y += step) {\n    ctx.moveTo(0, y);\n    ctx.lineTo(width, y);\n  }\n\n  ctx.stroke();\n};\n\nexport const renderCanvasDotGrid = (\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  gridSize: number,\n  color: string,\n  bgColor: string,\n  camera: Camera,\n) => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n\n  let step = gridSize * camera.zoom;\n\n  // if the step is too small because of zoom, increase it by a factor of 10\n  if (step < 10) {\n    step *= 2;\n  }\n\n  // const dpr = window.devicePixelRatio || 1;\n  // canvas.width = width * dpr;\n  // canvas.height = height * dpr;\n  // ctx.scale(dpr, dpr);\n\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n\n  //clear\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(0, 0, width, height);\n\n  const offsetX = (-camera.pos.x % gridSize) * camera.zoom;\n  const offsetY = (-camera.pos.y % gridSize) * camera.zoom;\n\n  ctx.beginPath();\n\n  // for (let x = -offsetX; x < width; x += step) {\n  //   for (let y = -offsetY; y < height; y += step) {\n  //     ctx.moveTo(x, y);\n  //     ctx.arc(x, y, 1, 0, 2 * Math.PI);\n  //   }\n  // }\n\n  ctx.fillStyle = color;\n\n  for (let x = -offsetX; x < width; x += step) {\n    for (let y = -offsetY; y < height; y += step) {\n      //  ctx.moveTo(x, y);\n      //  ctx.arc(x, y, 1, 0, 2 * Math.PI);\n      // use fill rect\n      ctx.fillRect(x - 1, y - 1, 2, 2);\n    }\n  }\n\n  ctx.stroke();\n};\n",":host {\n  display: block;\n}\n","import { Component, Prop, h, Element, Watch, Method } from '@stencil/core';\nimport { debounce } from '../../utils/debounce';\nimport { throttle } from '../../utils/throttle';\nimport { getEventLocation } from '../../utils/getEventLocation';\nimport { ViewContext } from '../../types/ViewContext';\nimport {\n  renderCanvasDotGrid,\n  renderCanvasGrid,\n} from '../../utils/renderCanvasGrid';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-viewport',\n  styleUrl: 'logic-flow-viewport.css',\n  shadow: false,\n})\nexport class LogicFlowViewport {\n  @Element() el: HTMLLogicFlowViewportElement;\n\n  @Prop() showGrid: boolean = true;\n  @Prop() gridType: 'line' | 'dot' = 'line';\n  @Prop() gridSize: number = 20;\n  @Prop() gridBgColor: string = '#f7f7f7';\n  @Prop() gridLineColor: string = '#555555';\n  @Prop() maxZoom: number = 3;\n  @Prop() minZoom: number = 0.2;\n  @Prop() zoomSpeed: number = 0.08;\n  @Prop() snapToGrid: boolean = false;\n  @Prop() connectorSnappingDistance: number = 37;\n  @Prop() cursors: Record<string, string> = {\n    default: 'auto',\n    panning: 'grabbing',\n    moving: 'grabbing',\n  };\n\n  ctx: ViewContext;\n\n  resizeObserver: ResizeObserver;\n  debouncedResize = debounce(() => this.onResize(), 16);\n  debouncedUpdateScreen = debounce(() => this.updateScreen(), 1);\n  debouncedUpdateViewportRect = debounce(\n    () => this.ctx.updateViewportRect(),\n    100,\n  );\n  throttledTouchMove = throttle(e => this.handleTouchMove(e), 1);\n  forceContentReflowDebounced = debounce(() => this.forceContentReflow(), 30);\n\n  elMouseDown = (e: MouseEvent | TouchEvent) => this.onPointerDown(e);\n  elMouseUp = (e: MouseEvent | TouchEvent) => this.onPointerUp(e);\n  elMouseMove = (e: MouseEvent | TouchEvent) => this.onPointerMove(e);\n\n  elTouchStart = (e: TouchEvent) => this.handleTouchStart(e);\n  elTouchMove = (e: TouchEvent) => this.throttledTouchMove(e);\n  elTouchEnd = (e: MouseEvent | TouchEvent) => this.onPointerUp(e);\n\n  elWheel = (e: WheelEvent) => this.handleWheel(e);\n\n  elScroll = () => this.debouncedUpdateViewportRect();\n\n  elKeyPress = (e: KeyboardEvent) => this.onKeyPress(e);\n\n  componentDidLoad() {\n    this.ctx = new ViewContext(this.el);\n    // this.ctx.camera = this.ctx.camera;\n\n    this.ctx.viewportEl = this.el.querySelector(\n      '.logic-flow-viewport',\n    ) as HTMLDivElement;\n    this.ctx.contentEl = this.el.querySelector(\n      '.viewport-content',\n    ) as HTMLDivElement;\n    this.ctx.gridEl = this.el.querySelector(\n      '.logic-flow-grid',\n    ) as HTMLCanvasElement;\n    // this.ctx.viewportRect = this.ctx.viewportEl.getBoundingClientRect();\n    this.ctx.initialPinchDistance = 0;\n    this.ctx.snapToGrid = this.snapToGrid;\n    this.ctx.connectorSnapDistance = this.connectorSnappingDistance;\n\n    const viewportEl = this.ctx.viewportEl;\n\n    // setup event listeners\n    window.addEventListener('mousedown', this.elMouseDown, {\n      passive: true,\n    });\n    viewportEl.addEventListener('mouseup', this.elMouseUp, { passive: true });\n    viewportEl.addEventListener('mousemove', this.elMouseMove, {\n      passive: true,\n    });\n\n    viewportEl.addEventListener('touchstart', this.elTouchStart, {\n      passive: false,\n    });\n    viewportEl.addEventListener('touchmove', this.elTouchMove, {\n      passive: false,\n    });\n    viewportEl.addEventListener('touchend', this.elTouchEnd, { passive: true });\n\n    viewportEl.addEventListener('wheel', this.elWheel, { passive: false });\n\n    window.addEventListener('scroll', this.elScroll, { passive: true });\n\n    window.addEventListener('keydown', this.elKeyPress, { passive: true });\n\n    // Handle resize events\n    this.resizeObserver = new ResizeObserver(() => this.debouncedResize());\n    this.resizeObserver.observe(this.ctx.viewportEl);\n\n    this.renderGrid();\n  }\n\n  disconnectedCallback() {\n    // Clean up resize observer\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n\n    // Clean up event listeners\n    const canvasEl = this.ctx.viewportEl;\n    window.removeEventListener('mousedown', this.elMouseDown);\n    canvasEl.removeEventListener('mouseup', this.elMouseUp);\n    canvasEl.removeEventListener('mousemove', this.elMouseMove);\n\n    canvasEl.removeEventListener('touchstart', this.elTouchStart);\n    canvasEl.removeEventListener('touchmove', this.elTouchMove);\n    canvasEl.removeEventListener('touchend', this.elTouchEnd);\n\n    canvasEl.removeEventListener('wheel', this.elWheel);\n\n    window.removeEventListener('scroll', this.elScroll);\n\n    window.removeEventListener('keydown', this.elKeyPress);\n\n    this.ctx.destroy();\n  }\n\n  @Method()\n  async getContext() {\n    return this.ctx;\n  }\n\n  @Method()\n  async screenToWorldCoords(screenCoords: Coords) {\n    // adjust screen coords to viewport offset\n    const loc = {\n      x: screenCoords.x - this.ctx.viewportOffset.left,\n      y: screenCoords.y - this.ctx.viewportOffset.top,\n    };\n\n    return this.ctx.camera.toWorldCoords(loc);\n  }\n\n  @Watch('snapToGrid')\n  onSnapToGridChange() {\n    this.ctx.snapToGrid = this.snapToGrid;\n  }\n\n  @Watch('gridType')\n  onGridTypeChange() {\n    this.ctx.needsRedraw = true;\n    this.renderGrid();\n  }\n\n  scheduleComponentUpdate() {\n    this.ctx.needsRedraw = true;\n    this.ctx.debouncedUpdateVisibleElements();\n    this.debouncedUpdateScreen();\n  }\n\n  onResize() {\n    // console.log('onResize');\n    this.ctx.needsRedraw = true;\n    this.ctx.viewportRect = this.ctx.viewportEl.getBoundingClientRect();\n\n    this.ctx.gridEl.width = this.ctx.viewportRect.width;\n    this.ctx.gridEl.height = this.ctx.viewportRect.height;\n\n    this.ctx.viewportOffset = {\n      top: this.ctx.viewportRect.top,\n      left: this.ctx.viewportRect.left,\n    };\n\n    // update quadtree boundary\n    const boundary = {\n      left: this.ctx.viewportRect.left - this.ctx.viewportRect.left,\n      top: this.ctx.viewportRect.top - this.ctx.viewportRect.top,\n      width: this.ctx.viewportRect.width,\n      height: this.ctx.viewportRect.height,\n    };\n\n    // get set viewport rect\n    this.ctx.viewportRect = boundary;\n\n    // this.ctx.connectorQuadtree.boundary = this.ctx.viewportRect;\n    this.ctx.viewportQuadtree.boundary = this.ctx.viewportRect;\n\n    this.renderGrid();\n  }\n\n  renderGrid() {\n    if (!this.showGrid || !this.ctx.needsRedraw) return;\n\n    requestAnimationFrame(() => {\n      if (this.gridType === 'line') {\n        renderCanvasGrid(\n          this.ctx.gridEl,\n          this.ctx.viewportRect.width,\n          this.ctx.viewportRect.height,\n          this.gridSize,\n          this.gridLineColor,\n          this.gridBgColor,\n          this.ctx.camera,\n        );\n      }\n\n      if (this.gridType === 'dot') {\n        renderCanvasDotGrid(\n          this.ctx.gridEl,\n          this.ctx.viewportRect.width,\n          this.ctx.viewportRect.height,\n          this.gridSize,\n          this.gridLineColor,\n          this.gridBgColor,\n          this.ctx.camera,\n        );\n      }\n    });\n\n    this.ctx.needsRedraw = false;\n  }\n\n  updateScreen() {\n    requestAnimationFrame(() => {\n      const contentEl = this.ctx.contentEl;\n      // Apply transformations to the content, aligning with the grid\n      contentEl.style.transform = `perspective(1px) scale(${this.ctx.camera.zoom}) translate(${this.ctx.camera.pos.x}px, ${this.ctx.camera.pos.y}px)`;\n      this.renderGrid();\n    });\n  }\n\n  onKeyPress(event: KeyboardEvent) {\n    // if delete key pressed\n    // check if node or connection is current focused\n    // if so, delete it\n\n    if (event.key === 'Delete') {\n      const target = document.activeElement as HTMLElement;\n\n      if (target.tagName === 'LOGIC-FLOW-NODE') {\n        // this.ctx.removeNode(target.id);\n        // remove from dom\n        target.remove();\n      } else if (target.closest('logic-flow-connection')) {\n        // this.ctx.removeConnection(target.id);\n        // remove from dom\n        // target.remove();\n        const connection = target.closest('logic-flow-connection');\n        connection.remove();\n      }\n    }\n  }\n\n  onPointerDown(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n    const worldCoords = this.ctx.camera.toWorldCoords(loc);\n    const target = document.elementFromPoint(loc.x, loc.y) as HTMLElement;\n\n    // if pointer outside viewport, return\n    if (\n      loc.x > this.ctx.viewportOffset.left + this.ctx.viewportRect.width ||\n      loc.x < this.ctx.viewportOffset.left ||\n      loc.y > this.ctx.viewportOffset.top + this.ctx.viewportRect.height ||\n      loc.y < this.ctx.viewportOffset.top\n    ) {\n      return;\n    }\n\n    // if target is not a logic-flow element, return\n    if (\n      !target ||\n      !target.closest(\n        'logic-flow-node, logic-flow-connector, logic-flow-connection, logic-flow-viewport',\n      )\n    ) {\n      return;\n    }\n\n    // if a connection clicked\n    if (\n      this.ctx.startDisconnectConnection(\n        target as HTMLLogicFlowConnectionElement,\n        loc,\n        this.connectorSnappingDistance,\n        this.cursors.moving,\n      )\n    )\n      return;\n\n    // if a connector clicked\n    if (this.ctx.startNewConnection(target as HTMLLogicFlowConnectorElement))\n      return;\n\n    // if a node clicked\n    if (this.ctx.startNodeDrag(target as HTMLLogicFlowNodeElement, worldCoords))\n      return;\n\n    // if nothing clicked, then start panning\n    this.ctx.startPanning(worldCoords);\n  }\n\n  onPointerUp(event: MouseEvent | TouchEvent) {\n    if (this.ctx.activeConnector && this.ctx.activeConnection) {\n      this.onEndActiveConnection(event);\n    } else if (this.ctx.activeNode && this.ctx.activeNodeDragging) {\n      this.ctx.endNodeDrag();\n    }\n\n    this.ctx.resetPointerStates();\n  }\n\n  onEndActiveConnection(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n    let target = event.target as HTMLElement;\n\n    // For touch events, get the element at the touch point\n    if (event instanceof TouchEvent) {\n      target = document.elementFromPoint(loc.x, loc.y) as HTMLElement;\n    }\n\n    let targetConnector = this.ctx.getTargetConnector(\n      target,\n      loc,\n      this.connectorSnappingDistance,\n    );\n\n    if (targetConnector) {\n      this.ctx.processConnection(targetConnector);\n    } else {\n      this.ctx.activeConnection.remove();\n    }\n\n    // clear active states\n    this.ctx.activeConnector = null;\n    this.ctx.activeConnection = null;\n  }\n\n  onPointerMove(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n\n    if (this.ctx.activeConnector && this.ctx.activeConnection) {\n      this.ctx.moveActiveConnection(loc, this.connectorSnappingDistance);\n    } else if (this.ctx.activeNode && this.ctx.activeNodeDragging) {\n      this.ctx.moveNode(loc, this.gridSize);\n    } else if (this.ctx.isPanning) {\n      this.ctx.panCamera(loc);\n      this.scheduleComponentUpdate();\n    }\n  }\n\n  handleWheel(event: WheelEvent) {\n    event.preventDefault();\n\n    const canvasRect = this.ctx.viewportRect;\n    const mouseX =\n      event.clientX - canvasRect.left - this.ctx.viewportOffset.left;\n    const mouseY = event.clientY - canvasRect.top - this.ctx.viewportOffset.top;\n\n    // Calculate the zoom level change\n    const zoomDelta = event.deltaY < 0 ? this.zoomSpeed : -this.zoomSpeed;\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.ctx.camera.zoom + zoomDelta),\n    );\n\n    // Calculate the scale factor\n    const scaleFactor = newZoom / this.ctx.camera.zoom;\n\n    // Adjust the pan position to keep the same point under the cursor\n    const newPanX =\n      mouseX -\n      (mouseX - this.ctx.camera.pos.x * this.ctx.camera.zoom) * scaleFactor;\n\n    const newPanY =\n      mouseY -\n      (mouseY - this.ctx.camera.pos.y * this.ctx.camera.zoom) * scaleFactor;\n\n    // Update pan and zoom\n    this.ctx.camera.pos = { x: newPanX / newZoom, y: newPanY / newZoom };\n\n    // this.lastZoom = this.ctx.camera.zoom;\n    this.ctx.camera.zoom = newZoom;\n\n    // if zooming in, force a reflow to prevent blurry text\n    if (zoomDelta > 0) {\n      this.forceContentReflowDebounced();\n    }\n\n    // this.ctx.needsRedraw = true;\n    this.scheduleComponentUpdate();\n  }\n\n  handleTouchStart(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> start panning\n      this.onPointerDown(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> start pinch zoom\n      this.ctx.initialPinchDistance = 0; // Reset initial pinch distance\n      this.handlePinch(event); // Start pinch gesture\n    }\n  }\n\n  handleTouchMove(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> panning\n      this.onPointerMove(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> pinch zooming\n      this.handlePinch(event);\n    }\n  }\n\n  handlePinch(event: TouchEvent) {\n    if (event.touches.length !== 2) return;\n\n    // handle panning while pinching\n    this.onPointerMove(event);\n\n    event.preventDefault(); // Prevent default behavior like scrolling\n\n    const touch1 = event.touches[0];\n    const touch2 = event.touches[1];\n\n    // Calculate the distance between the two touch points (pinch)\n    const distance = Math.sqrt(\n      (touch1.clientX - touch2.clientX) ** 2 +\n        (touch1.clientY - touch2.clientY) ** 2,\n    );\n\n    if (this.ctx.initialPinchDistance === 0) {\n      // If it's the start of the pinch, initialize the pinch distance\n      this.ctx.initialPinchDistance = distance;\n    } else {\n      // Calculate the scale factor based on the distance change\n      const scaleFactor = distance / this.ctx.initialPinchDistance;\n\n      // Calculate the midpoint between the two fingers (the pinch center)\n      const pinchCenterX = (touch1.clientX + touch2.clientX) / 2;\n      const pinchCenterY = (touch1.clientY + touch2.clientY) / 2;\n\n      // Apply zoom and keep the pinch center fixed\n      this.adjustZoomOnPinch(scaleFactor, pinchCenterX, pinchCenterY);\n\n      // Update the initial pinch distance for the next move\n      this.ctx.initialPinchDistance = distance;\n    }\n  }\n\n  adjustZoomOnPinch(\n    scaleFactor: number,\n    pinchCenterX: number,\n    pinchCenterY: number,\n  ) {\n    // Calculate new zoom, ensuring it stays within min/max bounds\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.ctx.camera.zoom * scaleFactor),\n    );\n\n    // Find the pinch center position relative to the content's current position and zoom\n    const pinchContentX =\n      (pinchCenterX - this.ctx.camera.pos.x * this.ctx.camera.zoom) /\n      this.ctx.camera.zoom;\n    const pinchContentY =\n      (pinchCenterY - this.ctx.camera.pos.y * this.ctx.camera.zoom) /\n      this.ctx.camera.zoom;\n\n    // Adjust pan so the pinch center stays fixed after zooming\n    this.ctx.camera.pos = {\n      x: pinchCenterX / newZoom - pinchContentX,\n      y: pinchCenterY / newZoom - pinchContentY,\n    };\n\n    // Apply the new zoom level\n    this.ctx.camera.zoom = newZoom;\n\n    // if zooming in, force a reflow to prevent blurry text\n    if (scaleFactor > 1) {\n      this.forceContentReflowDebounced();\n    }\n\n    // Trigger a screen redraw\n    this.debouncedUpdateScreen();\n  }\n\n  forceContentReflow() {\n    // force repaint the content\n    const cdisplay = this.ctx.contentEl.style.display;\n    this.ctx.contentEl.style.display = 'none';\n    this.ctx.contentEl.offsetHeight; // trigger reflow\n    this.ctx.contentEl.style.display = cdisplay;\n  }\n\n  render() {\n    return (\n      <div class=\"logic-flow-viewport\">\n        <canvas\n          class=\"logic-flow-grid\"\n          style={{ display: this.showGrid ? 'block' : 'none' }}\n        ></canvas>\n        <div class=\"viewport-content\">\n          <slot></slot>\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}