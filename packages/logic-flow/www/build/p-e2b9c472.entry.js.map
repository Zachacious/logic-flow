{"version":3,"names":["logicFlowConnectorCss","LogicFlowConnectorStyle0","LogicFlowConnector","getNode","this","el","closest","render","sideClass","type","typeClass","h","Host","key","class","connections","length","logicFlowNodeCss","LogicFlowNodeStyle0","LogicFlowNode","style","connectors","Set","x","y","componentWillLoad","position","startX","startY","onPositionChange","observer","MutationObserver","mutations","mutation","addedNodes","forEach","node","nodeName","connector","add","removedNodes","delete","observe","childList","disconnectedCallback","disconnect","newValue","JSON","parse","updateTransform","getConnectors","Array","from","filter","getConnectedNodes","connection","size","otherConnector","find","c","notifyConnectedConnectors","data","onUpdateFromConnectedNode","transform","componentWillRender","isVisible","display","tabIndex","debounce","fn","delay","timeout","args","clearTimeout","setTimeout","throttle","lastFunc","lastRan","Date","now","getEventLocation","e","MouseEvent","clientX","clientY","TouchEvent","touches","changedTouches","urlAlphabet","nanoid","id","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet","Quadtree","constructor","boundary","capacity","camera","objects","divided","northeast","northwest","southeast","southwest","subdivide","left","top","width","height","halfWidth","halfHeight","expandBoundaryToInclude","object","expandBoundaryToPoint","expandBoundaryToRect","point","newLeft","Math","min","newTop","newRight","max","newBottom","rect","rectLeft","rectTop","rectWidth","rectHeight","insert","contains","push","console","log","remove","removeFromNode","originalLength","obj","containsPoint","containsRect","inRange","range","pan","zoom","pointInRange","rectInRange","adjX","adjY","adjLeft","adjTop","adjRight","adjBottom","query","found","intersects","i","checkNearby","coords","bounds","nearby","pos","Camera","uid","toScreenCoords","worldCoords","toWorldCoords","screenCoords","ViewContext","viewport","nodes","Map","connectorSnapDistance","connectorRects","connectionRects","nodeRects","visibleElements","prevVisibleElements","needsRedraw","initialPinchDistance","isPanning","snapToGrid","dragStart","activeNodeDragging","activeNodeDragStart","activeConnectorStartPos","viewportOffset","bringingToFront","debouncedUpdateVisibleElements","updateVisibleElements","viewportId","instances","has","get","set","viewportRect","getBoundingClientRect","boundry","connectorQuadtree","viewportQuadtree","initializeViewport","m","viewportMutation","subtree","destroy","updateViewportRect","viewportEl","addNode","setAttribute","n","requestIdleCallback","_a","_b","updateViewportQuadtree","removeNode","querySelectorAll","cid","removeConnection","removeConnector","addConnector","requestAnimationFrame","connectorEl","querySelector","qrect","addConnection","connIndex","indexOf","splice","connectingConnector","HTMLElement","tagName","logicNode","logicConnector","logicConnection","getAttribute","instance","contentEl","children","traverse","bringToFront","parentElement","appendChild","setCursor","cursor","document","body","resetCursor","getRectCenter","startPanning","panCamera","loc","resetPointerStates","startNodeDrag","target","activeNode","updateNodeConnectorPos","aNode","delta","Object","assign","updateNodeConnectorConnectionsPos","end","start","calcSnapToGrid","gridSize","round","calcNodePos","moveNode","oldPos","newPos","clientWidth","clientHeight","endNodeDrag","updateNodeConnectorsQuadtree","concat","path","createNewConnection","startPos","createElement","activeConnection","moveActiveConnection","snappingDist","aConn","snappableConnector","getTargetConnector","targetConnector","snappedConnector","startNewConnection","connEl","activeConnector","parentConn","center","processConnection","tConn","tNode","isValidConnection","onConnection","then","result","updateConnectionEndpoints","finalizeConnection","targetConn","active","targRect","clear","startDisconnectConnection","snapConnector","disconnectConnector","swapConnectionEndpoints","onDisconnection","r","entity","visibleEntities","newVisibleElements","map","allItems","getElementById","entityComponent","curstate","prevState","includes","newstate","renderCanvasGrid","canvas","color","bgColor","ctx","getContext","step","strokeStyle","lineWidth","fillStyle","fillRect","offsetX","offsetY","beginPath","moveTo","lineTo","stroke","renderCanvasDotGrid","logicFlowViewportCss","LogicFlowViewportStyle0","LogicFlowViewport","debouncedResize","onResize","debouncedUpdateScreen","updateScreen","debouncedUpdateViewportRect","throttledTouchMove","handleTouchMove","forceContentReflowDebounced","forceContentReflow","elMouseDown","onPointerDown","elMouseUp","onPointerUp","elMouseMove","onPointerMove","elTouchStart","handleTouchStart","elTouchMove","elTouchEnd","elWheel","handleWheel","elScroll","elKeyPress","onKeyPress","default","panning","moving","componentDidLoad","gridEl","connectorSnappingDistance","window","addEventListener","passive","resizeObserver","ResizeObserver","renderGrid","canvasEl","removeEventListener","screenToWorldCoords","onSnapToGridChange","onGridTypeChange","scheduleComponentUpdate","showGrid","gridType","gridLineColor","gridBgColor","event","activeElement","elementFromPoint","cursors","onEndActiveConnection","preventDefault","canvasRect","mouseX","mouseY","zoomDelta","deltaY","zoomSpeed","newZoom","maxZoom","minZoom","scaleFactor","newPanX","newPanY","handlePinch","touch1","touch2","distance","sqrt","pinchCenterX","pinchCenterY","adjustZoomOnPinch","pinchContentX","pinchContentY","cdisplay"],"sources":["src/components/logic-flow-connector/logic-flow-connector.css?tag=logic-flow-connector","src/components/logic-flow-connector/logic-flow-connector.tsx","src/components/logic-flow-node/logic-flow-node.css?tag=logic-flow-node","src/components/logic-flow-node/logic-flow-node.tsx","src/utils/debounce.ts","src/utils/throttle.ts","src/utils/getEventLocation.ts","../../node_modules/nanoid/url-alphabet/index.js","../../node_modules/nanoid/index.browser.js","src/types/Quadtree.ts","src/types/Camera.ts","src/types/ViewContext.ts","src/utils/renderCanvasGrid.ts","src/components/logic-flow-viewport/logic-flow-viewport.css?tag=logic-flow-viewport","src/components/logic-flow-viewport/logic-flow-viewport.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element, Method } from '@stencil/core';\nimport { LogicFlowConnection } from '../logic-flow-connection/logic-flow-connection';\n\n@Component({\n  tag: 'logic-flow-connector',\n  styleUrl: 'logic-flow-connector.css',\n  shadow: false,\n})\nexport class LogicFlowConnector {\n  @Element() el: HTMLElement;\n\n  @Prop() type: 'input' | 'output' = 'input';\n  @Prop() connectingConnector: LogicFlowConnector | null = null;\n  @Prop() connections: LogicFlowConnection[] = [];\n  @Prop() onConnection: (\n    sourceConnector: HTMLLogicFlowConnectorElement,\n    // targetConnector: HTMLLogicFlowConnectorElement,\n  ) => Promise<boolean>;\n  @Prop() onDisconnection: (\n    sourceConnector: HTMLLogicFlowConnectorElement,\n    // targetConnector: HTMLLogicFlowConnectorElement,\n  ) => Promise<boolean>;\n  @Prop() onUpdateFromConnectedNode: (\n    connector: HTMLLogicFlowConnectorElement,\n    node: HTMLLogicFlowNodeElement,\n    data: any,\n  ) => Promise<void>;\n\n  @Method()\n  async getNode() {\n    return this.el.closest('logic-flow-node');\n  }\n\n  render() {\n    const sideClass =\n      this.type === 'input' ? 'left-connector' : 'right-connector';\n    const typeClass =\n      this.type === 'input' ? 'input-connector' : 'output-connector';\n\n    return (\n      <Host class={`logic-flow-connector ${typeClass}`}>\n        <div\n          class={`connector ${sideClass} ${\n            (this.connections.length > 0 && 'connected') || ''\n          }`}\n        ></div>\n        <div class={`connector-content ${sideClass}`}>\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import {\n  Component,\n  Host,\n  Prop,\n  h,\n  Element,\n  State,\n  Watch,\n  Method,\n} from '@stencil/core';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-node',\n  styleUrl: 'logic-flow-node.css',\n  shadow: false,\n})\nexport class LogicFlowNode {\n  @Element() el: HTMLLogicFlowNodeElement;\n\n  @Prop() type: string = 'default';\n  // @Prop() name: string = 'Node';\n  @Prop() startX: number = 0;\n  @Prop() startY: number = 0;\n  @Prop({ mutable: true }) position: Coords = { x: 0, y: 0 };\n  @Prop({ mutable: true }) isVisible: boolean = true;\n\n  @State() isDragging = false;\n\n  // @Event() notifyConnectors: EventEmitter;\n\n  style = {};\n  observer: MutationObserver;\n  connectors: Set<HTMLLogicFlowConnectorElement> = new Set();\n\n  componentWillLoad() {\n    //  set initial size\n    this.position.x = this.startX;\n    this.position.y = this.startY;\n\n    this.onPositionChange(this.position);\n\n    // set up observer - watch for adding or removing connectors\n    this.observer = new MutationObserver((mutations: MutationRecord[]) => {\n      for (const mutation of mutations) {\n        if (mutation.type === 'childList') {\n          mutation.addedNodes.forEach((node: Node) => {\n            if (node.nodeName === 'LOGIC-FLOW-CONNECTOR') {\n              const connector = node as HTMLLogicFlowConnectorElement;\n              this.connectors.add(connector);\n            }\n          });\n\n          mutation.removedNodes.forEach((node: Node) => {\n            if (node.nodeName === 'LOGIC-FLOW-CONNECTOR') {\n              const connector = node as HTMLLogicFlowConnectorElement;\n              this.connectors.delete(connector);\n            }\n          });\n        }\n      }\n    });\n\n    this.observer.observe(this.el, {\n      childList: true,\n    });\n  }\n\n  disconnectedCallback() {\n    this.observer.disconnect();\n  }\n\n  @Watch('position')\n  onPositionChange(newValue: Coords | string) {\n    if (typeof newValue === 'string') {\n      this.position = JSON.parse(newValue);\n    }\n    // update transform\n    this.updateTransform();\n  }\n\n  @Method()\n  async getConnectors(type: 'input' | 'output' | 'both' = 'both') {\n    let connectors = this.connectors;\n    if (type === 'input') {\n      connectors = new Set(\n        Array.from(connectors).filter(connector => connector.type === 'input'),\n      );\n    } else if (type === 'output') {\n      connectors = new Set(\n        Array.from(connectors).filter(connector => connector.type === 'output'),\n      );\n    }\n\n    return connectors;\n  }\n\n  @Method()\n  async getConnectedNodes(type: 'input' | 'output' | 'both' = 'both') {\n    const nodes = [];\n    const connectors = await this.getConnectors(type);\n\n    for (const connector of connectors) {\n      const connections = connector.connections;\n      for (const connection of connections) {\n        // if connectors length is greater than 1, then we have a connection\n        if (connection.connectors.size > 1) {\n          // get the other connector\n          const otherConnector = Array.from(connection.connectors).find(\n            c => c !== connector,\n          );\n          // get the node\n          const node = await otherConnector.getNode();\n          nodes.push(node);\n        }\n      }\n    }\n  }\n\n  @Method()\n  async notifyConnectedConnectors(\n    type: 'input' | 'output' | 'both' = 'both',\n    data: any,\n  ) {\n    const connectors = await this.getConnectors(type);\n    for (const connector of connectors) {\n      const connections = connector.connections;\n      for (const connection of connections) {\n        // if connectors length is greater than 1, then we have a connection\n        if (connection.connectors.size > 1) {\n          // get the other connector\n          const otherConnector = Array.from(connection.connectors).find(\n            c => c !== connector,\n          );\n\n          if (otherConnector.onUpdateFromConnectedNode) {\n            otherConnector.onUpdateFromConnectedNode(\n              otherConnector,\n              this.el,\n              data,\n            );\n          }\n        }\n      }\n    }\n  }\n\n  updateTransform() {\n    this.el.style.transform = `translate(${this.position.x}px, ${this.position.y}px )`;\n  }\n\n  componentWillRender() {\n    if (!this.isVisible) {\n      this.style = { display: 'none' };\n    } else {\n      this.style = {};\n    }\n  }\n\n  render() {\n    return (\n      <Host class=\"logic-flow-node\" style={this.style} tabIndex=\"0\">\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n","export const debounce = (fn: (...args: any[]) => void, delay: number) => {\n  let timeout: ReturnType<typeof setTimeout>;\n  return (...args: any[]) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n};\n","export const throttle = (fn: (...args: any[]) => void, delay: number) => {\n  let lastFunc: ReturnType<typeof setTimeout>;\n  let lastRan: number;\n  return (...args: any[]) => {\n    if (!lastRan) {\n      fn(...args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc);\n      lastFunc = setTimeout(() => {\n        if (Date.now() - lastRan >= delay) {\n          fn(...args);\n          lastRan = Date.now();\n        }\n      }, delay - (Date.now() - lastRan));\n    }\n  };\n};\n","export const getEventLocation = (e: MouseEvent | TouchEvent) => {\n  if (e instanceof MouseEvent) {\n    return { x: e.clientX, y: e.clientY };\n  } else if (e instanceof TouchEvent && e.touches.length > 0) {\n    return { x: e.touches[0].clientX, y: e.touches[0].clientY };\n  } else if (e instanceof TouchEvent && e.changedTouches.length > 0) {\n    return { x: e.changedTouches[0].clientX, y: e.changedTouches[0].clientY };\n  }\n  return { x: 0, y: 0 };\n};\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { Coords } from './Coords';\nimport { Rect } from './Rect';\nimport { Camera } from './Camera';\n\n// SpatialObject can be either a Point or a Rect with an ID for tracking\ntype SpatialObject = Point | BBox;\n\ninterface Point extends Coords {\n  id: string; // Unique ID of the point (e.g., connector)\n}\n\ninterface BBox extends Rect {\n  id: string; // Unique ID of the rect (e.g., node)\n}\n\nexport class Quadtree {\n  boundary: Rect;\n  capacity: number;\n  objects: SpatialObject[];\n  divided: boolean;\n  northeast: Quadtree | null;\n  northwest: Quadtree | null;\n  southeast: Quadtree | null;\n  southwest: Quadtree | null;\n  camera: Camera;\n\n  constructor(boundary: Rect, capacity: number, camera: Camera) {\n    this.boundary = boundary;\n    this.capacity = capacity;\n    this.objects = [];\n    this.divided = false;\n    this.northeast = null;\n    this.northwest = null;\n    this.southeast = null;\n    this.southwest = null;\n    this.camera = camera;\n  }\n\n  subdivide() {\n    const { left, top, width, height } = this.boundary;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n\n    this.northeast = new Quadtree(\n      { left: left + halfWidth, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.northwest = new Quadtree(\n      { left, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.southeast = new Quadtree(\n      {\n        left: left + halfWidth,\n        top: top + halfHeight,\n        width: halfWidth,\n        height: halfHeight,\n      },\n      this.capacity,\n      this.camera,\n    );\n    this.southwest = new Quadtree(\n      { left, top: top + halfHeight, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n\n    this.divided = true;\n  }\n\n  expandBoundaryToInclude(object: SpatialObject) {\n    if ('x' in object && 'y' in object) {\n      this.expandBoundaryToPoint(object);\n    } else {\n      this.expandBoundaryToRect(object);\n    }\n  }\n\n  expandBoundaryToPoint(point: Point) {\n    const { left, top, width, height } = this.boundary;\n    const { x, y } = point;\n\n    const newLeft = Math.min(left, x);\n    const newTop = Math.min(top, y);\n    const newRight = Math.max(left + width, x);\n    const newBottom = Math.max(top + height, y);\n\n    this.boundary = {\n      left: newLeft,\n      top: newTop,\n      width: newRight - newLeft,\n      height: newBottom - newTop,\n    };\n  }\n\n  expandBoundaryToRect(rect: Rect) {\n    const { left, top, width, height } = this.boundary;\n    const {\n      left: rectLeft,\n      top: rectTop,\n      width: rectWidth,\n      height: rectHeight,\n    } = rect;\n\n    const newLeft = Math.min(left, rectLeft);\n    const newTop = Math.min(top, rectTop);\n    const newRight = Math.max(left + width, rectLeft + rectWidth);\n    const newBottom = Math.max(top + height, rectTop + rectHeight);\n\n    this.boundary = {\n      left: newLeft,\n      top: newTop,\n      width: newRight - newLeft,\n      height: newBottom - newTop,\n    };\n  }\n\n  insert(object: SpatialObject): boolean {\n    // if (!this.contains(object)) return false;\n\n    if (!this.contains(object)) {\n      this.expandBoundaryToInclude(object);\n    }\n\n    if (this.objects.length < this.capacity) {\n      this.objects.push(object);\n      return true;\n    } else {\n      if (!this.divided) {\n        this.subdivide();\n      }\n\n      if (this.northeast!.insert(object)) return true;\n      if (this.northwest!.insert(object)) return true;\n      if (this.southeast!.insert(object)) return true;\n      if (this.southwest!.insert(object)) return true;\n\n      console.log('Object could not be inserted into any child node');\n\n      // If none of the children can contain the object, keep it in the current node\n      this.objects.push(object);\n      return true;\n    }\n  }\n\n  remove(id: string): boolean {\n    const removeFromNode = (node: Quadtree | null): boolean => {\n      if (!node) return false;\n\n      const originalLength = node.objects.length;\n      node.objects = node.objects.filter(obj => (obj as any).id !== id);\n\n      if (originalLength !== node.objects.length) return true;\n\n      if (node.divided) {\n        return (\n          removeFromNode(node.northwest) ||\n          removeFromNode(node.northeast) ||\n          removeFromNode(node.southwest) ||\n          removeFromNode(node.southeast)\n        );\n      }\n\n      return false;\n    };\n\n    return removeFromNode(this);\n  }\n\n  contains(object: SpatialObject): boolean {\n    if ('x' in object && 'y' in object) {\n      return this.containsPoint(object);\n    } else {\n      return this.containsRect(object);\n    }\n  }\n\n  containsPoint(point: Point): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      point.x >= left &&\n      point.x < left + width &&\n      point.y >= top &&\n      point.y < top + height\n    );\n\n    // boundary adjusted to world space\n    // const adjBounds = {\n    //   left: this.boundary.left + this.camera.pos.x,\n    //   top: this.boundary.top + this.camera.pos.y,\n    //   width: this.boundary.width,\n    //   height: this.boundary.height,\n    // };\n\n    // return (\n    //   point.x >= adjBounds.left &&\n    //   point.x < adjBounds.left + adjBounds.width &&\n    //   point.y >= adjBounds.top &&\n    //   point.y < adjBounds.top + adjBounds.height\n    // );\n  }\n\n  containsRect(rect: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      rect.left >= left &&\n      rect.left + rect.width <= left + width &&\n      rect.top >= top &&\n      rect.top + rect.height <= top + height\n    );\n  }\n\n  inRange(\n    object: SpatialObject,\n    range: Rect,\n    pan: Coords,\n    zoom: number,\n  ): boolean {\n    if ('x' in object && 'y' in object) {\n      // It's a point\n      return this.pointInRange(object, range, pan, zoom);\n    } else {\n      // It's a rect\n      return this.rectInRange(object, range, pan, zoom);\n    }\n  }\n\n  pointInRange(point: Point, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust point position relative to pan and zoom\n    const adjX = (point.x + pan.x) * zoom;\n    const adjY = (point.y + pan.y) * zoom;\n\n    // const screenX = adjX / zoom - pan.x;\n    // const screenY = adjY / zoom - pan.y;\n\n    // // show debug\n    // const debugDiv = document.getElementById('debug');\n    // debugDiv.style.left = `${screenX}px`;\n    // debugDiv.style.top = `${screenY}px`;\n    // debugDiv.style.width = '10px';\n    // debugDiv.style.height = '10px';\n\n    // // // show debug range\n    // const screenRange = {\n    //   left: range.left / zoom - pan.x,\n    //   top: range.top / zoom - pan.y,\n    //   width: range.width / zoom,\n    //   height: range.height / zoom,\n    // };\n\n    // const debugDiv2 = document.getElementById('debug2');\n    // debugDiv2.style.left = `${screenRange.left}px`;\n    // debugDiv2.style.top = `${screenRange.top}px`;\n    // debugDiv2.style.width = `${screenRange.width}px`;\n    // debugDiv2.style.height = `${screenRange.height}px`;\n\n    return (\n      adjX >= range.left &&\n      adjX < range.left + range.width &&\n      adjY >= range.top &&\n      adjY < range.top + range.height\n    );\n  }\n\n  rectInRange(rect: Rect, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust rect position relative to pan and zoom\n    const adjLeft = (rect.left + pan.x) * zoom;\n    const adjTop = (rect.top + pan.y) * zoom;\n\n    const adjRight = adjLeft + rect.width * zoom;\n    const adjBottom = adjTop + rect.height * zoom;\n\n    // const screenW = (adjRight - adjLeft) / this.camera.zoom;\n    // const screenH = (adjBottom - adjTop) / this.camera.zoom;\n    // const screenX = adjLeft / this.camera.zoom - pan.x;\n    // const screenY = adjTop / this.camera.zoom - pan.y;\n\n    // const debugDiv2 = document.getElementById('debug2');\n    // debugDiv2.style.width = `${screenW}px`;\n    // debugDiv2.style.height = `${screenH}px`;\n    // debugDiv2.style.left = `${screenX}px`;\n    // debugDiv2.style.top = `${screenY}px`;\n\n    // const screenRange = {\n    //   left: range.left / zoom - pan.x,\n    //   top: range.top / zoom - pan.y,\n    //   width: range.width / zoom,\n    //   height: range.height / zoom,\n    // };\n\n    // const debugDiv = document.getElementById('debug2');\n    // debugDiv.style.width = `${screenRange.width}px`;\n    // debugDiv.style.height = `${screenRange.height}px`;\n    // debugDiv.style.left = `${screenRange.left}px`;\n    // debugDiv.style.top = `${screenRange.top}px`;\n\n    return !(\n      adjRight < range.left ||\n      adjLeft > range.left + range.width ||\n      adjBottom < range.top ||\n      adjTop > range.top + range.height\n    );\n  }\n\n  query(\n    range: Rect,\n    found: SpatialObject[] = [],\n    pan: Coords,\n    zoom: number,\n  ): SpatialObject[] {\n    if (!this.intersects(range)) return found;\n\n    for (let i = 0; i < this.objects.length; i++) {\n      if (this.inRange(this.objects[i], range, pan, zoom)) {\n        found.push(this.objects[i]);\n      }\n    }\n\n    if (this.divided) {\n      this.northwest!.query(range, found, pan, zoom);\n      this.northeast!.query(range, found, pan, zoom);\n      this.southwest!.query(range, found, pan, zoom);\n      this.southeast!.query(range, found, pan, zoom);\n    }\n\n    return found;\n  }\n\n  intersects(range: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return !(\n      range.left > left + width ||\n      range.left + range.width < left ||\n      range.top > top + height ||\n      range.top + range.height < top\n    );\n  }\n\n  checkNearby(coords: Coords, range: number): SpatialObject | null {\n    const bounds = {\n      left: coords.x - range / 2,\n      top: coords.y - range / 2,\n      width: range,\n      height: range,\n    };\n\n    const nearby = this.query(bounds, [], this.camera.pos, this.camera.zoom);\n    return nearby.length > 0 ? nearby[0] : null;\n  }\n}\n","import { nanoid } from 'nanoid';\nimport { Coords } from './Coords';\n\nexport class Camera {\n  uid: string;\n  pos: Coords;\n  zoom: number;\n\n  constructor() {\n    this.uid = nanoid();\n    this.pos = { x: 0, y: 0 };\n    this.zoom = 1;\n  }\n\n  toScreenCoords(worldCoords: Coords): Coords {\n    return {\n      x: (worldCoords.x - this.pos.x) * this.zoom,\n      y: (worldCoords.y - this.pos.y) * this.zoom,\n    };\n  }\n\n  toWorldCoords(screenCoords: Coords): Coords {\n    return {\n      x: screenCoords.x / this.zoom - this.pos.x,\n      y: screenCoords.y / this.zoom - this.pos.y,\n    };\n  }\n}\n","import { nanoid } from 'nanoid';\nimport { Rect } from './Rect';\nimport { Quadtree } from './Quadtree';\nimport { Camera } from './Camera';\nimport { Coords } from './Coords';\nimport { throttle } from '../utils/throttle';\nimport { Offset } from './Offset';\n\nexport class ViewContext {\n  static instances = new Map<string, ViewContext>();\n\n  uid: string;\n  nodes = new Map<string, HTMLLogicFlowNodeElement>();\n  connectors = new Map<string, HTMLLogicFlowConnectorElement>();\n  connectorSnapDistance = 10;\n  connections = new Map<string, HTMLLogicFlowConnectionElement>();\n  connectorRects = <Record<string, Rect>>{};\n  connectionRects = <Record<string, Rect>>{};\n  connectorQuadtree: Quadtree;\n  viewportQuadtree: Quadtree;\n  nodeRects = <Record<string, Rect>>{};\n  camera = new Camera();\n  observer: MutationObserver;\n  visibleElements: string[] = [];\n  prevVisibleElements: string[] = [];\n\n  // viewport variables\n  viewportEl: HTMLDivElement;\n  contentEl: HTMLDivElement;\n  gridEl: HTMLCanvasElement;\n  needsRedraw = true;\n  viewportRect: Rect;\n  initialPinchDistance = 0;\n  isPanning = false;\n  snapToGrid = false;\n  dragStart: Coords = { x: 0, y: 0 };\n  activeNode: HTMLLogicFlowNodeElement;\n  activeNodeDragging = false;\n  activeNodeDragStart: Coords = { x: 0, y: 0 };\n  activeConnector: HTMLLogicFlowConnectorElement;\n  activeConnectorStartPos: Coords = { x: 0, y: 0 };\n  activeConnection: HTMLLogicFlowConnectionElement;\n  viewportOffset: Offset = { top: 0, left: 0 };\n  bringingToFront = false;\n\n  debouncedUpdateVisibleElements = throttle(\n    () => this.updateVisibleElements(),\n    20,\n  );\n\n  constructor(viewport: HTMLLogicFlowViewportElement) {\n    const id = viewport.id || nanoid();\n    viewport.id = id;\n    const viewportId = id;\n    if (ViewContext.instances.has(viewportId)) {\n      return ViewContext.instances.get(viewportId);\n    }\n    this.uid = viewportId;\n    ViewContext.instances.set(this.uid, this);\n\n    if (!this.viewportRect) {\n      const rect = viewport.getBoundingClientRect();\n      this.viewportOffset = {\n        top: rect.top,\n        left: rect.left,\n      };\n      this.viewportRect = {\n        left: rect.left - rect.left,\n        top: rect.top - rect.top,\n        width: rect.width - rect.left,\n        height: rect.height - rect.top,\n      };\n      // this.updateViewportRect();\n    }\n\n    const boundry = {\n      left: this.viewportRect.left,\n      top: this.viewportRect.top,\n      width: this.viewportRect.width,\n      height: this.viewportRect.height,\n    };\n\n    this.connectorQuadtree = new Quadtree(boundry, 4, this.camera);\n    this.viewportQuadtree = new Quadtree(boundry, 4, this.camera);\n\n    ViewContext.initializeViewport(viewport);\n\n    this.observer = new MutationObserver((m: MutationRecord[]) =>\n      this.viewportMutation(m),\n    );\n    this.observer.observe(viewport, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  destroy() {\n    this.observer.disconnect();\n\n    ViewContext.instances.delete(this.uid);\n  }\n\n  updateViewportRect() {\n    const rect = this.viewportEl.getBoundingClientRect();\n    this.viewportOffset = {\n      top: rect.top,\n      left: rect.left,\n    };\n    this.viewportRect = {\n      left: rect.left - rect.left,\n      top: rect.top - rect.top,\n      width: rect.width - rect.left,\n      height: rect.height - rect.top,\n    };\n  }\n\n  addNode(node: HTMLLogicFlowNodeElement) {\n    const id = nanoid();\n    node.id = id;\n    this.nodes.set(id, node);\n\n    // set data attribute for the context id\n    node.setAttribute('data-viewport', this.uid);\n\n    const n = node;\n\n    // wait for next frame to update connectors rects until the connectors have registered\n    requestIdleCallback(\n      () => {\n        // update rect\n        const rect = n.getBoundingClientRect();\n\n        this.nodeRects[id] = {\n          left: n?.position?.x || n.startX || rect.x,\n          top: n?.position?.y || n.startY || rect.y,\n          width: rect.width,\n          height: rect.height,\n        };\n\n        // add to quadtree\n        this.updateViewportQuadtree(n);\n\n        // this.updateNodeConnectorsQuadtree(node);\n      },\n      { timeout: 100 },\n    );\n\n    return id;\n  }\n\n  removeNode(id: string) {\n    console.log('remove node', id);\n    // remove all connections and connectors associated with the node\n    // get connectors\n    const node = this.nodes.get(id);\n    if (node) {\n      const connectors = node.querySelectorAll('logic-flow-connector');\n      connectors.forEach((connector: HTMLLogicFlowConnectorElement) => {\n        const cid = connector.id;\n        // remove connections\n        connector.connections.forEach(\n          (connection: HTMLLogicFlowConnectionElement) => {\n            const id = connection.id;\n            if (id) this.removeConnection(id);\n          },\n        );\n        // remove connector\n        this.removeConnector(cid);\n      });\n\n      // remove from quadtree\n      this.viewportQuadtree.remove(id);\n      delete this.nodeRects[id];\n      // node.setAttribute('data-viewport', '');\n\n      // remove from nodes\n      this.nodes.delete(id);\n    }\n  }\n\n  addConnector(connector: HTMLLogicFlowConnectorElement) {\n    const id = nanoid();\n    connector.id = id;\n    this.connectors.set(id, connector);\n    requestAnimationFrame(() => {\n      const connectorEl = connector.querySelector('.connector');\n      const rect = connectorEl.getBoundingClientRect();\n      this.connectorRects[id] = {\n        left:\n          (rect.x - this.viewportOffset.left) / this.camera.zoom -\n          this.camera.pos.x,\n        top:\n          (rect.y - this.viewportOffset.top) / this.camera.zoom -\n          this.camera.pos.y,\n        width: rect.width / this.camera.zoom,\n        height: rect.height / this.camera.zoom,\n      };\n\n      // add to quadtree\n      const qrect = this.connectorRects[id];\n      this.connectorQuadtree.insert({\n        id,\n        x: qrect.left + qrect.width / 2,\n        y: qrect.top + qrect.height / 2,\n      });\n    });\n\n    return id;\n  }\n\n  removeConnector(id: string) {\n    const connector = this.connectors.get(id);\n    if (!connector) return;\n\n    // remove connections\n    connector.connections.forEach(\n      (connection: HTMLLogicFlowConnectionElement) => {\n        const id = connection.id;\n        if (id) this.removeConnection(id);\n      },\n    );\n\n    this.connectors.delete(id);\n    this.connectorQuadtree.remove(id);\n    delete this.connectorRects[id];\n  }\n\n  addConnection(connection: HTMLLogicFlowConnectionElement) {\n    const id = nanoid();\n    connection.id = id;\n    this.connections.set(id, connection);\n    // set data attribute for the context id\n    connection.setAttribute('data-viewport', this.uid);\n\n    return id;\n  }\n\n  removeConnection(id: string) {\n    const connection = this.connections.get(id);\n    if (!connection) return;\n\n    // handle connectors\n    const connectors = connection.connectors;\n    if (connectors.size > 0) {\n      for (const connector of connectors) {\n        const connIndex = connector.connections.indexOf(connection);\n        if (connIndex > -1) {\n          connector.connections.splice(connIndex, 1);\n        }\n        connector.connectingConnector = null;\n        // update quadtree\n      }\n    }\n\n    delete this.connectionRects[id];\n    this.viewportQuadtree.remove(id);\n    this.connections.delete(id);\n    connection.remove();\n  }\n\n  // mutation observer callback\n  // when elements are added or removed from the dom\n  // we need to register or unregister them if they are nodes, connectors or connections\n  viewportMutation(mutations: MutationRecord[]) {\n    if (!mutations.length) return;\n    // happens whenu using bringNodeToFront\n    // - stop the observer from firing\n    // if (!this.registerNode) return;\n    if (this.bringingToFront) {\n      this.bringingToFront = false;\n      return;\n    }\n\n    mutations.forEach(mutation => {\n      if (mutation.type === 'childList') {\n        for (let i = 0; i < mutation.addedNodes.length; i++) {\n          const node = mutation.addedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-FLOW-NODE') {\n              const logicNode = node as HTMLLogicFlowNodeElement;\n              this.addNode(logicNode);\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTOR') {\n              const logicConnector = node as HTMLLogicFlowConnectorElement;\n              this.addConnector(logicConnector);\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTION') {\n              const logicConnection = node as HTMLLogicFlowConnectionElement;\n              this.addConnection(logicConnection);\n            }\n          }\n        }\n\n        for (let i = 0; i < mutation.removedNodes.length; i++) {\n          const node = mutation.removedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-FLOW-NODE') {\n              const logicNode = node as HTMLLogicFlowNodeElement;\n              this.removeNode(logicNode.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTOR') {\n              const logicConnector = node as HTMLLogicFlowConnectorElement;\n              this.removeConnector(logicConnector.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTION') {\n              const logicConnection = node as HTMLLogicFlowConnectionElement;\n              this.removeConnection(logicConnection.getAttribute('id'));\n            }\n          }\n        }\n      }\n    });\n  }\n\n  static initializeViewport(viewport: HTMLLogicFlowViewportElement) {\n    // need to register all nodes, connectors and connections\n    // that are already in the dom\n\n    const id = viewport.id;\n    const instance = ViewContext.instances.get(id);\n\n    const contentEl = viewport.querySelector('.viewport-content');\n    const children = contentEl.children;\n\n    const traverse = (el: HTMLElement) => {\n      if (el.tagName === 'LOGIC-FLOW-NODE') {\n        const logicNode = el as HTMLLogicFlowNodeElement;\n        instance.addNode(logicNode);\n      } else if (el.tagName === 'LOGIC-FLOW-CONNECTOR') {\n        const logicConnector = el as HTMLLogicFlowConnectorElement;\n        instance.addConnector(logicConnector);\n      } else if (el.tagName === 'LOGIC-FLOW-CONNECTION') {\n        const logicConnection = el as HTMLLogicFlowConnectionElement;\n        instance.addConnection(logicConnection);\n      }\n\n      const children = el.children;\n      for (let i = 0; i < children.length; i++) {\n        traverse(children[i] as HTMLElement);\n      }\n    };\n\n    for (let i = 0; i < children.length; i++) {\n      traverse(children[i] as HTMLElement);\n    }\n  }\n\n  bringToFront(node: HTMLElement) {\n    this.bringingToFront = true;\n    node.parentElement?.appendChild(node);\n  }\n\n  static setCursor(cursor: string) {\n    document.body.style.cursor = cursor;\n  }\n\n  static resetCursor() {\n    document.body.style.cursor = 'default';\n  }\n\n  getRectCenter(rect: DOMRect | Rect) {\n    return {\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height / 2,\n    };\n  }\n\n  startPanning(worldCoords: Coords, cursor = 'grabbing') {\n    ViewContext.setCursor(cursor);\n    this.isPanning = true;\n    this.dragStart = worldCoords;\n  }\n\n  panCamera(loc: Coords) {\n    this.camera.pos = {\n      x: loc.x / this.camera.zoom - this.dragStart.x,\n      y: loc.y / this.camera.zoom - this.dragStart.y,\n    };\n\n    this.debouncedUpdateVisibleElements();\n  }\n\n  resetPointerStates() {\n    this.isPanning = false;\n    this.initialPinchDistance = 0;\n    ViewContext.resetCursor();\n  }\n\n  startNodeDrag(\n    target: HTMLLogicFlowNodeElement,\n    worldCoords: Coords,\n    cursor = 'grabbing',\n  ): boolean {\n    if (!target) return false;\n\n    const node = target.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n    if (!node) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeNode = node;\n    this.bringToFront(node);\n\n    const pos = this.activeNode.position;\n    this.activeNodeDragging = true;\n    this.activeNodeDragStart = {\n      x: worldCoords.x - pos.x,\n      y: worldCoords.y - pos.y,\n    };\n\n    return true;\n  }\n\n  updateNodeConnectorPos(aNode: HTMLLogicFlowNodeElement, delta: Coords) {\n    const connectors = aNode.querySelectorAll(\n      'logic-flow-connector',\n    ) as NodeListOf<HTMLLogicFlowConnectorElement>;\n\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      const rect = { ...this.connectorRects[connector.id] };\n      rect.left += delta.x;\n      rect.top += delta.y;\n      this.connectorRects[connector.id] = rect;\n\n      this.updateNodeConnectorConnectionsPos(connector, rect);\n    }\n  }\n\n  updateNodeConnectorConnectionsPos(\n    connector: HTMLLogicFlowConnectorElement,\n    rect: Rect,\n  ) {\n    if (connector.connections.length) {\n      const pos = this.getRectCenter(rect);\n\n      for (let i = 0; i < connector.connections.length; i++) {\n        const connection = connector.connections[i];\n        if (connector.type === 'input') {\n          connection.end = pos;\n        } else {\n          connection.start = pos;\n        }\n      }\n    }\n  }\n\n  calcSnapToGrid(pos: Coords, gridSize: number) {\n    return {\n      x: Math.round(pos.x / gridSize) * gridSize,\n      y: Math.round(pos.y / gridSize) * gridSize,\n    };\n  }\n\n  calcNodePos(worldCoords: Coords) {\n    const pos = {\n      x: worldCoords.x - this.activeNodeDragStart.x,\n      y: worldCoords.y - this.activeNodeDragStart.y,\n    };\n\n    if (!this.snapToGrid) return pos;\n\n    return this.calcSnapToGrid(pos, this.connectorSnapDistance);\n  }\n\n  moveNode(loc: Coords, gridSize: number) {\n    const aNode = this.activeNode;\n    const worldCoords = this.camera.toWorldCoords(loc);\n    const oldPos = aNode.position;\n\n    let newPos = this.calcNodePos(worldCoords);\n\n    // calc new position\n    if (this.snapToGrid) {\n      newPos = this.calcSnapToGrid(newPos, gridSize);\n    }\n\n    const delta = {\n      x: newPos.x - oldPos.x,\n      y: newPos.y - oldPos.y,\n    };\n\n    // update node rect\n    const rect = this.nodeRects[aNode.id];\n    rect.left = newPos.x;\n    rect.top = newPos.y;\n    rect.width = aNode.clientWidth || rect.width;\n    rect.height = aNode.clientHeight || rect.height;\n    this.nodeRects[aNode.id] = rect;\n\n    aNode.position = newPos;\n\n    // update node position and it's connections\n    this.updateNodeConnectorPos(aNode, delta); // ???\n  }\n\n  endNodeDrag() {\n    this.activeNodeDragging = false;\n    this.updateNodeConnectorsQuadtree(this.activeNode);\n\n    const connectors = this.activeNode.querySelectorAll('logic-flow-connector');\n\n    let connections = [];\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i] as HTMLLogicFlowConnectorElement;\n      connections = connections.concat(connector.connections);\n    }\n\n    for (let i = 0; i < connections.length; i++) {\n      const connection = connections[i] as HTMLLogicFlowConnectionElement;\n      const path = connection.querySelector('path');\n      const rect = path.getBoundingClientRect();\n      this.connectionRects[connection.id] = {\n        left:\n          (rect.x - this.viewportOffset.left) / this.camera.zoom -\n          this.camera.pos.x,\n        top:\n          (rect.y - this.viewportOffset.top) / this.camera.zoom -\n          this.camera.pos.y,\n        width: rect.width / this.camera.zoom,\n        height: rect.height / this.camera.zoom,\n      };\n      this.updateViewportQuadtree(connection);\n\n      // use debug div to show connection\n      // const debug = document.getElementById('debug');\n      // const debugRect = this.connectionRects[connection.id];\n      // if (debug) {\n      //   debug.style.left = `${debugRect.left}px`;\n      //   debug.style.top = `${debugRect.top}px`;\n      //   debug.style.width = `${debugRect.width}px`;\n      //   debug.style.height = `${debugRect.height}px`;\n      // }\n    }\n    this.updateViewportQuadtree(this.activeNode);\n\n    this.activeNode = null;\n  }\n\n  createNewConnection(startPos: Coords, type: 'input' | 'output') {\n    const connection = document.createElement(\n      'logic-flow-connection',\n    ) as HTMLLogicFlowConnectionElement;\n    connection.start = startPos;\n    connection.end = startPos;\n    connection.type = type;\n\n    this.activeConnection = connection;\n    this.contentEl.appendChild(connection);\n  }\n\n  moveActiveConnection(loc: Coords, snappingDist: number) {\n    const aConn = this.activeConnection;\n\n    const worldCoords = this.camera.toWorldCoords({\n      x: loc.x - this.viewportOffset.left,\n      y: loc.y - this.viewportOffset.top,\n    });\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappableConnector) {\n      const rect = this.connectorRects[snappableConnector.id];\n      aConn.end = this.getRectCenter(rect);\n    } else {\n      aConn.end = worldCoords;\n    }\n  }\n\n  getTargetConnector(target: HTMLElement, loc: Coords, snappingDist: number) {\n    let targetConnector = target.closest(\n      'logic-flow-connector .connector',\n    ) as HTMLLogicFlowConnectorElement;\n\n    const snappedConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappedConnector) {\n      targetConnector = this.connectors.get(snappedConnector.id);\n    }\n\n    return targetConnector;\n  }\n\n  startNewConnection(\n    target: HTMLLogicFlowConnectorElement,\n    cursor = 'grabbing',\n  ) {\n    if (!target) return false;\n\n    const connEl = target.closest(\n      'logic-flow-connector .connector',\n    ) as HTMLLogicFlowConnectorElement;\n    if (!connEl) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnector = connEl;\n\n    const parentConn = connEl.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n    const rect = this.connectorRects[parentConn.id];\n    const center = this.getRectCenter(rect);\n\n    this.createNewConnection(center, parentConn.type);\n\n    return true;\n  }\n\n  processConnection(target: HTMLLogicFlowConnectorElement) {\n    const aConn = this.activeConnector.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n    const tConn = target.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n\n    // find parent nodes\n    const aNode = aConn.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n    const tNode = tConn.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n\n    // validate connection\n    if (!this.isValidConnection(aConn, tConn, aNode, tNode, target)) {\n      this.activeConnection.remove();\n      // remove from rects\n      delete this.connectionRects[this.activeConnection.id];\n      return;\n    }\n\n    // if connector has a onConnection callback\n    // call it. If it returns false, cancel the connection\n    const connection = this.activeConnection;\n    if (target.onConnection) {\n      target.onConnection(aConn).then(result => {\n        if (result === false) {\n          // destroy connection\n          connection.remove();\n          // remove from rects\n          delete this.connectionRects[connection.id];\n        }\n      });\n    }\n\n    // if connected to an input connector\n    // call the onConnection callback\n    if (aConn.type === 'input' && aConn.onConnection) {\n      aConn.onConnection(tConn).then(result => {\n        if (result === false) {\n          // destroy connection\n          connection.remove();\n          // remove from rects\n          delete this.connectionRects[connection.id];\n        }\n      });\n    }\n\n    this.updateConnectionEndpoints(aConn, tConn);\n    this.finalizeConnection(aConn, tConn);\n\n    // update rect\n    const path = this.activeConnection.querySelector('path');\n    const rect = path.getBoundingClientRect();\n    this.connectionRects[this.activeConnection.id] = {\n      left:\n        (rect.x - this.viewportOffset.left) / this.camera.zoom -\n        this.camera.pos.x,\n      top:\n        (rect.y - this.viewportOffset.top) / this.camera.zoom -\n        this.camera.pos.y,\n      width: rect.width / this.camera.zoom,\n      height: rect.height / this.camera.zoom,\n    };\n\n    // use debug div to show connection\n    // const debug = document.getElementById('debug');\n    // const debugRect = this.connectionRects[this.activeConnection.id];\n    // if (debug) {\n    //   debug.style.left = `${debugRect.left}px`;\n    //   debug.style.top = `${debugRect.top}px`;\n    //   debug.style.width = `${debugRect.width}px`;\n    //   debug.style.height = `${debugRect.height}px`;\n    // }\n\n    // update quadtree\n    this.updateViewportQuadtree(this.activeConnection);\n  }\n\n  isValidConnection(\n    aConn: HTMLLogicFlowConnectorElement,\n    tConn: HTMLLogicFlowConnectorElement,\n    aNode: HTMLLogicFlowNodeElement,\n    tNode: HTMLLogicFlowNodeElement,\n    targetConn: HTMLLogicFlowConnectorElement,\n  ) {\n    // avoid connecting to self or already connected\n    if (\n      this.activeConnector.connectingConnector === tConn ||\n      tConn.connectingConnector === aConn\n    ) {\n      // perhaps send an error event\n      // console.log('already connected');\n      return false;\n    }\n\n    if (aNode === tNode || this.activeConnector === targetConn) {\n      // connecting to self\n      return false;\n    }\n\n    // ensure is between input/output not same type\n    if (aConn.type === tConn.type) {\n      // console.log('same type');\n      return false;\n    }\n\n    return true;\n  }\n\n  updateConnectionEndpoints(\n    active: HTMLLogicFlowConnectorElement,\n    target: HTMLLogicFlowConnectorElement,\n  ) {\n    const targRect = this.connectorRects[target.id];\n\n    if (active.type === 'input') {\n      // swap start and end connections\n      this.activeConnection.start = this.getRectCenter(targRect);\n      this.activeConnection.end = this.activeConnectorStartPos;\n      this.activeConnection.type = 'output';\n\n      const rect = this.connectorRects[active.id];\n      this.activeConnection.end = this.getRectCenter(rect);\n    } else {\n      this.activeConnection.end = this.getRectCenter(targRect);\n    }\n  }\n\n  finalizeConnection(\n    active: HTMLLogicFlowConnectorElement,\n    target: HTMLLogicFlowConnectorElement,\n  ) {\n    active.connectingConnector = target;\n    active.connections.push(this.activeConnection);\n    target.connectingConnector = active;\n    target.connections.push(this.activeConnection);\n\n    this.activeConnection.connectors.clear();\n    this.activeConnection.connectors.add(active);\n    this.activeConnection.connectors.add(target);\n  }\n\n  startDisconnectConnection(\n    target: HTMLLogicFlowConnectionElement,\n    loc: Coords,\n    snappingDist: number,\n    cursor = 'grabbing',\n  ) {\n    if (!target) return false;\n\n    const connection = target.closest(\n      'logic-flow-connection',\n    ) as HTMLLogicFlowConnectionElement;\n    if (!connection) return false;\n\n    this.bringToFront(connection);\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (!snappableConnector) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnection = connection;\n\n    const snapConnector = this.connectors.get(snappableConnector.id);\n    this.activeConnector =\n      snapConnector.connectingConnector as HTMLLogicFlowConnectorElement;\n\n    this.disconnectConnector(\n      this.activeConnection,\n      this.activeConnector,\n      snapConnector,\n    );\n\n    // handle type specific logic\n    if (this.activeConnector.type === 'input') {\n      this.swapConnectionEndpoints(this.activeConnection);\n      this.activeConnection.type = 'input';\n    }\n\n    return true;\n  }\n\n  disconnectConnector(\n    connection: HTMLLogicFlowConnectionElement,\n    connector: HTMLLogicFlowConnectorElement,\n    snapConnector: HTMLLogicFlowConnectorElement,\n  ) {\n    connector.connections = connector.connections.filter(c => c !== connection);\n    snapConnector.connections = snapConnector.connections.filter(\n      c => c !== connection,\n    );\n\n    // just like onConnection, call onDisconnection if it exists\n    if (connector.onDisconnection) {\n      connector.onDisconnection(snapConnector);\n    }\n\n    // just like onConnection, if the other connector has an onDisconnection callback\n    // call it\n    if (snapConnector.onDisconnection) {\n      snapConnector.onDisconnection(connector);\n    }\n\n    // connection.connectors.forEach(connector => {\n    //   if (connector.onDisconnection) {\n    //     connector.onDisconnection(snapConnector);\n    //   }\n    // });\n\n    connector.connectingConnector = null;\n    snapConnector.connectingConnector = null;\n  }\n\n  swapConnectionEndpoints(connection: HTMLLogicFlowConnectionElement) {\n    const { start, end } = connection;\n    connection.start = end;\n    connection.end = start;\n  }\n\n  updateNodeConnectorsQuadtree(node: HTMLLogicFlowNodeElement) {\n    const connectors = node.querySelectorAll(\n      'logic-flow-connector',\n    ) as NodeListOf<HTMLLogicFlowConnectorElement>;\n\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      let rect = this.connectorRects[connector.id];\n      if (!rect) {\n        console.log('no rect');\n        let connectorEl = connector.querySelector('.connector');\n\n        const r = connectorEl.getBoundingClientRect();\n        this.connectorRects[connector.id] = {\n          left: r.x,\n          top: r.y,\n          width: r.width,\n          height: r.height,\n        };\n        rect = this.connectorRects[connector.id];\n      }\n\n      this.connectorQuadtree.remove(connector.id);\n      this.connectorQuadtree.insert({\n        id: connector.id,\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height / 2,\n      });\n    }\n  }\n\n  updateViewportQuadtree(\n    entity: HTMLLogicFlowNodeElement | HTMLLogicFlowConnectionElement,\n  ) {\n    if (entity.tagName === 'LOGIC-FLOW-NODE') {\n      const rect = this.nodeRects[entity.id];\n\n      this.viewportQuadtree.remove(entity.id);\n\n      this.viewportQuadtree.insert({\n        id: entity.id,\n        top: rect.top,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n      });\n    } else if (entity.tagName === 'LOGIC-FLOW-CONNECTION') {\n      const rect = this.connectionRects[entity.id];\n\n      this.viewportQuadtree.remove(entity.id);\n\n      this.viewportQuadtree.insert({\n        id: entity.id,\n        top: rect.top,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n      });\n    }\n  }\n\n  updateVisibleElements() {\n    // Get visible nodes within the viewport quadtree\n    let rect = this.viewportRect;\n    rect = {\n      left: rect.left,\n      top: rect.top,\n      width: rect.width,\n      height: rect.height,\n    };\n\n    const visibleEntities = this.viewportQuadtree.query(\n      rect,\n      [],\n      this.camera.pos,\n      this.camera.zoom,\n    );\n\n    const newVisibleElements = visibleEntities.map((entity: any) => entity.id);\n    // console.log('newVisibleElements', newVisibleElements);\n\n    const allItems = new Set([\n      ...this.prevVisibleElements,\n      ...newVisibleElements,\n    ]);\n\n    // Update the previous visible elements\n    this.prevVisibleElements = newVisibleElements;\n\n    // Update elements that changed visibility\n    for (const id of allItems) {\n      const el = document.getElementById(id);\n      if (el) {\n        const entityComponent = el as\n          | HTMLLogicFlowNodeElement\n          | HTMLLogicFlowConnectionElement;\n        const curstate = entityComponent.isVisible;\n        const prevState = this.prevVisibleElements.includes(id);\n        const newstate = newVisibleElements.includes(id);\n        if (prevState === curstate && newstate === curstate) {\n          continue;\n        }\n\n        entityComponent.isVisible = newVisibleElements.includes(id);\n      }\n    }\n  }\n}\n","import { Camera } from '../types/Camera';\n\nexport const renderCanvasGrid = (\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  gridSize: number,\n  color: string,\n  bgColor: string,\n  camera: Camera,\n) => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n\n  let step = gridSize * camera.zoom;\n\n  // if the step is too small because of zoom, increase it by a factor of 10\n  if (step < 10) {\n    step *= 2;\n  }\n\n  // const dpr = window.devicePixelRatio || 1;\n  // canvas.width = width * dpr;\n  // canvas.height = height * dpr;\n  // ctx.scale(dpr, dpr);\n\n  // canvas.width = width;\n  // canvas.height = height;\n\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n\n  //clear\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(0, 0, width, height);\n\n  const offsetX = (-camera.pos.x % gridSize) * camera.zoom;\n  const offsetY = (-camera.pos.y % gridSize) * camera.zoom;\n\n  ctx.beginPath();\n\n  for (let x = -offsetX; x < width; x += step) {\n    ctx.moveTo(x, 0);\n    ctx.lineTo(x, height);\n  }\n\n  for (let y = -offsetY; y < height; y += step) {\n    ctx.moveTo(0, y);\n    ctx.lineTo(width, y);\n  }\n\n  ctx.stroke();\n};\n\nexport const renderCanvasDotGrid = (\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  gridSize: number,\n  color: string,\n  bgColor: string,\n  camera: Camera,\n) => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n\n  let step = gridSize * camera.zoom;\n\n  // if the step is too small because of zoom, increase it by a factor of 10\n  if (step < 10) {\n    step *= 2;\n  }\n\n  // const dpr = window.devicePixelRatio || 1;\n  // canvas.width = width * dpr;\n  // canvas.height = height * dpr;\n  // ctx.scale(dpr, dpr);\n\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n\n  //clear\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(0, 0, width, height);\n\n  const offsetX = (-camera.pos.x % gridSize) * camera.zoom;\n  const offsetY = (-camera.pos.y % gridSize) * camera.zoom;\n\n  ctx.beginPath();\n\n  // for (let x = -offsetX; x < width; x += step) {\n  //   for (let y = -offsetY; y < height; y += step) {\n  //     ctx.moveTo(x, y);\n  //     ctx.arc(x, y, 1, 0, 2 * Math.PI);\n  //   }\n  // }\n\n  ctx.fillStyle = color;\n\n  for (let x = -offsetX; x < width; x += step) {\n    for (let y = -offsetY; y < height; y += step) {\n      //  ctx.moveTo(x, y);\n      //  ctx.arc(x, y, 1, 0, 2 * Math.PI);\n      // use fill rect\n      ctx.fillRect(x - 1, y - 1, 2, 2);\n    }\n  }\n\n  ctx.stroke();\n};\n",":host {\n  display: block;\n}\n","import { Component, Prop, h, Element, Watch, Method } from '@stencil/core';\nimport { debounce } from '../../utils/debounce';\nimport { throttle } from '../../utils/throttle';\nimport { getEventLocation } from '../../utils/getEventLocation';\nimport { ViewContext } from '../../types/ViewContext';\nimport {\n  renderCanvasDotGrid,\n  renderCanvasGrid,\n} from '../../utils/renderCanvasGrid';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-viewport',\n  styleUrl: 'logic-flow-viewport.css',\n  shadow: false,\n})\nexport class LogicFlowViewport {\n  @Element() el: HTMLLogicFlowViewportElement;\n\n  @Prop() showGrid: boolean = true;\n  @Prop() gridType: 'line' | 'dot' = 'line';\n  @Prop() gridSize: number = 20;\n  @Prop() gridBgColor: string = '#f7f7f7';\n  @Prop() gridLineColor: string = '#555555';\n  @Prop() maxZoom: number = 3;\n  @Prop() minZoom: number = 0.2;\n  @Prop() zoomSpeed: number = 0.08;\n  @Prop() snapToGrid: boolean = false;\n  @Prop() connectorSnappingDistance: number = 37;\n  @Prop() cursors: Record<string, string> = {\n    default: 'auto',\n    panning: 'grabbing',\n    moving: 'grabbing',\n  };\n\n  ctx: ViewContext;\n\n  resizeObserver: ResizeObserver;\n  debouncedResize = debounce(() => this.onResize(), 16);\n  debouncedUpdateScreen = debounce(() => this.updateScreen(), 1);\n  debouncedUpdateViewportRect = debounce(\n    () => this.ctx.updateViewportRect(),\n    100,\n  );\n  throttledTouchMove = throttle(e => this.handleTouchMove(e), 1);\n  forceContentReflowDebounced = debounce(() => this.forceContentReflow(), 30);\n\n  elMouseDown = (e: MouseEvent | TouchEvent) => this.onPointerDown(e);\n  elMouseUp = (e: MouseEvent | TouchEvent) => this.onPointerUp(e);\n  elMouseMove = (e: MouseEvent | TouchEvent) => this.onPointerMove(e);\n\n  elTouchStart = (e: TouchEvent) => this.handleTouchStart(e);\n  elTouchMove = (e: TouchEvent) => this.throttledTouchMove(e);\n  elTouchEnd = (e: MouseEvent | TouchEvent) => this.onPointerUp(e);\n\n  elWheel = (e: WheelEvent) => this.handleWheel(e);\n\n  elScroll = () => this.debouncedUpdateViewportRect();\n\n  elKeyPress = (e: KeyboardEvent) => this.onKeyPress(e);\n\n  componentDidLoad() {\n    this.ctx = new ViewContext(this.el);\n    // this.ctx.camera = this.ctx.camera;\n\n    this.ctx.viewportEl = this.el.querySelector(\n      '.logic-flow-viewport',\n    ) as HTMLDivElement;\n    this.ctx.contentEl = this.el.querySelector(\n      '.viewport-content',\n    ) as HTMLDivElement;\n    this.ctx.gridEl = this.el.querySelector(\n      '.logic-flow-grid',\n    ) as HTMLCanvasElement;\n    // this.ctx.viewportRect = this.ctx.viewportEl.getBoundingClientRect();\n    this.ctx.initialPinchDistance = 0;\n    this.ctx.snapToGrid = this.snapToGrid;\n    this.ctx.connectorSnapDistance = this.connectorSnappingDistance;\n\n    const viewportEl = this.ctx.viewportEl;\n\n    // setup event listeners\n    window.addEventListener('mousedown', this.elMouseDown, {\n      passive: true,\n    });\n    viewportEl.addEventListener('mouseup', this.elMouseUp, { passive: true });\n    viewportEl.addEventListener('mousemove', this.elMouseMove, {\n      passive: true,\n    });\n\n    viewportEl.addEventListener('touchstart', this.elTouchStart, {\n      passive: false,\n    });\n    viewportEl.addEventListener('touchmove', this.elTouchMove, {\n      passive: false,\n    });\n    viewportEl.addEventListener('touchend', this.elTouchEnd, { passive: true });\n\n    viewportEl.addEventListener('wheel', this.elWheel, { passive: false });\n\n    window.addEventListener('scroll', this.elScroll, { passive: true });\n\n    window.addEventListener('keydown', this.elKeyPress, { passive: true });\n\n    // Handle resize events\n    this.resizeObserver = new ResizeObserver(() => this.debouncedResize());\n    this.resizeObserver.observe(this.ctx.viewportEl);\n\n    this.renderGrid();\n  }\n\n  disconnectedCallback() {\n    // Clean up resize observer\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n\n    // Clean up event listeners\n    const canvasEl = this.ctx.viewportEl;\n    window.removeEventListener('mousedown', this.elMouseDown);\n    canvasEl.removeEventListener('mouseup', this.elMouseUp);\n    canvasEl.removeEventListener('mousemove', this.elMouseMove);\n\n    canvasEl.removeEventListener('touchstart', this.elTouchStart);\n    canvasEl.removeEventListener('touchmove', this.elTouchMove);\n    canvasEl.removeEventListener('touchend', this.elTouchEnd);\n\n    canvasEl.removeEventListener('wheel', this.elWheel);\n\n    window.removeEventListener('scroll', this.elScroll);\n\n    window.removeEventListener('keydown', this.elKeyPress);\n\n    this.ctx.destroy();\n  }\n\n  @Method()\n  async getContext() {\n    return this.ctx;\n  }\n\n  @Method()\n  async screenToWorldCoords(screenCoords: Coords) {\n    // adjust screen coords to viewport offset\n    const loc = {\n      x: screenCoords.x - this.ctx.viewportOffset.left,\n      y: screenCoords.y - this.ctx.viewportOffset.top,\n    };\n\n    return this.ctx.camera.toWorldCoords(loc);\n  }\n\n  @Watch('snapToGrid')\n  onSnapToGridChange() {\n    this.ctx.snapToGrid = this.snapToGrid;\n  }\n\n  @Watch('gridType')\n  onGridTypeChange() {\n    this.ctx.needsRedraw = true;\n    this.renderGrid();\n  }\n\n  scheduleComponentUpdate() {\n    this.ctx.needsRedraw = true;\n    this.ctx.debouncedUpdateVisibleElements();\n    this.debouncedUpdateScreen();\n  }\n\n  onResize() {\n    // console.log('onResize');\n    this.ctx.needsRedraw = true;\n    this.ctx.viewportRect = this.ctx.viewportEl.getBoundingClientRect();\n\n    this.ctx.gridEl.width = this.ctx.viewportRect.width;\n    this.ctx.gridEl.height = this.ctx.viewportRect.height;\n\n    this.ctx.viewportOffset = {\n      top: this.ctx.viewportRect.top,\n      left: this.ctx.viewportRect.left,\n    };\n\n    // update quadtree boundary\n    const boundary = {\n      left: this.ctx.viewportRect.left - this.ctx.viewportRect.left,\n      top: this.ctx.viewportRect.top - this.ctx.viewportRect.top,\n      width: this.ctx.viewportRect.width,\n      height: this.ctx.viewportRect.height,\n    };\n\n    // get set viewport rect\n    this.ctx.viewportRect = boundary;\n\n    // this.ctx.connectorQuadtree.boundary = this.ctx.viewportRect;\n    this.ctx.viewportQuadtree.boundary = this.ctx.viewportRect;\n\n    this.renderGrid();\n  }\n\n  renderGrid() {\n    if (!this.showGrid || !this.ctx.needsRedraw) return;\n\n    requestAnimationFrame(() => {\n      if (this.gridType === 'line') {\n        renderCanvasGrid(\n          this.ctx.gridEl,\n          this.ctx.viewportRect.width,\n          this.ctx.viewportRect.height,\n          this.gridSize,\n          this.gridLineColor,\n          this.gridBgColor,\n          this.ctx.camera,\n        );\n      }\n\n      if (this.gridType === 'dot') {\n        renderCanvasDotGrid(\n          this.ctx.gridEl,\n          this.ctx.viewportRect.width,\n          this.ctx.viewportRect.height,\n          this.gridSize,\n          this.gridLineColor,\n          this.gridBgColor,\n          this.ctx.camera,\n        );\n      }\n    });\n\n    this.ctx.needsRedraw = false;\n  }\n\n  updateScreen() {\n    requestAnimationFrame(() => {\n      const contentEl = this.ctx.contentEl;\n      // Apply transformations to the content, aligning with the grid\n      contentEl.style.transform = `perspective(1px) scale(${this.ctx.camera.zoom}) translate(${this.ctx.camera.pos.x}px, ${this.ctx.camera.pos.y}px)`;\n      this.renderGrid();\n    });\n  }\n\n  onKeyPress(event: KeyboardEvent) {\n    // if delete key pressed\n    // check if node or connection is current focused\n    // if so, delete it\n\n    if (event.key === 'Delete') {\n      const target = document.activeElement as HTMLElement;\n\n      if (target.tagName === 'LOGIC-FLOW-NODE') {\n        // this.ctx.removeNode(target.id);\n        // remove from dom\n        target.remove();\n      } else if (target.closest('logic-flow-connection')) {\n        // this.ctx.removeConnection(target.id);\n        // remove from dom\n        // target.remove();\n        const connection = target.closest('logic-flow-connection');\n        connection.remove();\n      }\n    }\n  }\n\n  onPointerDown(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n    const worldCoords = this.ctx.camera.toWorldCoords(loc);\n    const target = document.elementFromPoint(loc.x, loc.y) as HTMLElement;\n\n    // if pointer outside viewport, return\n    if (\n      loc.x > this.ctx.viewportOffset.left + this.ctx.viewportRect.width ||\n      loc.x < this.ctx.viewportOffset.left ||\n      loc.y > this.ctx.viewportOffset.top + this.ctx.viewportRect.height ||\n      loc.y < this.ctx.viewportOffset.top\n    ) {\n      return;\n    }\n\n    // if target is not a logic-flow element, return\n    if (\n      !target ||\n      !target.closest(\n        'logic-flow-node, logic-flow-connector, logic-flow-connection, logic-flow-viewport',\n      )\n    ) {\n      return;\n    }\n\n    // if a connection clicked\n    if (\n      this.ctx.startDisconnectConnection(\n        target as HTMLLogicFlowConnectionElement,\n        loc,\n        this.connectorSnappingDistance,\n        this.cursors.moving,\n      )\n    )\n      return;\n\n    // if a connector clicked\n    if (this.ctx.startNewConnection(target as HTMLLogicFlowConnectorElement))\n      return;\n\n    // if a node clicked\n    if (this.ctx.startNodeDrag(target as HTMLLogicFlowNodeElement, worldCoords))\n      return;\n\n    // if nothing clicked, then start panning\n    this.ctx.startPanning(worldCoords);\n  }\n\n  onPointerUp(event: MouseEvent | TouchEvent) {\n    if (this.ctx.activeConnector && this.ctx.activeConnection) {\n      this.onEndActiveConnection(event);\n    } else if (this.ctx.activeNode && this.ctx.activeNodeDragging) {\n      this.ctx.endNodeDrag();\n    }\n\n    this.ctx.resetPointerStates();\n  }\n\n  onEndActiveConnection(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n    let target = event.target as HTMLElement;\n\n    // For touch events, get the element at the touch point\n    if (event instanceof TouchEvent) {\n      target = document.elementFromPoint(loc.x, loc.y) as HTMLElement;\n    }\n\n    let targetConnector = this.ctx.getTargetConnector(\n      target,\n      loc,\n      this.connectorSnappingDistance,\n    );\n\n    if (targetConnector) {\n      this.ctx.processConnection(targetConnector);\n    } else {\n      this.ctx.activeConnection.remove();\n    }\n\n    // clear active states\n    this.ctx.activeConnector = null;\n    this.ctx.activeConnection = null;\n  }\n\n  onPointerMove(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n\n    if (this.ctx.activeConnector && this.ctx.activeConnection) {\n      this.ctx.moveActiveConnection(loc, this.connectorSnappingDistance);\n    } else if (this.ctx.activeNode && this.ctx.activeNodeDragging) {\n      this.ctx.moveNode(loc, this.gridSize);\n    } else if (this.ctx.isPanning) {\n      this.ctx.panCamera(loc);\n      this.scheduleComponentUpdate();\n    }\n  }\n\n  handleWheel(event: WheelEvent) {\n    event.preventDefault();\n\n    const canvasRect = this.ctx.viewportRect;\n    const mouseX =\n      event.clientX - canvasRect.left - this.ctx.viewportOffset.left;\n    const mouseY = event.clientY - canvasRect.top - this.ctx.viewportOffset.top;\n\n    // Calculate the zoom level change\n    const zoomDelta = event.deltaY < 0 ? this.zoomSpeed : -this.zoomSpeed;\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.ctx.camera.zoom + zoomDelta),\n    );\n\n    // Calculate the scale factor\n    const scaleFactor = newZoom / this.ctx.camera.zoom;\n\n    // Adjust the pan position to keep the same point under the cursor\n    const newPanX =\n      mouseX -\n      (mouseX - this.ctx.camera.pos.x * this.ctx.camera.zoom) * scaleFactor;\n\n    const newPanY =\n      mouseY -\n      (mouseY - this.ctx.camera.pos.y * this.ctx.camera.zoom) * scaleFactor;\n\n    // Update pan and zoom\n    this.ctx.camera.pos = { x: newPanX / newZoom, y: newPanY / newZoom };\n\n    // this.lastZoom = this.ctx.camera.zoom;\n    this.ctx.camera.zoom = newZoom;\n\n    // if zooming in, force a reflow to prevent blurry text\n    if (zoomDelta > 0) {\n      this.forceContentReflowDebounced();\n    }\n\n    // this.ctx.needsRedraw = true;\n    this.scheduleComponentUpdate();\n  }\n\n  handleTouchStart(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> start panning\n      this.onPointerDown(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> start pinch zoom\n      this.ctx.initialPinchDistance = 0; // Reset initial pinch distance\n      this.handlePinch(event); // Start pinch gesture\n    }\n  }\n\n  handleTouchMove(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> panning\n      this.onPointerMove(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> pinch zooming\n      this.handlePinch(event);\n    }\n  }\n\n  handlePinch(event: TouchEvent) {\n    if (event.touches.length !== 2) return;\n\n    // handle panning while pinching\n    this.onPointerMove(event);\n\n    event.preventDefault(); // Prevent default behavior like scrolling\n\n    const touch1 = event.touches[0];\n    const touch2 = event.touches[1];\n\n    // Calculate the distance between the two touch points (pinch)\n    const distance = Math.sqrt(\n      (touch1.clientX - touch2.clientX) ** 2 +\n        (touch1.clientY - touch2.clientY) ** 2,\n    );\n\n    if (this.ctx.initialPinchDistance === 0) {\n      // If it's the start of the pinch, initialize the pinch distance\n      this.ctx.initialPinchDistance = distance;\n    } else {\n      // Calculate the scale factor based on the distance change\n      const scaleFactor = distance / this.ctx.initialPinchDistance;\n\n      // Calculate the midpoint between the two fingers (the pinch center)\n      const pinchCenterX = (touch1.clientX + touch2.clientX) / 2;\n      const pinchCenterY = (touch1.clientY + touch2.clientY) / 2;\n\n      // Apply zoom and keep the pinch center fixed\n      this.adjustZoomOnPinch(scaleFactor, pinchCenterX, pinchCenterY);\n\n      // Update the initial pinch distance for the next move\n      this.ctx.initialPinchDistance = distance;\n    }\n  }\n\n  adjustZoomOnPinch(\n    scaleFactor: number,\n    pinchCenterX: number,\n    pinchCenterY: number,\n  ) {\n    // Calculate new zoom, ensuring it stays within min/max bounds\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.ctx.camera.zoom * scaleFactor),\n    );\n\n    // Find the pinch center position relative to the content's current position and zoom\n    const pinchContentX =\n      (pinchCenterX - this.ctx.camera.pos.x * this.ctx.camera.zoom) /\n      this.ctx.camera.zoom;\n    const pinchContentY =\n      (pinchCenterY - this.ctx.camera.pos.y * this.ctx.camera.zoom) /\n      this.ctx.camera.zoom;\n\n    // Adjust pan so the pinch center stays fixed after zooming\n    this.ctx.camera.pos = {\n      x: pinchCenterX / newZoom - pinchContentX,\n      y: pinchCenterY / newZoom - pinchContentY,\n    };\n\n    // Apply the new zoom level\n    this.ctx.camera.zoom = newZoom;\n\n    // if zooming in, force a reflow to prevent blurry text\n    if (scaleFactor > 1) {\n      this.forceContentReflowDebounced();\n    }\n\n    // Trigger a screen redraw\n    this.debouncedUpdateScreen();\n  }\n\n  forceContentReflow() {\n    // force repaint the content\n    const cdisplay = this.ctx.contentEl.style.display;\n    this.ctx.contentEl.style.display = 'none';\n    this.ctx.contentEl.offsetHeight; // trigger reflow\n    this.ctx.contentEl.style.display = cdisplay;\n  }\n\n  render() {\n    return (\n      <div class=\"logic-flow-viewport\">\n        <canvas\n          class=\"logic-flow-grid\"\n          style={{ display: this.showGrid ? 'block' : 'none' }}\n        ></canvas>\n        <div class=\"viewport-content\">\n          <slot></slot>\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}