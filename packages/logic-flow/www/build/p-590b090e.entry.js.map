{"version":3,"names":["logicFlowConnectionCss","LogicFlowConnectionStyle0","LogicFlowConnection","this","_capRadius","style","x","y","Set","componentWillLoad","connector","document","querySelector","getComputedStyle","parseInt","width","updatePath","delta","end","start","distance","Math","sqrt","controlOffset","min","capOffset","type","startInset","endInset","path","componentWillRender","isVisible","display","render","h","Host","key","class","d","tabindex","cx","cy","r"],"sources":["src/components/logic-flow-connection/logic-flow-connection.css?tag=logic-flow-connection","src/components/logic-flow-connection/logic-flow-connection.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, Watch, h } from '@stencil/core';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-connection',\n  styleUrl: 'logic-flow-connection.css',\n  shadow: false,\n})\nexport class LogicFlowConnection {\n  @Prop() start: Coords = { x: 0, y: 0 };\n  @Prop() end: Coords = { x: 0, y: 0 };\n  @Prop() type: 'input' | 'output' = 'input';\n  @Prop({ mutable: true }) isVisible: boolean = true;\n  // @Prop() connectors: HTMLLogicFlowConnectorElement[] = [];\n  // connectors Set\n  @Prop() connectors: Set<HTMLLogicFlowConnectorElement> = new Set();\n\n  path: string;\n  private _capRadius = 5;\n  style = {};\n\n  componentWillLoad() {\n    // calculate cap width based on connector size\n    // grab a .connector element from the dom\n    const connector = document.querySelector('.connector');\n    if (connector) {\n      // get size from css\n      const style = getComputedStyle(connector);\n      this._capRadius = parseInt(style.width) / 2;\n    }\n  }\n\n  @Watch('start')\n  @Watch('end')\n  @Watch('type')\n  updatePath() {\n    const delta = {\n      x: this.end.x - this.start.x,\n      y: this.end.y - this.start.y,\n    };\n    const distance = Math.sqrt(delta.x ** 2 + delta.y ** 2);\n    const controlOffset = Math.min(100, distance * 0.35);\n    const capOffset = this._capRadius;\n\n    // Generate the path based on type\n    if (this.type === 'output') {\n      // Calculate start and end points for the path\n      const startInset = {\n        x: this.start.x + capOffset - 1,\n        y: this.start.y,\n      };\n      const endInset = {\n        x: this.end.x - capOffset + 1,\n        y: this.end.y,\n      };\n\n      this.path = `M ${startInset.x},${startInset.y}\n          C ${startInset.x + controlOffset},${startInset.y}\n            ${endInset.x - controlOffset},${endInset.y}\n            ${endInset.x},${endInset.y}`;\n    } else {\n      // Calculate start and end points for the path\n      const startInset = {\n        x: this.start.x - capOffset + 1,\n        y: this.start.y,\n      };\n      const endInset = {\n        x: this.end.x + capOffset - 1,\n        y: this.end.y,\n      };\n\n      this.path = `M ${startInset.x},${startInset.y}\n          C ${startInset.x - controlOffset},${startInset.y}\n            ${endInset.x + controlOffset},${endInset.y}\n            ${endInset.x},${endInset.y}`;\n    }\n  }\n\n  componentWillRender() {\n    if (!this.isVisible) {\n      this.style = { display: 'none' };\n    } else {\n      this.style = {};\n    }\n  }\n\n  render() {\n    // console.log('render', this.isVisible);\n    return (\n      <Host class=\"logic-flow-connection\" style={this.style}>\n        <svg class=\"connection\">\n          <path class=\"connection-line\" d={this.path} tabindex={0}></path>\n          {/* Start cap */}\n          <circle\n            cx={this.start.x}\n            cy={this.start.y}\n            r=\"1.5px\"\n            class=\"connection-cap start-cap\"\n          />\n          {/* End cap */}\n          <circle\n            cx={this.end.x}\n            cy={this.end.y}\n            r=\"1.5px\"\n            class=\"connection-cap end-cap\"\n          />\n        </svg>\n      </Host>\n    );\n  }\n}\n"],"mappings":"kDAAA,MAAMA,EAAyB,uBAC/B,MAAAC,EAAeD,E,MCOFE,EAAmB,M,yBAUtBC,KAAAC,WAAa,EACrBD,KAAAE,MAAQ,G,WAVgB,CAAEC,EAAG,EAAGC,EAAG,G,SACb,CAAED,EAAG,EAAGC,EAAG,G,UACE,Q,eACW,K,gBAGW,IAAIC,G,CAM7D,iBAAAC,GAGE,MAAMC,EAAYC,SAASC,cAAc,cACzC,GAAIF,EAAW,CAEb,MAAML,EAAQQ,iBAAiBH,GAC/BP,KAAKC,WAAaU,SAAST,EAAMU,OAAS,C,EAO9C,UAAAC,GACE,MAAMC,EAAQ,CACZX,EAAGH,KAAKe,IAAIZ,EAAIH,KAAKgB,MAAMb,EAC3BC,EAAGJ,KAAKe,IAAIX,EAAIJ,KAAKgB,MAAMZ,GAE7B,MAAMa,EAAWC,KAAKC,KAAKL,EAAMX,GAAK,EAAIW,EAAMV,GAAK,GACrD,MAAMgB,EAAgBF,KAAKG,IAAI,IAAKJ,EAAW,KAC/C,MAAMK,EAAYtB,KAAKC,WAGvB,GAAID,KAAKuB,OAAS,SAAU,CAE1B,MAAMC,EAAa,CACjBrB,EAAGH,KAAKgB,MAAMb,EAAImB,EAAY,EAC9BlB,EAAGJ,KAAKgB,MAAMZ,GAEhB,MAAMqB,EAAW,CACftB,EAAGH,KAAKe,IAAIZ,EAAImB,EAAY,EAC5BlB,EAAGJ,KAAKe,IAAIX,GAGdJ,KAAK0B,KAAO,KAAKF,EAAWrB,KAAKqB,EAAWpB,kBACpCoB,EAAWrB,EAAIiB,KAAiBI,EAAWpB,kBAC3CqB,EAAStB,EAAIiB,KAAiBK,EAASrB,kBACvCqB,EAAStB,KAAKsB,EAASrB,G,KAC1B,CAEL,MAAMoB,EAAa,CACjBrB,EAAGH,KAAKgB,MAAMb,EAAImB,EAAY,EAC9BlB,EAAGJ,KAAKgB,MAAMZ,GAEhB,MAAMqB,EAAW,CACftB,EAAGH,KAAKe,IAAIZ,EAAImB,EAAY,EAC5BlB,EAAGJ,KAAKe,IAAIX,GAGdJ,KAAK0B,KAAO,KAAKF,EAAWrB,KAAKqB,EAAWpB,kBACpCoB,EAAWrB,EAAIiB,KAAiBI,EAAWpB,kBAC3CqB,EAAStB,EAAIiB,KAAiBK,EAASrB,kBACvCqB,EAAStB,KAAKsB,EAASrB,G,EAInC,mBAAAuB,GACE,IAAK3B,KAAK4B,UAAW,CACnB5B,KAAKE,MAAQ,CAAE2B,QAAS,O,KACnB,CACL7B,KAAKE,MAAQ,E,EAIjB,MAAA4B,GAEE,OACEC,EAACC,EAAI,CAAAC,IAAA,2CAACC,MAAM,wBAAwBhC,MAAOF,KAAKE,OAC9C6B,EAAA,OAAAE,IAAA,2CAAKC,MAAM,cACTH,EAAA,QAAAE,IAAA,2CAAMC,MAAM,kBAAkBC,EAAGnC,KAAK0B,KAAMU,SAAU,IAEtDL,EAAA,UAAAE,IAAA,2CACEI,GAAIrC,KAAKgB,MAAMb,EACfmC,GAAItC,KAAKgB,MAAMZ,EACfmC,EAAE,QACFL,MAAM,6BAGRH,EAAA,UAAAE,IAAA,2CACEI,GAAIrC,KAAKe,IAAIZ,EACbmC,GAAItC,KAAKe,IAAIX,EACbmC,EAAE,QACFL,MAAM,4B","ignoreList":[]}