import{r as t,h as s,H as i,g as e}from"./p-ffce2eb2.js";const h=":host{display:block}";const n=h;const o=class{constructor(s){t(this,s);this.type="input";this.connectingConnector=null;this.connections=[]}render(){const t=this.type==="input"?"left-connector":"right-connector";const e=this.type==="input"?"input-connector":"output-connector";return s(i,{key:"fac695b607bd9ff5f462b5fea0b4ea4659a5bf3f",class:`logic-flow-connector ${e}`},s("div",{key:"d8c7dd8dbda44279533377b2f17d766f1774139e",class:`connector ${t} ${this.connections.length>0&&"connected"}`}),s("div",{key:"ce490168b788a5d3864fe7474763ef4eea9b37c3",class:`connector-content ${t}`},s("slot",{key:"0b14aca6c73c27060e1814e051fbb6c6e2823c12"})))}get el(){return e(this)}};o.style=n;const c=":host{display:block}";const r=c;const l=class{constructor(s){t(this,s);this.style={};this.type="default";this.name="Node";this.position={x:0,y:0};this.isVisible=true;this.isDragging=false}componentWillLoad(){this.updateTransform();this.position={x:this.position.x,y:this.position.y}}onPositionChange(){this.updateTransform()}updateTransform(){this.el.style.transform=`translate(${this.position.x}px, ${this.position.y}px )`}componentWillRender(){if(!this.isVisible){this.style={display:"none"}}else{this.style={}}}render(){console.log("render",this.isVisible);return s(i,{key:"94522f0175aee6bb2d4ebd9c1ebb03204b8a5d87",class:"logic-flow-node",style:this.style},s("div",{key:"18f60ffa236241e864b077bf09e0dd73a3b5d2e5",class:"logic-flow-node-header"},this.name,s("slot",{key:"e7b937fc90a074d028199527a99f840f86c59751",name:"header"})),s("slot",{key:"0b78beae388362f339f1a1d8e840d0b714037038"}),s("div",{key:"24797e1ec9493f5b6248ea1f933d2ea841d8f3ef",class:"logic-flow-node-footer"},s("slot",{key:"6eb33170eb3743030d41151e189facf55ce0d36c",name:"footer"})))}get el(){return e(this)}static get watchers(){return{position:["onPositionChange"]}}};l.style=r;const a=(t,s)=>{let i;return(...e)=>{clearTimeout(i);i=setTimeout((()=>{t(...e)}),s)}};const f=(t,s)=>{let i;let e;return(...h)=>{if(!e){t(...h);e=Date.now()}else{clearTimeout(i);i=setTimeout((()=>{if(Date.now()-e>=s){t(...h);e=Date.now()}}),s-(Date.now()-e))}}};const u=t=>{if(t instanceof MouseEvent){return{x:t.clientX,y:t.clientY}}else if(t instanceof TouchEvent&&t.touches.length>0){return{x:t.touches[0].clientX,y:t.touches[0].clientY}}else if(t instanceof TouchEvent&&t.changedTouches.length>0){return{x:t.changedTouches[0].clientX,y:t.changedTouches[0].clientY}}return{x:0,y:0}};const d="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";let p=(t=21)=>{let s="";let i=crypto.getRandomValues(new Uint8Array(t));while(t--){s+=d[i[t]&63]}return s};class w{constructor(t,s,i){this.boundary=t;this.capacity=s;this.objects=[];this.divided=false;this.northeast=null;this.northwest=null;this.southeast=null;this.southwest=null;this.camera=i}subdivide(){const{left:t,top:s,width:i,height:e}=this.boundary;const h=i/2;const n=e/2;this.northeast=new w({left:t+h,top:s,width:h,height:n},this.capacity,this.camera);this.northwest=new w({left:t,top:s,width:h,height:n},this.capacity,this.camera);this.southeast=new w({left:t+h,top:s+n,width:h,height:n},this.capacity,this.camera);this.southwest=new w({left:t,top:s+n,width:h,height:n},this.capacity,this.camera);this.divided=true}insert(t){if(this.objects.length<this.capacity){this.objects.push(t);return true}else{if(!this.divided)this.subdivide();return this.northeast.insert(t)||this.northwest.insert(t)||this.southeast.insert(t)||this.southwest.insert(t)}}remove(t){const s=i=>{if(!i)return false;const e=i.objects.length;i.objects=i.objects.filter((s=>s.id!==t));if(e!==i.objects.length)return true;if(i.divided){return s(i.northwest)||s(i.northeast)||s(i.southwest)||s(i.southeast)}return false};return s(this)}contains(t){if("x"in t&&"y"in t){return this.containsPoint(t)}else{return this.containsRect(t)}}containsPoint(t){const{left:s,top:i,width:e,height:h}=this.boundary;return t.x>=s&&t.x<s+e&&t.y>=i&&t.y<i+h}containsRect(t){const{left:s,top:i,width:e,height:h}=this.boundary;return t.left>=s&&t.left+t.width<=s+e&&t.top>=i&&t.top+t.height<=i+h}query(t,s=[],i,e){if(!this.intersects(t))return s;this.objects.forEach((h=>{if(this.inRange(h,t,i,e)){s.push(h)}}));if(this.divided){this.northwest.query(t,s,i,e);this.northeast.query(t,s,i,e);this.southwest.query(t,s,i,e);this.southeast.query(t,s,i,e)}return s}inRange(t,s,i,e){if("x"in t&&"y"in t){return this.pointInRange(t,s,i,e)}else{return this.rectInRange(t,s,i,e)}}pointInRange(t,s,i,e){const h=(t.x+i.x)*e;const n=(t.y+i.y)*e;return h>=s.left&&h<s.left+s.width&&n>=s.top&&n<s.top+s.height}rectInRange(t,s,i,e){const h=(t.left+i.x)*e;const n=(t.top+i.y)*e;const o=h+t.width*e;const c=n+t.height*e;return!(o<s.left||h>s.left+s.width||c<s.top||n>s.top+s.height)}intersects(t){const{left:s,top:i,width:e,height:h}=this.boundary;return!(t.left>s+e||t.left+t.width<s||t.top>i+h||t.top+t.height<i)}checkNearby(t,s){const i={left:t.x-s/2,top:t.y-s/2,width:s,height:s};const e=this.query(i,[],this.camera.pos,this.camera.zoom);return e.length>0?e[0]:null}}class g{constructor(){this.uid=p();this.pos={x:0,y:0};this.zoom=1}toScreenCoords(t){return{x:(t.x-this.pos.x)*this.zoom,y:(t.y-this.pos.y)*this.zoom}}toWorldCoords(t){return{x:t.x/this.zoom-this.pos.x,y:t.y/this.zoom-this.pos.y}}}class b{constructor(t){this.nodes=new Map;this.connectors=new Map;this.connectorSnapDistance=10;this.connections=new Map;this.connectorRects={};this.nodeRects={};this.camera=new g;this.visibleElements=[];this.prevVisibleElements=[];this.needsRedraw=true;this.initialPinchDistance=0;this.isPanning=false;this.snapToGrid=false;this.dragStart={x:0,y:0};this.activeNodeDragging=false;this.activeNodeDragStart={x:0,y:0};this.activeConnectorStartPos={x:0,y:0};this.viewportOffset={top:0,left:0};this.debouncedUpdateVisibleElements=f((()=>this.updateVisibleElements()),100);const s=t.id||p();t.id=s;const i=s;if(b.instances.has(i)){return b.instances.get(i)}this.uid=i;b.instances.set(this.uid,this);if(!this.viewportRect){const s=t.getBoundingClientRect();this.viewportOffset={top:s.top,left:s.left};this.viewportRect={left:s.left-s.left,top:s.top-s.top,width:s.width-s.left,height:s.height-s.top}}const e={left:this.viewportRect.left,top:this.viewportRect.top,width:this.viewportRect.width,height:this.viewportRect.height};this.connectorQuadtree=new w(e,4,this.camera);this.viewportQuadtree=new w(e,4,this.camera);b.initializeViewport(t);this.observer=new MutationObserver(this.viewportMutation);this.observer.observe(t,{childList:true,subtree:true})}destroy(){this.observer.disconnect();b.instances.delete(this.uid)}static seekAndDestroy(t,s){for(const[,i]of b.instances){switch(t){case"node":i.unregisterNode(s);break;case"connector":i.unregisterConnector(s);break;case"connection":i.unregisterConnection(s);break;case"viewport":i.destroy();break}}}registerNode(t){const s=p();t.id=s;this.nodes.set(s,t);t.setAttribute("data-viewport",this.uid);const i=t.getBoundingClientRect();this.nodeRects[s]={left:t.position.x,top:t.position.y,width:i.width,height:i.height};this.updateViewportQuadtree(t);this.updateNodeConnectorsQuadtree(t);return s}unregisterNode(t){const s=this.nodes.get(t);if(s){this.viewportQuadtree.remove(t);s.setAttribute("data-viewport","");this.nodes.delete(t)}}registerConnector(t){const s=p();t.id=s;this.connectors.set(s,t);const i=t.querySelector(".connector");const e=i.getBoundingClientRect();this.connectorRects[s]={left:e.x-this.viewportOffset.left,top:e.y-this.viewportOffset.top,width:e.width,height:e.height};return s}unregisterConnector(t){this.connectors.delete(t);this.connectorQuadtree.remove(t);delete this.connectorRects[t]}registerConnection(t){const s=p();t.id=s;this.connections.set(s,t);t.setAttribute("data-viewport",this.uid);return s}unregisterConnection(t){const s=this.connections.get(t);s.setAttribute("data-viewport","");const i=document.getElementById(t);if(i){i.remove()}this.connections.delete(t)}viewportMutation(t){if(!t.length)return;if(!this.registerNode)return;t.forEach((t=>{if(t.type==="childList"){for(let s=0;s<t.addedNodes.length;s++){const i=t.addedNodes[s];if(i instanceof HTMLElement){if(i.tagName==="LOGIC-FLOW-NODE"){const t=i;this.registerNode(t)}else if(i.tagName==="LOGIC-FLOW-CONNECTOR"){const t=i;this.registerConnector(t)}else if(i.tagName==="LOGIC-FLOW-CONNECTION"){const t=i;this.registerConnection(t)}}}for(let s=0;s<t.removedNodes.length;s++){const i=t.removedNodes[s];if(i instanceof HTMLElement){if(i.tagName==="LOGIC-FLOW-NODE"){const t=i;this.unregisterNode(t.getAttribute("id"))}else if(i.tagName==="LOGIC-FLOW-CONNECTOR"){const t=i;this.unregisterConnector(t.getAttribute("id"))}else if(i.tagName==="LOGIC-FLOW-CONNECTION"){const t=i;this.unregisterConnection(t.getAttribute("id"))}}}}}))}static initializeViewport(t){const s=t.id;const i=b.instances.get(s);const e=t.querySelector(".viewport-content");const h=e.children;const n=t=>{if(t.tagName==="LOGIC-FLOW-NODE"){const s=t;i.registerNode(s);console.log("registering node",s.id)}else if(t.tagName==="LOGIC-FLOW-CONNECTOR"){const s=t;i.registerConnector(s)}else if(t.tagName==="LOGIC-FLOW-CONNECTION"){const s=t;i.registerConnection(s)}const s=t.children;for(let t=0;t<s.length;t++){n(s[t])}};for(let t=0;t<h.length;t++){n(h[t])}}static bringToFront(t){var s;(s=t.parentElement)===null||s===void 0?void 0:s.appendChild(t)}static setCursor(t){document.body.style.cursor=t}static resetCursor(){document.body.style.cursor="default"}getRectCenter(t){return{x:t.left+t.width/2,y:t.top+t.height/2}}startPanning(t,s="grabbing"){b.setCursor(s);this.isPanning=true;this.dragStart=t}panCamera(t){this.camera.pos={x:t.x/this.camera.zoom-this.dragStart.x,y:t.y/this.camera.zoom-this.dragStart.y};this.debouncedUpdateVisibleElements()}resetPointerStates(){this.isPanning=false;this.initialPinchDistance=0;b.resetCursor()}startNodeDrag(t,s,i="grabbing"){if(!t)return false;const e=t.closest("logic-flow-node");if(!e)return false;b.setCursor(i);this.activeNode=e;b.bringToFront(e);const h=this.activeNode.position;this.activeNodeDragging=true;this.activeNodeDragStart={x:s.x-h.x,y:s.y-h.y};return true}updateNodeConnectorPos(t,s){const i=t.querySelectorAll("logic-flow-connector");for(let t=0;t<i.length;t++){const e=i[t];const h=Object.assign({},this.connectorRects[e.id]);h.left+=s.x;h.top+=s.y;this.connectorRects[e.id]=h;this.updateNodeConnectorConnectionsPos(e,h)}}updateNodeConnectorConnectionsPos(t,s){if(t.connections.length){const i=this.getRectCenter(s);for(let s=0;s<t.connections.length;s++){const e=t.connections[s];if(t.type==="input"){e.end=i}else{e.start=i}}}}calcSnapToGrid(t,s){return{x:Math.round(t.x/s)*s,y:Math.round(t.y/s)*s}}calcNodePos(t){const s={x:t.x-this.activeNodeDragStart.x,y:t.y-this.activeNodeDragStart.y};if(!this.snapToGrid)return s;return this.calcSnapToGrid(s,this.connectorSnapDistance)}moveNode(t,s){const i=this.activeNode;const e=this.camera.toWorldCoords(t);const h=i.position;let n=this.calcNodePos(e);if(this.snapToGrid){n=this.calcSnapToGrid(n,s)}const o={x:n.x-h.x,y:n.y-h.y};const c=this.nodeRects[i.id];c.left=n.x;c.top=n.y;c.width=i.clientWidth||c.width;c.height=i.clientHeight||c.height;this.nodeRects[i.id]=c;this.updateNodeConnectorPos(i,o);i.position=n}endNodeDrag(){this.activeNodeDragging=false;this.updateNodeConnectorsQuadtree(this.activeNode);this.updateViewportQuadtree(this.activeNode);this.activeNode=null}createNewConnection(t,s){const i=document.createElement("logic-flow-connection");i.start=t;i.end=t;i.type=s;this.activeConnection=i;this.contentEl.appendChild(i)}moveActiveConnection(t,s){const i=this.activeConnection;const e=this.camera.toWorldCoords({x:t.x-this.viewportOffset.left,y:t.y-this.viewportOffset.top});const h=this.connectorQuadtree.checkNearby({x:t.x-this.viewportOffset.left,y:t.y-this.viewportOffset.top},s*this.camera.zoom);if(h){const t=this.connectorRects[h.id];i.end=this.getRectCenter(t)}else{i.end=e}}getTargetConnector(t,s,i){let e=t.closest("logic-flow-connector .connector");const h=this.connectorQuadtree.checkNearby({x:s.x-this.viewportOffset.left,y:s.y-this.viewportOffset.top},i*this.camera.zoom);if(h){e=this.connectors.get(h.id)}return e}startNewConnection(t,s="grabbing"){if(!t)return false;const i=t.closest("logic-flow-connector .connector");if(!i)return false;b.setCursor(s);this.activeConnector=i;const e=i.closest("logic-flow-connector");const h=this.connectorRects[e.id];const n=this.getRectCenter(h);this.createNewConnection(n,e.type);return true}processConnection(t){const s=this.activeConnector.closest("logic-flow-connector");const i=t.closest("logic-flow-connector");const e=s.closest("logic-flow-node");const h=i.closest("logic-flow-node");if(!this.isValidConnection(s,i,e,h,t)){this.activeConnection.remove();return}this.updateConnectionEndpoints(s,i);this.finalizeConnection(s,i)}isValidConnection(t,s,i,e,h){if(this.activeConnector.connectingConnector===s||s.connectingConnector===t){return false}if(i===e||this.activeConnector===h){return false}if(t.type===s.type){return false}return true}updateConnectionEndpoints(t,s){const i=this.connectorRects[s.id];if(t.type==="input"){this.activeConnection.start=this.getRectCenter(i);this.activeConnection.end=this.activeConnectorStartPos;this.activeConnection.type="output";const s=this.connectorRects[t.id];this.activeConnection.end=this.getRectCenter(s)}else{this.activeConnection.end=this.getRectCenter(i)}}finalizeConnection(t,s){t.connectingConnector=s;t.connections.push(this.activeConnection);s.connectingConnector=t;s.connections.push(this.activeConnection)}startDisconnectConnection(t,s,i,e="grabbing"){if(!t)return false;const h=t.closest("logic-flow-connection");if(!h)return false;b.bringToFront(h);const n=this.connectorQuadtree.checkNearby({x:s.x-this.viewportOffset.left,y:s.y-this.viewportOffset.top},i*this.camera.zoom);if(!n)return false;b.setCursor(e);this.activeConnection=h;const o=this.connectors.get(n.id);this.activeConnector=o.connectingConnector;this.disconnectConnector(this.activeConnection,this.activeConnector,o);if(this.activeConnector.type==="input"){this.swapConnectionEndpoints(this.activeConnection);this.activeConnection.type="input"}return true}disconnectConnector(t,s,i){s.connections=s.connections.filter((s=>s!==t));i.connections=i.connections.filter((s=>s!==t));s.connectingConnector=null;i.connectingConnector=null}swapConnectionEndpoints(t){const{start:s,end:i}=t;t.start=i;t.end=s}updateNodeConnectorsQuadtree(t){const s=t.querySelectorAll("logic-flow-connector");for(let t=0;t<s.length;t++){const i=s[t];let e=this.connectorRects[i.id];if(!e){const t=i.querySelector(".connector");const s=t.getBoundingClientRect();this.connectorRects[i.id]={left:s.x,top:s.y,width:s.width,height:s.height};e=this.connectorRects[i.id]}this.connectorQuadtree.remove(i.id);this.connectorQuadtree.insert({id:i.id,x:e.left+e.width/2,y:e.top+e.height/2})}}updateViewportQuadtree(t){const s=this.nodeRects[t.id];this.viewportQuadtree.remove(t.id);this.viewportQuadtree.insert({id:t.id,top:s.top,left:s.left,width:s.width,height:s.height})}updateVisibleElements(){let t=this.viewportRect;t={left:t.left,top:t.top,width:t.width,height:t.height};const s=this.viewportQuadtree.query(t,[],this.camera.pos,this.camera.zoom);const i=s.map((t=>t.id));const e=new Set([...this.prevVisibleElements,...i]);this.prevVisibleElements=i;for(const t of e){const s=document.getElementById(t);if(s){const e=s;const h=e.isVisible;const n=this.prevVisibleElements.includes(t);const o=i.includes(t);if(n===h&&o===h){continue}e.isVisible=i.includes(t)}}}}b.instances=new Map;const C=(t,s,i,e,h,n,o)=>{const c=t.getContext("2d");if(!c){return}let r=e*o.zoom;if(r<10){r*=2}const l=window.devicePixelRatio||1;t.width=s*l;t.height=i*l;c.scale(l,l);c.strokeStyle=h;c.lineWidth=1;c.fillStyle=n;c.fillRect(0,0,s,i);const a=-o.pos.x%e*o.zoom;const f=-o.pos.y%e*o.zoom;c.beginPath();for(let t=-a;t<s;t+=r){c.moveTo(t,0);c.lineTo(t,i)}for(let t=-f;t<i;t+=r){c.moveTo(0,t);c.lineTo(s,t)}c.stroke()};const y=(t,s,i,e,h,n,o)=>{const c=t.getContext("2d");if(!c){return}let r=e*o.zoom;if(r<10){r*=2}const l=window.devicePixelRatio||1;t.width=s*l;t.height=i*l;c.scale(l,l);c.strokeStyle=h;c.lineWidth=1;c.fillStyle=n;c.fillRect(0,0,s,i);const a=-o.pos.x%e*o.zoom;const f=-o.pos.y%e*o.zoom;c.beginPath();for(let t=-a;t<s;t+=r){for(let s=-f;s<i;s+=r){c.fillRect(t-2,s-2,2,2)}}c.stroke()};const v=":host{display:block}";const m=v;const O=class{constructor(s){t(this,s);this.debouncedResize=a((()=>this.onResize()),16);this.debouncedUpdateScreen=a((()=>this.updateScreen()),1);this.throttledTouchMove=f((t=>this.handleTouchMove(t)),1);this.forceContentReflowDebounced=a((()=>this.forceContentReflow()),30);this.elMouseDown=t=>this.onPointerDown(t);this.elMouseUp=t=>this.onPointerUp(t);this.elMouseMove=t=>this.onPointerMove(t);this.elTouchStart=t=>this.handleTouchStart(t);this.elTouchMove=t=>this.throttledTouchMove(t);this.elTouchEnd=t=>this.onPointerUp(t);this.elWheel=t=>this.handleWheel(t);this.showGrid=true;this.showDotGrid=false;this.gridSize=20;this.gridBgColor="#f7f7f7";this.gridLineColor="#555555";this.maxZoom=3;this.minZoom=.2;this.zoomSpeed=.08;this.snapToGrid=false;this.connectorSnappingDistance=37;this.cursors={default:"auto",panning:"grabbing",moving:"grabbing"}}componentDidLoad(){this.ctx=new b(this.el);this.ctx.viewportEl=this.el.querySelector(".logic-flow-viewport");this.ctx.contentEl=this.el.querySelector(".viewport-content");this.ctx.gridEl=this.el.querySelector(".logic-flow-grid");this.ctx.initialPinchDistance=0;this.ctx.snapToGrid=this.snapToGrid;this.ctx.connectorSnapDistance=this.connectorSnappingDistance;const t=this.ctx.viewportEl;window.addEventListener("mousedown",this.elMouseDown,{passive:true});t.addEventListener("mouseup",this.elMouseUp,{passive:true});t.addEventListener("mousemove",this.elMouseMove,{passive:true});t.addEventListener("touchstart",this.elTouchStart,{passive:false});t.addEventListener("touchmove",this.elTouchMove,{passive:false});t.addEventListener("touchend",this.elTouchEnd,{passive:true});t.addEventListener("wheel",this.elWheel,{passive:false});this.resizeObserver=new ResizeObserver((()=>this.debouncedResize()));this.resizeObserver.observe(this.ctx.viewportEl);this.renderGrid()}disconnectedCallback(){if(this.resizeObserver){this.resizeObserver.disconnect()}const t=this.ctx.viewportEl;window.removeEventListener("mousedown",this.elMouseDown);t.removeEventListener("mouseup",this.elMouseUp);t.removeEventListener("mousemove",this.elMouseMove);t.removeEventListener("touchstart",this.elTouchStart);t.removeEventListener("touchmove",this.elTouchMove);t.removeEventListener("touchend",this.elTouchEnd);t.removeEventListener("wheel",this.elWheel);this.ctx.destroy()}onSnapToGridChange(){this.ctx.snapToGrid=this.snapToGrid}scheduleComponentUpdate(){this.ctx.needsRedraw=true;this.ctx.debouncedUpdateVisibleElements();this.debouncedUpdateScreen()}onResize(){this.ctx.needsRedraw=true;this.ctx.viewportRect=this.ctx.viewportEl.getBoundingClientRect();this.ctx.viewportOffset={top:this.ctx.viewportRect.top,left:this.ctx.viewportRect.left};this.renderGrid();const t={left:this.ctx.viewportRect.left-this.ctx.viewportRect.left,top:this.ctx.viewportRect.top-this.ctx.viewportRect.top,width:this.ctx.viewportRect.width,height:this.ctx.viewportRect.height};this.ctx.viewportRect=t;this.ctx.connectorQuadtree.boundary=this.ctx.viewportRect;this.ctx.viewportQuadtree.boundary=this.ctx.viewportRect}renderGrid(){if(!this.showGrid&&!this.showDotGrid||!this.ctx.needsRedraw)return;requestAnimationFrame((()=>{if(this.showGrid){C(this.ctx.gridEl,this.ctx.viewportRect.width,this.ctx.viewportRect.height,this.gridSize,this.gridLineColor,this.gridBgColor,this.ctx.camera)}if(this.showDotGrid){y(this.ctx.gridEl,this.ctx.viewportRect.width,this.ctx.viewportRect.height,this.gridSize,this.gridLineColor,this.gridBgColor,this.ctx.camera)}}));this.ctx.needsRedraw=false}updateScreen(){requestAnimationFrame((()=>{const t=this.ctx.contentEl;t.style.transform=`perspective(1px) scale(${this.ctx.camera.zoom}) translate(${this.ctx.camera.pos.x}px, ${this.ctx.camera.pos.y}px)`;this.renderGrid()}))}onPointerDown(t){const s=u(t);const i=this.ctx.camera.toWorldCoords(s);const e=document.elementFromPoint(s.x,s.y);if(s.x>this.ctx.viewportRect.width||s.y>this.ctx.viewportRect.height){return}if(this.ctx.startDisconnectConnection(e,s,this.connectorSnappingDistance,this.cursors.moving))return;if(this.ctx.startNewConnection(e))return;if(this.ctx.startNodeDrag(e,i))return;this.ctx.startPanning(i)}onPointerUp(t){if(this.ctx.activeConnector&&this.ctx.activeConnection){this.onEndActiveConnection(t)}else if(this.ctx.activeNode&&this.ctx.activeNodeDragging){this.ctx.endNodeDrag()}this.ctx.resetPointerStates()}onEndActiveConnection(t){const s=u(t);let i=t.target;if(t instanceof TouchEvent){i=document.elementFromPoint(s.x,s.y)}let e=this.ctx.getTargetConnector(i,s,this.connectorSnappingDistance);if(e){this.ctx.processConnection(e)}else{this.ctx.activeConnection.remove()}this.ctx.activeConnector=null;this.ctx.activeConnection=null}onPointerMove(t){const s=u(t);if(this.ctx.activeConnector&&this.ctx.activeConnection){this.ctx.moveActiveConnection(s,this.connectorSnappingDistance)}else if(this.ctx.activeNode&&this.ctx.activeNodeDragging){this.ctx.moveNode(s,this.gridSize)}else if(this.ctx.isPanning){this.ctx.panCamera(s);this.scheduleComponentUpdate()}}handleWheel(t){t.preventDefault();const s=this.ctx.viewportRect;const i=t.clientX-s.left-this.ctx.viewportOffset.left;const e=t.clientY-s.top-this.ctx.viewportOffset.top;const h=t.deltaY<0?this.zoomSpeed:-this.zoomSpeed;const n=Math.min(this.maxZoom,Math.max(this.minZoom,this.ctx.camera.zoom+h));const o=n/this.ctx.camera.zoom;const c=i-(i-this.ctx.camera.pos.x*this.ctx.camera.zoom)*o;const r=e-(e-this.ctx.camera.pos.y*this.ctx.camera.zoom)*o;this.ctx.camera.pos={x:c/n,y:r/n};this.ctx.camera.zoom=n;if(h>0){this.forceContentReflowDebounced()}this.scheduleComponentUpdate()}handleTouchStart(t){if(t.touches.length===1){this.onPointerDown(t)}else if(t.touches.length===2){this.ctx.initialPinchDistance=0;this.handlePinch(t)}}handleTouchMove(t){if(t.touches.length===1){this.onPointerMove(t)}else if(t.touches.length===2){this.handlePinch(t)}}handlePinch(t){if(t.touches.length!==2)return;this.onPointerMove(t);t.preventDefault();const s=t.touches[0];const i=t.touches[1];const e=Math.sqrt((s.clientX-i.clientX)**2+(s.clientY-i.clientY)**2);if(this.ctx.initialPinchDistance===0){this.ctx.initialPinchDistance=e}else{const t=e/this.ctx.initialPinchDistance;const h=(s.clientX+i.clientX)/2;const n=(s.clientY+i.clientY)/2;this.adjustZoomOnPinch(t,h,n);this.ctx.initialPinchDistance=e}}adjustZoomOnPinch(t,s,i){const e=Math.min(this.maxZoom,Math.max(this.minZoom,this.ctx.camera.zoom*t));const h=(s-this.ctx.camera.pos.x*this.ctx.camera.zoom)/this.ctx.camera.zoom;const n=(i-this.ctx.camera.pos.y*this.ctx.camera.zoom)/this.ctx.camera.zoom;this.ctx.camera.pos={x:s/e-h,y:i/e-n};this.ctx.camera.zoom=e;this.debouncedUpdateScreen()}forceContentReflow(){const t=this.ctx.contentEl.style.display;this.ctx.contentEl.style.display="none";this.ctx.contentEl.style.display=t}render(){return s(i,{key:"650348718ca1166bbc65c6db6e720b67281a0755"},s("div",{key:"096dfa2a81f28711fffd4e476e3baab45e17b9f2",class:"logic-flow-viewport"},s("canvas",{key:"807d70d664eb8268809566d0576a63975d8a09eb",class:"logic-flow-grid"}),s("div",{key:"e160a05cae6e553c268b8489d4bc2047ccc4b300",class:"viewport-content"},s("slot",{key:"7436b72b2cf18f60f5e68b02c8209eb12baf2682"}))))}get el(){return e(this)}static get watchers(){return{snapToGrid:["onSnapToGridChange"]}}};O.style=m;export{o as logic_flow_connector,l as logic_flow_node,O as logic_flow_viewport};
//# sourceMappingURL=p-6205cea6.entry.js.map