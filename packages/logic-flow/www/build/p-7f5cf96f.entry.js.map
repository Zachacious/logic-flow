{"version":3,"names":["logicFlowConnectorCss","LogicFlowConnectorStyle0","LogicFlowConnector","getNode","this","el","closest","render","sideClass","type","typeClass","h","Host","key","class","connections","length","logicFlowNodeCss","LogicFlowNodeStyle0","LogicFlowNode","style","x","y","componentWillLoad","position","startX","startY","onPositionChange","newValue","JSON","parse","updateTransform","transform","componentWillRender","isVisible","display","tabIndex","debounce","fn","delay","timeout","args","clearTimeout","setTimeout","throttle","lastFunc","lastRan","Date","now","getEventLocation","e","MouseEvent","clientX","clientY","TouchEvent","touches","changedTouches","urlAlphabet","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet","Quadtree","constructor","boundary","capacity","camera","objects","divided","northeast","northwest","southeast","southwest","subdivide","left","top","width","height","halfWidth","halfHeight","expandBoundaryToInclude","object","expandBoundaryToPoint","expandBoundaryToRect","point","newLeft","Math","min","newTop","newRight","max","newBottom","rect","rectLeft","rectTop","rectWidth","rectHeight","insert","contains","push","console","log","remove","removeFromNode","node","originalLength","filter","obj","containsPoint","containsRect","inRange","range","pan","zoom","pointInRange","rectInRange","adjX","adjY","adjLeft","adjTop","adjRight","adjBottom","query","found","intersects","i","checkNearby","coords","bounds","nearby","pos","Camera","uid","toScreenCoords","worldCoords","toWorldCoords","screenCoords","ViewContext","viewport","nodes","Map","connectors","connectorSnapDistance","connectorRects","connectionRects","nodeRects","visibleElements","prevVisibleElements","needsRedraw","initialPinchDistance","isPanning","snapToGrid","dragStart","activeNodeDragging","activeNodeDragStart","activeConnectorStartPos","viewportOffset","bringingToFront","debouncedUpdateVisibleElements","updateVisibleElements","viewportId","instances","has","get","set","viewportRect","getBoundingClientRect","boundry","connectorQuadtree","viewportQuadtree","initializeViewport","observer","MutationObserver","m","viewportMutation","observe","childList","subtree","destroy","disconnect","delete","updateViewportRect","viewportEl","addNode","setAttribute","n","requestIdleCallback","_a","_b","updateViewportQuadtree","removeNode","querySelectorAll","forEach","connector","cid","connection","removeConnection","removeConnector","addConnector","requestAnimationFrame","connectorEl","querySelector","qrect","addConnection","connIndex","indexOf","splice","connectingConnector","mutations","mutation","addedNodes","HTMLElement","tagName","logicNode","logicConnector","logicConnection","removedNodes","getAttribute","instance","contentEl","children","traverse","bringToFront","parentElement","appendChild","setCursor","cursor","document","body","resetCursor","getRectCenter","startPanning","panCamera","loc","resetPointerStates","startNodeDrag","target","activeNode","updateNodeConnectorPos","aNode","delta","Object","assign","updateNodeConnectorConnectionsPos","end","start","calcSnapToGrid","gridSize","round","calcNodePos","moveNode","oldPos","newPos","clientWidth","clientHeight","endNodeDrag","updateNodeConnectorsQuadtree","concat","path","createNewConnection","startPos","createElement","activeConnection","moveActiveConnection","snappingDist","aConn","snappableConnector","getTargetConnector","targetConnector","snappedConnector","startNewConnection","connEl","activeConnector","parentConn","center","processConnection","tConn","tNode","isValidConnection","onConnection","then","result","updateConnectionEndpoints","finalizeConnection","targetConn","active","targRect","clear","add","startDisconnectConnection","snapConnector","disconnectConnector","swapConnectionEndpoints","c","r","entity","visibleEntities","newVisibleElements","map","allItems","Set","getElementById","entityComponent","curstate","prevState","includes","newstate","renderCanvasGrid","canvas","color","bgColor","ctx","getContext","step","strokeStyle","lineWidth","fillStyle","fillRect","offsetX","offsetY","beginPath","moveTo","lineTo","stroke","renderCanvasDotGrid","logicFlowViewportCss","LogicFlowViewportStyle0","LogicFlowViewport","debouncedResize","onResize","debouncedUpdateScreen","updateScreen","debouncedUpdateViewportRect","throttledTouchMove","handleTouchMove","forceContentReflowDebounced","forceContentReflow","elMouseDown","onPointerDown","elMouseUp","onPointerUp","elMouseMove","onPointerMove","elTouchStart","handleTouchStart","elTouchMove","elTouchEnd","elWheel","handleWheel","elScroll","elKeyPress","onKeyPress","default","panning","moving","componentDidLoad","gridEl","connectorSnappingDistance","window","addEventListener","passive","resizeObserver","ResizeObserver","renderGrid","disconnectedCallback","canvasEl","removeEventListener","screenToWorldCoords","onSnapToGridChange","onGridTypeChange","scheduleComponentUpdate","showGrid","gridType","gridLineColor","gridBgColor","event","activeElement","elementFromPoint","cursors","onEndActiveConnection","preventDefault","canvasRect","mouseX","mouseY","zoomDelta","deltaY","zoomSpeed","newZoom","maxZoom","minZoom","scaleFactor","newPanX","newPanY","handlePinch","touch1","touch2","distance","sqrt","pinchCenterX","pinchCenterY","adjustZoomOnPinch","pinchContentX","pinchContentY","cdisplay"],"sources":["src/components/logic-flow-connector/logic-flow-connector.css?tag=logic-flow-connector","src/components/logic-flow-connector/logic-flow-connector.tsx","src/components/logic-flow-node/logic-flow-node.css?tag=logic-flow-node","src/components/logic-flow-node/logic-flow-node.tsx","src/utils/debounce.ts","src/utils/throttle.ts","src/utils/getEventLocation.ts","../../node_modules/nanoid/url-alphabet/index.js","../../node_modules/nanoid/index.browser.js","src/types/Quadtree.ts","src/types/Camera.ts","src/types/ViewContext.ts","src/utils/renderCanvasGrid.ts","src/components/logic-flow-viewport/logic-flow-viewport.css?tag=logic-flow-viewport","src/components/logic-flow-viewport/logic-flow-viewport.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element, Method } from '@stencil/core';\nimport { LogicFlowConnection } from '../logic-flow-connection/logic-flow-connection';\n\n@Component({\n  tag: 'logic-flow-connector',\n  styleUrl: 'logic-flow-connector.css',\n  shadow: false,\n})\nexport class LogicFlowConnector {\n  @Element() el: HTMLElement;\n\n  @Prop() type: 'input' | 'output' = 'input';\n  @Prop() connectingConnector: LogicFlowConnector | null = null;\n  @Prop() connections: LogicFlowConnection[] = [];\n  @Prop() onConnection: (\n    sourceConnector: HTMLLogicFlowConnectorElement,\n    // targetConnector: HTMLLogicFlowConnectorElement,\n  ) => Promise<boolean>;\n\n  @Method()\n  async getNode() {\n    return this.el.closest('logic-flow-node');\n  }\n\n  render() {\n    const sideClass =\n      this.type === 'input' ? 'left-connector' : 'right-connector';\n    const typeClass =\n      this.type === 'input' ? 'input-connector' : 'output-connector';\n\n    return (\n      <Host class={`logic-flow-connector ${typeClass}`}>\n        <div\n          class={`connector ${sideClass} ${\n            (this.connections.length > 0 && 'connected') || ''\n          }`}\n        ></div>\n        <div class={`connector-content ${sideClass}`}>\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element, State, Watch } from '@stencil/core';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-node',\n  styleUrl: 'logic-flow-node.css',\n  shadow: false,\n})\nexport class LogicFlowNode {\n  @Element() el: HTMLElement;\n\n  @Prop() type: string = 'default';\n  // @Prop() name: string = 'Node';\n  @Prop() startX: number = 0;\n  @Prop() startY: number = 0;\n  @Prop({ mutable: true }) position: Coords = { x: 0, y: 0 };\n  @Prop({ mutable: true }) isVisible: boolean = true;\n\n  @State() isDragging = false;\n\n  style = {};\n\n  componentWillLoad() {\n    //  set initial size\n    this.position.x = this.startX;\n    this.position.y = this.startY;\n\n    this.onPositionChange(this.position);\n  }\n\n  @Watch('position')\n  onPositionChange(newValue: Coords | string) {\n    if (typeof newValue === 'string') {\n      this.position = JSON.parse(newValue);\n    }\n    // update transform\n    this.updateTransform();\n  }\n\n  updateTransform() {\n    this.el.style.transform = `translate(${this.position.x}px, ${this.position.y}px )`;\n  }\n\n  componentWillRender() {\n    if (!this.isVisible) {\n      this.style = { display: 'none' };\n    } else {\n      this.style = {};\n    }\n  }\n\n  render() {\n    return (\n      <Host class=\"logic-flow-node\" style={this.style} tabIndex=\"0\">\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n","export const debounce = (fn: (...args: any[]) => void, delay: number) => {\n  let timeout: ReturnType<typeof setTimeout>;\n  return (...args: any[]) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n};\n","export const throttle = (fn: (...args: any[]) => void, delay: number) => {\n  let lastFunc: ReturnType<typeof setTimeout>;\n  let lastRan: number;\n  return (...args: any[]) => {\n    if (!lastRan) {\n      fn(...args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc);\n      lastFunc = setTimeout(() => {\n        if (Date.now() - lastRan >= delay) {\n          fn(...args);\n          lastRan = Date.now();\n        }\n      }, delay - (Date.now() - lastRan));\n    }\n  };\n};\n","export const getEventLocation = (e: MouseEvent | TouchEvent) => {\n  if (e instanceof MouseEvent) {\n    return { x: e.clientX, y: e.clientY };\n  } else if (e instanceof TouchEvent && e.touches.length > 0) {\n    return { x: e.touches[0].clientX, y: e.touches[0].clientY };\n  } else if (e instanceof TouchEvent && e.changedTouches.length > 0) {\n    return { x: e.changedTouches[0].clientX, y: e.changedTouches[0].clientY };\n  }\n  return { x: 0, y: 0 };\n};\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { Coords } from './Coords';\nimport { Rect } from './Rect';\nimport { Camera } from './Camera';\n\n// SpatialObject can be either a Point or a Rect with an ID for tracking\ntype SpatialObject = Point | BBox;\n\ninterface Point extends Coords {\n  id: string; // Unique ID of the point (e.g., connector)\n}\n\ninterface BBox extends Rect {\n  id: string; // Unique ID of the rect (e.g., node)\n}\n\nexport class Quadtree {\n  boundary: Rect;\n  capacity: number;\n  objects: SpatialObject[];\n  divided: boolean;\n  northeast: Quadtree | null;\n  northwest: Quadtree | null;\n  southeast: Quadtree | null;\n  southwest: Quadtree | null;\n  camera: Camera;\n\n  constructor(boundary: Rect, capacity: number, camera: Camera) {\n    this.boundary = boundary;\n    this.capacity = capacity;\n    this.objects = [];\n    this.divided = false;\n    this.northeast = null;\n    this.northwest = null;\n    this.southeast = null;\n    this.southwest = null;\n    this.camera = camera;\n  }\n\n  subdivide() {\n    const { left, top, width, height } = this.boundary;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n\n    this.northeast = new Quadtree(\n      { left: left + halfWidth, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.northwest = new Quadtree(\n      { left, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.southeast = new Quadtree(\n      {\n        left: left + halfWidth,\n        top: top + halfHeight,\n        width: halfWidth,\n        height: halfHeight,\n      },\n      this.capacity,\n      this.camera,\n    );\n    this.southwest = new Quadtree(\n      { left, top: top + halfHeight, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n\n    this.divided = true;\n  }\n\n  expandBoundaryToInclude(object: SpatialObject) {\n    if ('x' in object && 'y' in object) {\n      this.expandBoundaryToPoint(object);\n    } else {\n      this.expandBoundaryToRect(object);\n    }\n  }\n\n  expandBoundaryToPoint(point: Point) {\n    const { left, top, width, height } = this.boundary;\n    const { x, y } = point;\n\n    const newLeft = Math.min(left, x);\n    const newTop = Math.min(top, y);\n    const newRight = Math.max(left + width, x);\n    const newBottom = Math.max(top + height, y);\n\n    this.boundary = {\n      left: newLeft,\n      top: newTop,\n      width: newRight - newLeft,\n      height: newBottom - newTop,\n    };\n  }\n\n  expandBoundaryToRect(rect: Rect) {\n    const { left, top, width, height } = this.boundary;\n    const {\n      left: rectLeft,\n      top: rectTop,\n      width: rectWidth,\n      height: rectHeight,\n    } = rect;\n\n    const newLeft = Math.min(left, rectLeft);\n    const newTop = Math.min(top, rectTop);\n    const newRight = Math.max(left + width, rectLeft + rectWidth);\n    const newBottom = Math.max(top + height, rectTop + rectHeight);\n\n    this.boundary = {\n      left: newLeft,\n      top: newTop,\n      width: newRight - newLeft,\n      height: newBottom - newTop,\n    };\n  }\n\n  insert(object: SpatialObject): boolean {\n    // if (!this.contains(object)) return false;\n\n    if (!this.contains(object)) {\n      this.expandBoundaryToInclude(object);\n    }\n\n    if (this.objects.length < this.capacity) {\n      this.objects.push(object);\n      return true;\n    } else {\n      if (!this.divided) {\n        this.subdivide();\n      }\n\n      if (this.northeast!.insert(object)) return true;\n      if (this.northwest!.insert(object)) return true;\n      if (this.southeast!.insert(object)) return true;\n      if (this.southwest!.insert(object)) return true;\n\n      console.log('Object could not be inserted into any child node');\n\n      // If none of the children can contain the object, keep it in the current node\n      this.objects.push(object);\n      return true;\n    }\n  }\n\n  remove(id: string): boolean {\n    const removeFromNode = (node: Quadtree | null): boolean => {\n      if (!node) return false;\n\n      const originalLength = node.objects.length;\n      node.objects = node.objects.filter(obj => (obj as any).id !== id);\n\n      if (originalLength !== node.objects.length) return true;\n\n      if (node.divided) {\n        return (\n          removeFromNode(node.northwest) ||\n          removeFromNode(node.northeast) ||\n          removeFromNode(node.southwest) ||\n          removeFromNode(node.southeast)\n        );\n      }\n\n      return false;\n    };\n\n    return removeFromNode(this);\n  }\n\n  contains(object: SpatialObject): boolean {\n    if ('x' in object && 'y' in object) {\n      return this.containsPoint(object);\n    } else {\n      return this.containsRect(object);\n    }\n  }\n\n  containsPoint(point: Point): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      point.x >= left &&\n      point.x < left + width &&\n      point.y >= top &&\n      point.y < top + height\n    );\n\n    // boundary adjusted to world space\n    // const adjBounds = {\n    //   left: this.boundary.left + this.camera.pos.x,\n    //   top: this.boundary.top + this.camera.pos.y,\n    //   width: this.boundary.width,\n    //   height: this.boundary.height,\n    // };\n\n    // return (\n    //   point.x >= adjBounds.left &&\n    //   point.x < adjBounds.left + adjBounds.width &&\n    //   point.y >= adjBounds.top &&\n    //   point.y < adjBounds.top + adjBounds.height\n    // );\n  }\n\n  containsRect(rect: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      rect.left >= left &&\n      rect.left + rect.width <= left + width &&\n      rect.top >= top &&\n      rect.top + rect.height <= top + height\n    );\n  }\n\n  inRange(\n    object: SpatialObject,\n    range: Rect,\n    pan: Coords,\n    zoom: number,\n  ): boolean {\n    if ('x' in object && 'y' in object) {\n      // It's a point\n      return this.pointInRange(object, range, pan, zoom);\n    } else {\n      // It's a rect\n      return this.rectInRange(object, range, pan, zoom);\n    }\n  }\n\n  pointInRange(point: Point, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust point position relative to pan and zoom\n    const adjX = (point.x + pan.x) * zoom;\n    const adjY = (point.y + pan.y) * zoom;\n\n    // const screenX = adjX / zoom - pan.x;\n    // const screenY = adjY / zoom - pan.y;\n\n    // // show debug\n    // const debugDiv = document.getElementById('debug');\n    // debugDiv.style.left = `${screenX}px`;\n    // debugDiv.style.top = `${screenY}px`;\n    // debugDiv.style.width = '10px';\n    // debugDiv.style.height = '10px';\n\n    // // // show debug range\n    // const screenRange = {\n    //   left: range.left / zoom - pan.x,\n    //   top: range.top / zoom - pan.y,\n    //   width: range.width / zoom,\n    //   height: range.height / zoom,\n    // };\n\n    // const debugDiv2 = document.getElementById('debug2');\n    // debugDiv2.style.left = `${screenRange.left}px`;\n    // debugDiv2.style.top = `${screenRange.top}px`;\n    // debugDiv2.style.width = `${screenRange.width}px`;\n    // debugDiv2.style.height = `${screenRange.height}px`;\n\n    return (\n      adjX >= range.left &&\n      adjX < range.left + range.width &&\n      adjY >= range.top &&\n      adjY < range.top + range.height\n    );\n  }\n\n  rectInRange(rect: Rect, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust rect position relative to pan and zoom\n    const adjLeft = (rect.left + pan.x) * zoom;\n    const adjTop = (rect.top + pan.y) * zoom;\n\n    const adjRight = adjLeft + rect.width * zoom;\n    const adjBottom = adjTop + rect.height * zoom;\n\n    // const screenW = (adjRight - adjLeft) / this.camera.zoom;\n    // const screenH = (adjBottom - adjTop) / this.camera.zoom;\n    // const screenX = adjLeft / this.camera.zoom - pan.x;\n    // const screenY = adjTop / this.camera.zoom - pan.y;\n\n    // const debugDiv2 = document.getElementById('debug2');\n    // debugDiv2.style.width = `${screenW}px`;\n    // debugDiv2.style.height = `${screenH}px`;\n    // debugDiv2.style.left = `${screenX}px`;\n    // debugDiv2.style.top = `${screenY}px`;\n\n    // const screenRange = {\n    //   left: range.left / zoom - pan.x,\n    //   top: range.top / zoom - pan.y,\n    //   width: range.width / zoom,\n    //   height: range.height / zoom,\n    // };\n\n    // const debugDiv = document.getElementById('debug2');\n    // debugDiv.style.width = `${screenRange.width}px`;\n    // debugDiv.style.height = `${screenRange.height}px`;\n    // debugDiv.style.left = `${screenRange.left}px`;\n    // debugDiv.style.top = `${screenRange.top}px`;\n\n    return !(\n      adjRight < range.left ||\n      adjLeft > range.left + range.width ||\n      adjBottom < range.top ||\n      adjTop > range.top + range.height\n    );\n  }\n\n  query(\n    range: Rect,\n    found: SpatialObject[] = [],\n    pan: Coords,\n    zoom: number,\n  ): SpatialObject[] {\n    if (!this.intersects(range)) return found;\n\n    for (let i = 0; i < this.objects.length; i++) {\n      if (this.inRange(this.objects[i], range, pan, zoom)) {\n        found.push(this.objects[i]);\n      }\n    }\n\n    if (this.divided) {\n      this.northwest!.query(range, found, pan, zoom);\n      this.northeast!.query(range, found, pan, zoom);\n      this.southwest!.query(range, found, pan, zoom);\n      this.southeast!.query(range, found, pan, zoom);\n    }\n\n    return found;\n  }\n\n  intersects(range: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return !(\n      range.left > left + width ||\n      range.left + range.width < left ||\n      range.top > top + height ||\n      range.top + range.height < top\n    );\n  }\n\n  checkNearby(coords: Coords, range: number): SpatialObject | null {\n    const bounds = {\n      left: coords.x - range / 2,\n      top: coords.y - range / 2,\n      width: range,\n      height: range,\n    };\n\n    const nearby = this.query(bounds, [], this.camera.pos, this.camera.zoom);\n    return nearby.length > 0 ? nearby[0] : null;\n  }\n}\n","import { nanoid } from 'nanoid';\nimport { Coords } from './Coords';\n\nexport class Camera {\n  uid: string;\n  pos: Coords;\n  zoom: number;\n\n  constructor() {\n    this.uid = nanoid();\n    this.pos = { x: 0, y: 0 };\n    this.zoom = 1;\n  }\n\n  toScreenCoords(worldCoords: Coords): Coords {\n    return {\n      x: (worldCoords.x - this.pos.x) * this.zoom,\n      y: (worldCoords.y - this.pos.y) * this.zoom,\n    };\n  }\n\n  toWorldCoords(screenCoords: Coords): Coords {\n    return {\n      x: screenCoords.x / this.zoom - this.pos.x,\n      y: screenCoords.y / this.zoom - this.pos.y,\n    };\n  }\n}\n","import { nanoid } from 'nanoid';\nimport { Rect } from './Rect';\nimport { Quadtree } from './Quadtree';\nimport { Camera } from './Camera';\nimport { Coords } from './Coords';\nimport { throttle } from '../utils/throttle';\nimport { Offset } from './Offset';\n\nexport class ViewContext {\n  static instances = new Map<string, ViewContext>();\n\n  uid: string;\n  nodes = new Map<string, HTMLLogicFlowNodeElement>();\n  connectors = new Map<string, HTMLLogicFlowConnectorElement>();\n  connectorSnapDistance = 10;\n  connections = new Map<string, HTMLLogicFlowConnectionElement>();\n  connectorRects = <Record<string, Rect>>{};\n  connectionRects = <Record<string, Rect>>{};\n  connectorQuadtree: Quadtree;\n  viewportQuadtree: Quadtree;\n  nodeRects = <Record<string, Rect>>{};\n  camera = new Camera();\n  observer: MutationObserver;\n  visibleElements: string[] = [];\n  prevVisibleElements: string[] = [];\n\n  // viewport variables\n  viewportEl: HTMLDivElement;\n  contentEl: HTMLDivElement;\n  gridEl: HTMLCanvasElement;\n  needsRedraw = true;\n  viewportRect: Rect;\n  initialPinchDistance = 0;\n  isPanning = false;\n  snapToGrid = false;\n  dragStart: Coords = { x: 0, y: 0 };\n  activeNode: HTMLLogicFlowNodeElement;\n  activeNodeDragging = false;\n  activeNodeDragStart: Coords = { x: 0, y: 0 };\n  activeConnector: HTMLLogicFlowConnectorElement;\n  activeConnectorStartPos: Coords = { x: 0, y: 0 };\n  activeConnection: HTMLLogicFlowConnectionElement;\n  viewportOffset: Offset = { top: 0, left: 0 };\n  bringingToFront = false;\n\n  debouncedUpdateVisibleElements = throttle(\n    () => this.updateVisibleElements(),\n    20,\n  );\n\n  constructor(viewport: HTMLLogicFlowViewportElement) {\n    const id = viewport.id || nanoid();\n    viewport.id = id;\n    const viewportId = id;\n    if (ViewContext.instances.has(viewportId)) {\n      return ViewContext.instances.get(viewportId);\n    }\n    this.uid = viewportId;\n    ViewContext.instances.set(this.uid, this);\n\n    if (!this.viewportRect) {\n      const rect = viewport.getBoundingClientRect();\n      this.viewportOffset = {\n        top: rect.top,\n        left: rect.left,\n      };\n      this.viewportRect = {\n        left: rect.left - rect.left,\n        top: rect.top - rect.top,\n        width: rect.width - rect.left,\n        height: rect.height - rect.top,\n      };\n      // this.updateViewportRect();\n    }\n\n    const boundry = {\n      left: this.viewportRect.left,\n      top: this.viewportRect.top,\n      width: this.viewportRect.width,\n      height: this.viewportRect.height,\n    };\n\n    this.connectorQuadtree = new Quadtree(boundry, 4, this.camera);\n    this.viewportQuadtree = new Quadtree(boundry, 4, this.camera);\n\n    ViewContext.initializeViewport(viewport);\n\n    this.observer = new MutationObserver((m: MutationRecord[]) =>\n      this.viewportMutation(m),\n    );\n    this.observer.observe(viewport, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  destroy() {\n    this.observer.disconnect();\n\n    ViewContext.instances.delete(this.uid);\n  }\n\n  updateViewportRect() {\n    const rect = this.viewportEl.getBoundingClientRect();\n    this.viewportOffset = {\n      top: rect.top,\n      left: rect.left,\n    };\n    this.viewportRect = {\n      left: rect.left - rect.left,\n      top: rect.top - rect.top,\n      width: rect.width - rect.left,\n      height: rect.height - rect.top,\n    };\n  }\n\n  addNode(node: HTMLLogicFlowNodeElement) {\n    const id = nanoid();\n    node.id = id;\n    this.nodes.set(id, node);\n\n    // set data attribute for the context id\n    node.setAttribute('data-viewport', this.uid);\n\n    const n = node;\n\n    // wait for next frame to update connectors rects until the connectors have registered\n    requestIdleCallback(\n      () => {\n        // update rect\n        const rect = n.getBoundingClientRect();\n\n        this.nodeRects[id] = {\n          left: n?.position?.x || n.startX || rect.x,\n          top: n?.position?.y || n.startY || rect.y,\n          width: rect.width,\n          height: rect.height,\n        };\n\n        // add to quadtree\n        this.updateViewportQuadtree(n);\n\n        // this.updateNodeConnectorsQuadtree(node);\n      },\n      { timeout: 100 },\n    );\n\n    return id;\n  }\n\n  removeNode(id: string) {\n    console.log('remove node', id);\n    // remove all connections and connectors associated with the node\n    // get connectors\n    const node = this.nodes.get(id);\n    if (node) {\n      const connectors = node.querySelectorAll('logic-flow-connector');\n      connectors.forEach((connector: HTMLLogicFlowConnectorElement) => {\n        const cid = connector.id;\n        // remove connections\n        connector.connections.forEach(\n          (connection: HTMLLogicFlowConnectionElement) => {\n            const id = connection.id;\n            if (id) this.removeConnection(id);\n          },\n        );\n        // remove connector\n        this.removeConnector(cid);\n      });\n\n      // remove from quadtree\n      this.viewportQuadtree.remove(id);\n      delete this.nodeRects[id];\n      // node.setAttribute('data-viewport', '');\n\n      // remove from nodes\n      this.nodes.delete(id);\n    }\n  }\n\n  addConnector(connector: HTMLLogicFlowConnectorElement) {\n    const id = nanoid();\n    connector.id = id;\n    this.connectors.set(id, connector);\n    requestAnimationFrame(() => {\n      const connectorEl = connector.querySelector('.connector');\n      const rect = connectorEl.getBoundingClientRect();\n      this.connectorRects[id] = {\n        left:\n          (rect.x - this.viewportOffset.left) / this.camera.zoom -\n          this.camera.pos.x,\n        top:\n          (rect.y - this.viewportOffset.top) / this.camera.zoom -\n          this.camera.pos.y,\n        width: rect.width / this.camera.zoom,\n        height: rect.height / this.camera.zoom,\n      };\n\n      // add to quadtree\n      const qrect = this.connectorRects[id];\n      this.connectorQuadtree.insert({\n        id,\n        x: qrect.left + qrect.width / 2,\n        y: qrect.top + qrect.height / 2,\n      });\n    });\n\n    return id;\n  }\n\n  removeConnector(id: string) {\n    const connector = this.connectors.get(id);\n    if (!connector) return;\n\n    // remove connections\n    connector.connections.forEach(\n      (connection: HTMLLogicFlowConnectionElement) => {\n        const id = connection.id;\n        if (id) this.removeConnection(id);\n      },\n    );\n\n    this.connectors.delete(id);\n    this.connectorQuadtree.remove(id);\n    delete this.connectorRects[id];\n  }\n\n  addConnection(connection: HTMLLogicFlowConnectionElement) {\n    const id = nanoid();\n    connection.id = id;\n    this.connections.set(id, connection);\n    // set data attribute for the context id\n    connection.setAttribute('data-viewport', this.uid);\n\n    return id;\n  }\n\n  removeConnection(id: string) {\n    const connection = this.connections.get(id);\n    if (!connection) return;\n\n    // handle connectors\n    const connectors = connection.connectors;\n    if (connectors.size > 0) {\n      for (const connector of connectors) {\n        const connIndex = connector.connections.indexOf(connection);\n        if (connIndex > -1) {\n          connector.connections.splice(connIndex, 1);\n        }\n        connector.connectingConnector = null;\n        // update quadtree\n      }\n    }\n\n    delete this.connectionRects[id];\n    this.viewportQuadtree.remove(id);\n    this.connections.delete(id);\n    connection.remove();\n  }\n\n  // mutation observer callback\n  // when elements are added or removed from the dom\n  // we need to register or unregister them if they are nodes, connectors or connections\n  viewportMutation(mutations: MutationRecord[]) {\n    if (!mutations.length) return;\n    // happens whenu using bringNodeToFront\n    // - stop the observer from firing\n    // if (!this.registerNode) return;\n    if (this.bringingToFront) {\n      this.bringingToFront = false;\n      return;\n    }\n\n    mutations.forEach(mutation => {\n      if (mutation.type === 'childList') {\n        for (let i = 0; i < mutation.addedNodes.length; i++) {\n          const node = mutation.addedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-FLOW-NODE') {\n              const logicNode = node as HTMLLogicFlowNodeElement;\n              this.addNode(logicNode);\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTOR') {\n              const logicConnector = node as HTMLLogicFlowConnectorElement;\n              this.addConnector(logicConnector);\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTION') {\n              const logicConnection = node as HTMLLogicFlowConnectionElement;\n              this.addConnection(logicConnection);\n            }\n          }\n        }\n\n        for (let i = 0; i < mutation.removedNodes.length; i++) {\n          const node = mutation.removedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-FLOW-NODE') {\n              const logicNode = node as HTMLLogicFlowNodeElement;\n              this.removeNode(logicNode.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTOR') {\n              const logicConnector = node as HTMLLogicFlowConnectorElement;\n              this.removeConnector(logicConnector.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTION') {\n              const logicConnection = node as HTMLLogicFlowConnectionElement;\n              this.removeConnection(logicConnection.getAttribute('id'));\n            }\n          }\n        }\n      }\n    });\n  }\n\n  static initializeViewport(viewport: HTMLLogicFlowViewportElement) {\n    // need to register all nodes, connectors and connections\n    // that are already in the dom\n\n    const id = viewport.id;\n    const instance = ViewContext.instances.get(id);\n\n    const contentEl = viewport.querySelector('.viewport-content');\n    const children = contentEl.children;\n\n    const traverse = (el: HTMLElement) => {\n      if (el.tagName === 'LOGIC-FLOW-NODE') {\n        const logicNode = el as HTMLLogicFlowNodeElement;\n        instance.addNode(logicNode);\n      } else if (el.tagName === 'LOGIC-FLOW-CONNECTOR') {\n        const logicConnector = el as HTMLLogicFlowConnectorElement;\n        instance.addConnector(logicConnector);\n      } else if (el.tagName === 'LOGIC-FLOW-CONNECTION') {\n        const logicConnection = el as HTMLLogicFlowConnectionElement;\n        instance.addConnection(logicConnection);\n      }\n\n      const children = el.children;\n      for (let i = 0; i < children.length; i++) {\n        traverse(children[i] as HTMLElement);\n      }\n    };\n\n    for (let i = 0; i < children.length; i++) {\n      traverse(children[i] as HTMLElement);\n    }\n  }\n\n  bringToFront(node: HTMLElement) {\n    this.bringingToFront = true;\n    node.parentElement?.appendChild(node);\n  }\n\n  static setCursor(cursor: string) {\n    document.body.style.cursor = cursor;\n  }\n\n  static resetCursor() {\n    document.body.style.cursor = 'default';\n  }\n\n  getRectCenter(rect: DOMRect | Rect) {\n    return {\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height / 2,\n    };\n  }\n\n  startPanning(worldCoords: Coords, cursor = 'grabbing') {\n    ViewContext.setCursor(cursor);\n    this.isPanning = true;\n    this.dragStart = worldCoords;\n  }\n\n  panCamera(loc: Coords) {\n    this.camera.pos = {\n      x: loc.x / this.camera.zoom - this.dragStart.x,\n      y: loc.y / this.camera.zoom - this.dragStart.y,\n    };\n\n    this.debouncedUpdateVisibleElements();\n  }\n\n  resetPointerStates() {\n    this.isPanning = false;\n    this.initialPinchDistance = 0;\n    ViewContext.resetCursor();\n  }\n\n  startNodeDrag(\n    target: HTMLLogicFlowNodeElement,\n    worldCoords: Coords,\n    cursor = 'grabbing',\n  ): boolean {\n    if (!target) return false;\n\n    const node = target.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n    if (!node) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeNode = node;\n    this.bringToFront(node);\n\n    const pos = this.activeNode.position;\n    this.activeNodeDragging = true;\n    this.activeNodeDragStart = {\n      x: worldCoords.x - pos.x,\n      y: worldCoords.y - pos.y,\n    };\n\n    return true;\n  }\n\n  updateNodeConnectorPos(aNode: HTMLLogicFlowNodeElement, delta: Coords) {\n    const connectors = aNode.querySelectorAll(\n      'logic-flow-connector',\n    ) as NodeListOf<HTMLLogicFlowConnectorElement>;\n\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      const rect = { ...this.connectorRects[connector.id] };\n      rect.left += delta.x;\n      rect.top += delta.y;\n      this.connectorRects[connector.id] = rect;\n\n      this.updateNodeConnectorConnectionsPos(connector, rect);\n    }\n  }\n\n  updateNodeConnectorConnectionsPos(\n    connector: HTMLLogicFlowConnectorElement,\n    rect: Rect,\n  ) {\n    if (connector.connections.length) {\n      const pos = this.getRectCenter(rect);\n\n      for (let i = 0; i < connector.connections.length; i++) {\n        const connection = connector.connections[i];\n        if (connector.type === 'input') {\n          connection.end = pos;\n        } else {\n          connection.start = pos;\n        }\n      }\n    }\n  }\n\n  calcSnapToGrid(pos: Coords, gridSize: number) {\n    return {\n      x: Math.round(pos.x / gridSize) * gridSize,\n      y: Math.round(pos.y / gridSize) * gridSize,\n    };\n  }\n\n  calcNodePos(worldCoords: Coords) {\n    const pos = {\n      x: worldCoords.x - this.activeNodeDragStart.x,\n      y: worldCoords.y - this.activeNodeDragStart.y,\n    };\n\n    if (!this.snapToGrid) return pos;\n\n    return this.calcSnapToGrid(pos, this.connectorSnapDistance);\n  }\n\n  moveNode(loc: Coords, gridSize: number) {\n    const aNode = this.activeNode;\n    const worldCoords = this.camera.toWorldCoords(loc);\n    const oldPos = aNode.position;\n\n    let newPos = this.calcNodePos(worldCoords);\n\n    // calc new position\n    if (this.snapToGrid) {\n      newPos = this.calcSnapToGrid(newPos, gridSize);\n    }\n\n    const delta = {\n      x: newPos.x - oldPos.x,\n      y: newPos.y - oldPos.y,\n    };\n\n    // update node rect\n    const rect = this.nodeRects[aNode.id];\n    rect.left = newPos.x;\n    rect.top = newPos.y;\n    rect.width = aNode.clientWidth || rect.width;\n    rect.height = aNode.clientHeight || rect.height;\n    this.nodeRects[aNode.id] = rect;\n\n    aNode.position = newPos;\n\n    // update node position and it's connections\n    this.updateNodeConnectorPos(aNode, delta); // ???\n  }\n\n  endNodeDrag() {\n    this.activeNodeDragging = false;\n    this.updateNodeConnectorsQuadtree(this.activeNode);\n\n    const connectors = this.activeNode.querySelectorAll('logic-flow-connector');\n\n    let connections = [];\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i] as HTMLLogicFlowConnectorElement;\n      connections = connections.concat(connector.connections);\n    }\n\n    for (let i = 0; i < connections.length; i++) {\n      const connection = connections[i] as HTMLLogicFlowConnectionElement;\n      const path = connection.querySelector('path');\n      const rect = path.getBoundingClientRect();\n      this.connectionRects[connection.id] = {\n        left:\n          (rect.x - this.viewportOffset.left) / this.camera.zoom -\n          this.camera.pos.x,\n        top:\n          (rect.y - this.viewportOffset.top) / this.camera.zoom -\n          this.camera.pos.y,\n        width: rect.width / this.camera.zoom,\n        height: rect.height / this.camera.zoom,\n      };\n      this.updateViewportQuadtree(connection);\n\n      // use debug div to show connection\n      // const debug = document.getElementById('debug');\n      // const debugRect = this.connectionRects[connection.id];\n      // if (debug) {\n      //   debug.style.left = `${debugRect.left}px`;\n      //   debug.style.top = `${debugRect.top}px`;\n      //   debug.style.width = `${debugRect.width}px`;\n      //   debug.style.height = `${debugRect.height}px`;\n      // }\n    }\n    this.updateViewportQuadtree(this.activeNode);\n\n    this.activeNode = null;\n  }\n\n  createNewConnection(startPos: Coords, type: 'input' | 'output') {\n    const connection = document.createElement(\n      'logic-flow-connection',\n    ) as HTMLLogicFlowConnectionElement;\n    connection.start = startPos;\n    connection.end = startPos;\n    connection.type = type;\n\n    this.activeConnection = connection;\n    this.contentEl.appendChild(connection);\n  }\n\n  moveActiveConnection(loc: Coords, snappingDist: number) {\n    const aConn = this.activeConnection;\n\n    const worldCoords = this.camera.toWorldCoords({\n      x: loc.x - this.viewportOffset.left,\n      y: loc.y - this.viewportOffset.top,\n    });\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappableConnector) {\n      const rect = this.connectorRects[snappableConnector.id];\n      aConn.end = this.getRectCenter(rect);\n    } else {\n      aConn.end = worldCoords;\n    }\n  }\n\n  getTargetConnector(target: HTMLElement, loc: Coords, snappingDist: number) {\n    let targetConnector = target.closest(\n      'logic-flow-connector .connector',\n    ) as HTMLLogicFlowConnectorElement;\n\n    const snappedConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappedConnector) {\n      targetConnector = this.connectors.get(snappedConnector.id);\n    }\n\n    return targetConnector;\n  }\n\n  startNewConnection(\n    target: HTMLLogicFlowConnectorElement,\n    cursor = 'grabbing',\n  ) {\n    if (!target) return false;\n\n    const connEl = target.closest(\n      'logic-flow-connector .connector',\n    ) as HTMLLogicFlowConnectorElement;\n    if (!connEl) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnector = connEl;\n\n    const parentConn = connEl.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n    const rect = this.connectorRects[parentConn.id];\n    const center = this.getRectCenter(rect);\n\n    this.createNewConnection(center, parentConn.type);\n\n    return true;\n  }\n\n  processConnection(target: HTMLLogicFlowConnectorElement) {\n    const aConn = this.activeConnector.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n    const tConn = target.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n\n    // find parent nodes\n    const aNode = aConn.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n    const tNode = tConn.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n\n    // validate connection\n    if (!this.isValidConnection(aConn, tConn, aNode, tNode, target)) {\n      this.activeConnection.remove();\n      // remove from rects\n      delete this.connectionRects[this.activeConnection.id];\n      return;\n    }\n\n    // if connector has a onConnection callback\n    // call it. If it returns false, cancel the connection\n    const connection = this.activeConnection;\n    if (target.onConnection) {\n      target.onConnection(aConn).then(result => {\n        if (result === false) {\n          // destroy connection\n          connection.remove();\n          // remove from rects\n          delete this.connectionRects[connection.id];\n        }\n      });\n    }\n\n    this.updateConnectionEndpoints(aConn, tConn);\n    this.finalizeConnection(aConn, tConn);\n\n    // update rect\n    const path = this.activeConnection.querySelector('path');\n    const rect = path.getBoundingClientRect();\n    this.connectionRects[this.activeConnection.id] = {\n      left:\n        (rect.x - this.viewportOffset.left) / this.camera.zoom -\n        this.camera.pos.x,\n      top:\n        (rect.y - this.viewportOffset.top) / this.camera.zoom -\n        this.camera.pos.y,\n      width: rect.width / this.camera.zoom,\n      height: rect.height / this.camera.zoom,\n    };\n\n    // use debug div to show connection\n    // const debug = document.getElementById('debug');\n    // const debugRect = this.connectionRects[this.activeConnection.id];\n    // if (debug) {\n    //   debug.style.left = `${debugRect.left}px`;\n    //   debug.style.top = `${debugRect.top}px`;\n    //   debug.style.width = `${debugRect.width}px`;\n    //   debug.style.height = `${debugRect.height}px`;\n    // }\n\n    // update quadtree\n    this.updateViewportQuadtree(this.activeConnection);\n  }\n\n  isValidConnection(\n    aConn: HTMLLogicFlowConnectorElement,\n    tConn: HTMLLogicFlowConnectorElement,\n    aNode: HTMLLogicFlowNodeElement,\n    tNode: HTMLLogicFlowNodeElement,\n    targetConn: HTMLLogicFlowConnectorElement,\n  ) {\n    // avoid connecting to self or already connected\n    if (\n      this.activeConnector.connectingConnector === tConn ||\n      tConn.connectingConnector === aConn\n    ) {\n      // perhaps send an error event\n      // console.log('already connected');\n      return false;\n    }\n\n    if (aNode === tNode || this.activeConnector === targetConn) {\n      // connecting to self\n      return false;\n    }\n\n    // ensure is between input/output not same type\n    if (aConn.type === tConn.type) {\n      // console.log('same type');\n      return false;\n    }\n\n    return true;\n  }\n\n  updateConnectionEndpoints(\n    active: HTMLLogicFlowConnectorElement,\n    target: HTMLLogicFlowConnectorElement,\n  ) {\n    const targRect = this.connectorRects[target.id];\n\n    if (active.type === 'input') {\n      // swap start and end connections\n      this.activeConnection.start = this.getRectCenter(targRect);\n      this.activeConnection.end = this.activeConnectorStartPos;\n      this.activeConnection.type = 'output';\n\n      const rect = this.connectorRects[active.id];\n      this.activeConnection.end = this.getRectCenter(rect);\n    } else {\n      this.activeConnection.end = this.getRectCenter(targRect);\n    }\n  }\n\n  finalizeConnection(\n    active: HTMLLogicFlowConnectorElement,\n    target: HTMLLogicFlowConnectorElement,\n  ) {\n    active.connectingConnector = target;\n    active.connections.push(this.activeConnection);\n    target.connectingConnector = active;\n    target.connections.push(this.activeConnection);\n\n    this.activeConnection.connectors.clear();\n    this.activeConnection.connectors.add(active);\n    this.activeConnection.connectors.add(target);\n  }\n\n  startDisconnectConnection(\n    target: HTMLLogicFlowConnectionElement,\n    loc: Coords,\n    snappingDist: number,\n    cursor = 'grabbing',\n  ) {\n    if (!target) return false;\n\n    const connection = target.closest(\n      'logic-flow-connection',\n    ) as HTMLLogicFlowConnectionElement;\n    if (!connection) return false;\n\n    this.bringToFront(connection);\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (!snappableConnector) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnection = connection;\n\n    const snapConnector = this.connectors.get(snappableConnector.id);\n    this.activeConnector =\n      snapConnector.connectingConnector as HTMLLogicFlowConnectorElement;\n\n    this.disconnectConnector(\n      this.activeConnection,\n      this.activeConnector,\n      snapConnector,\n    );\n\n    // handle type specific logic\n    if (this.activeConnector.type === 'input') {\n      this.swapConnectionEndpoints(this.activeConnection);\n      this.activeConnection.type = 'input';\n    }\n\n    return true;\n  }\n\n  disconnectConnector(\n    connection: HTMLLogicFlowConnectionElement,\n    connector: HTMLLogicFlowConnectorElement,\n    snapConnector: HTMLLogicFlowConnectorElement,\n  ) {\n    connector.connections = connector.connections.filter(c => c !== connection);\n    snapConnector.connections = snapConnector.connections.filter(\n      c => c !== connection,\n    );\n\n    connector.connectingConnector = null;\n    snapConnector.connectingConnector = null;\n  }\n\n  swapConnectionEndpoints(connection: HTMLLogicFlowConnectionElement) {\n    const { start, end } = connection;\n    connection.start = end;\n    connection.end = start;\n  }\n\n  updateNodeConnectorsQuadtree(node: HTMLLogicFlowNodeElement) {\n    const connectors = node.querySelectorAll(\n      'logic-flow-connector',\n    ) as NodeListOf<HTMLLogicFlowConnectorElement>;\n\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      let rect = this.connectorRects[connector.id];\n      if (!rect) {\n        console.log('no rect');\n        let connectorEl = connector.querySelector('.connector');\n\n        const r = connectorEl.getBoundingClientRect();\n        this.connectorRects[connector.id] = {\n          left: r.x,\n          top: r.y,\n          width: r.width,\n          height: r.height,\n        };\n        rect = this.connectorRects[connector.id];\n      }\n\n      this.connectorQuadtree.remove(connector.id);\n      this.connectorQuadtree.insert({\n        id: connector.id,\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height / 2,\n      });\n    }\n  }\n\n  updateViewportQuadtree(\n    entity: HTMLLogicFlowNodeElement | HTMLLogicFlowConnectionElement,\n  ) {\n    if (entity.tagName === 'LOGIC-FLOW-NODE') {\n      const rect = this.nodeRects[entity.id];\n\n      this.viewportQuadtree.remove(entity.id);\n\n      this.viewportQuadtree.insert({\n        id: entity.id,\n        top: rect.top,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n      });\n    } else if (entity.tagName === 'LOGIC-FLOW-CONNECTION') {\n      const rect = this.connectionRects[entity.id];\n\n      this.viewportQuadtree.remove(entity.id);\n\n      this.viewportQuadtree.insert({\n        id: entity.id,\n        top: rect.top,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n      });\n    }\n  }\n\n  updateVisibleElements() {\n    // Get visible nodes within the viewport quadtree\n    let rect = this.viewportRect;\n    rect = {\n      left: rect.left,\n      top: rect.top,\n      width: rect.width,\n      height: rect.height,\n    };\n\n    const visibleEntities = this.viewportQuadtree.query(\n      rect,\n      [],\n      this.camera.pos,\n      this.camera.zoom,\n    );\n\n    const newVisibleElements = visibleEntities.map((entity: any) => entity.id);\n    // console.log('newVisibleElements', newVisibleElements);\n\n    const allItems = new Set([\n      ...this.prevVisibleElements,\n      ...newVisibleElements,\n    ]);\n\n    // Update the previous visible elements\n    this.prevVisibleElements = newVisibleElements;\n\n    // Update elements that changed visibility\n    for (const id of allItems) {\n      const el = document.getElementById(id);\n      if (el) {\n        const entityComponent = el as\n          | HTMLLogicFlowNodeElement\n          | HTMLLogicFlowConnectionElement;\n        const curstate = entityComponent.isVisible;\n        const prevState = this.prevVisibleElements.includes(id);\n        const newstate = newVisibleElements.includes(id);\n        if (prevState === curstate && newstate === curstate) {\n          continue;\n        }\n\n        entityComponent.isVisible = newVisibleElements.includes(id);\n      }\n    }\n  }\n}\n","import { Camera } from '../types/Camera';\n\nexport const renderCanvasGrid = (\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  gridSize: number,\n  color: string,\n  bgColor: string,\n  camera: Camera,\n) => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n\n  let step = gridSize * camera.zoom;\n\n  // if the step is too small because of zoom, increase it by a factor of 10\n  if (step < 10) {\n    step *= 2;\n  }\n\n  // const dpr = window.devicePixelRatio || 1;\n  // canvas.width = width * dpr;\n  // canvas.height = height * dpr;\n  // ctx.scale(dpr, dpr);\n\n  // canvas.width = width;\n  // canvas.height = height;\n\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n\n  //clear\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(0, 0, width, height);\n\n  const offsetX = (-camera.pos.x % gridSize) * camera.zoom;\n  const offsetY = (-camera.pos.y % gridSize) * camera.zoom;\n\n  ctx.beginPath();\n\n  for (let x = -offsetX; x < width; x += step) {\n    ctx.moveTo(x, 0);\n    ctx.lineTo(x, height);\n  }\n\n  for (let y = -offsetY; y < height; y += step) {\n    ctx.moveTo(0, y);\n    ctx.lineTo(width, y);\n  }\n\n  ctx.stroke();\n};\n\nexport const renderCanvasDotGrid = (\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  gridSize: number,\n  color: string,\n  bgColor: string,\n  camera: Camera,\n) => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n\n  let step = gridSize * camera.zoom;\n\n  // if the step is too small because of zoom, increase it by a factor of 10\n  if (step < 10) {\n    step *= 2;\n  }\n\n  // const dpr = window.devicePixelRatio || 1;\n  // canvas.width = width * dpr;\n  // canvas.height = height * dpr;\n  // ctx.scale(dpr, dpr);\n\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n\n  //clear\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(0, 0, width, height);\n\n  const offsetX = (-camera.pos.x % gridSize) * camera.zoom;\n  const offsetY = (-camera.pos.y % gridSize) * camera.zoom;\n\n  ctx.beginPath();\n\n  // for (let x = -offsetX; x < width; x += step) {\n  //   for (let y = -offsetY; y < height; y += step) {\n  //     ctx.moveTo(x, y);\n  //     ctx.arc(x, y, 1, 0, 2 * Math.PI);\n  //   }\n  // }\n\n  ctx.fillStyle = color;\n\n  for (let x = -offsetX; x < width; x += step) {\n    for (let y = -offsetY; y < height; y += step) {\n      //  ctx.moveTo(x, y);\n      //  ctx.arc(x, y, 1, 0, 2 * Math.PI);\n      // use fill rect\n      ctx.fillRect(x - 1, y - 1, 2, 2);\n    }\n  }\n\n  ctx.stroke();\n};\n",":host {\n  display: block;\n}\n","import { Component, Prop, h, Element, Watch, Method } from '@stencil/core';\nimport { debounce } from '../../utils/debounce';\nimport { throttle } from '../../utils/throttle';\nimport { getEventLocation } from '../../utils/getEventLocation';\nimport { ViewContext } from '../../types/ViewContext';\nimport {\n  renderCanvasDotGrid,\n  renderCanvasGrid,\n} from '../../utils/renderCanvasGrid';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-viewport',\n  styleUrl: 'logic-flow-viewport.css',\n  shadow: false,\n})\nexport class LogicFlowViewport {\n  @Element() el: HTMLLogicFlowViewportElement;\n\n  @Prop() showGrid: boolean = true;\n  @Prop() gridType: 'line' | 'dot' = 'line';\n  @Prop() gridSize: number = 20;\n  @Prop() gridBgColor: string = '#f7f7f7';\n  @Prop() gridLineColor: string = '#555555';\n  @Prop() maxZoom: number = 3;\n  @Prop() minZoom: number = 0.2;\n  @Prop() zoomSpeed: number = 0.08;\n  @Prop() snapToGrid: boolean = false;\n  @Prop() connectorSnappingDistance: number = 37;\n  @Prop() cursors: Record<string, string> = {\n    default: 'auto',\n    panning: 'grabbing',\n    moving: 'grabbing',\n  };\n\n  ctx: ViewContext;\n\n  resizeObserver: ResizeObserver;\n  debouncedResize = debounce(() => this.onResize(), 16);\n  debouncedUpdateScreen = debounce(() => this.updateScreen(), 1);\n  debouncedUpdateViewportRect = debounce(\n    () => this.ctx.updateViewportRect(),\n    100,\n  );\n  throttledTouchMove = throttle(e => this.handleTouchMove(e), 1);\n  forceContentReflowDebounced = debounce(() => this.forceContentReflow(), 30);\n\n  elMouseDown = (e: MouseEvent | TouchEvent) => this.onPointerDown(e);\n  elMouseUp = (e: MouseEvent | TouchEvent) => this.onPointerUp(e);\n  elMouseMove = (e: MouseEvent | TouchEvent) => this.onPointerMove(e);\n\n  elTouchStart = (e: TouchEvent) => this.handleTouchStart(e);\n  elTouchMove = (e: TouchEvent) => this.throttledTouchMove(e);\n  elTouchEnd = (e: MouseEvent | TouchEvent) => this.onPointerUp(e);\n\n  elWheel = (e: WheelEvent) => this.handleWheel(e);\n\n  elScroll = () => this.debouncedUpdateViewportRect();\n\n  elKeyPress = (e: KeyboardEvent) => this.onKeyPress(e);\n\n  componentDidLoad() {\n    this.ctx = new ViewContext(this.el);\n    // this.ctx.camera = this.ctx.camera;\n\n    this.ctx.viewportEl = this.el.querySelector(\n      '.logic-flow-viewport',\n    ) as HTMLDivElement;\n    this.ctx.contentEl = this.el.querySelector(\n      '.viewport-content',\n    ) as HTMLDivElement;\n    this.ctx.gridEl = this.el.querySelector(\n      '.logic-flow-grid',\n    ) as HTMLCanvasElement;\n    // this.ctx.viewportRect = this.ctx.viewportEl.getBoundingClientRect();\n    this.ctx.initialPinchDistance = 0;\n    this.ctx.snapToGrid = this.snapToGrid;\n    this.ctx.connectorSnapDistance = this.connectorSnappingDistance;\n\n    const viewportEl = this.ctx.viewportEl;\n\n    // setup event listeners\n    window.addEventListener('mousedown', this.elMouseDown, {\n      passive: true,\n    });\n    viewportEl.addEventListener('mouseup', this.elMouseUp, { passive: true });\n    viewportEl.addEventListener('mousemove', this.elMouseMove, {\n      passive: true,\n    });\n\n    viewportEl.addEventListener('touchstart', this.elTouchStart, {\n      passive: false,\n    });\n    viewportEl.addEventListener('touchmove', this.elTouchMove, {\n      passive: false,\n    });\n    viewportEl.addEventListener('touchend', this.elTouchEnd, { passive: true });\n\n    viewportEl.addEventListener('wheel', this.elWheel, { passive: false });\n\n    window.addEventListener('scroll', this.elScroll, { passive: true });\n\n    window.addEventListener('keydown', this.elKeyPress, { passive: true });\n\n    // Handle resize events\n    this.resizeObserver = new ResizeObserver(() => this.debouncedResize());\n    this.resizeObserver.observe(this.ctx.viewportEl);\n\n    this.renderGrid();\n  }\n\n  disconnectedCallback() {\n    // Clean up resize observer\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n\n    // Clean up event listeners\n    const canvasEl = this.ctx.viewportEl;\n    window.removeEventListener('mousedown', this.elMouseDown);\n    canvasEl.removeEventListener('mouseup', this.elMouseUp);\n    canvasEl.removeEventListener('mousemove', this.elMouseMove);\n\n    canvasEl.removeEventListener('touchstart', this.elTouchStart);\n    canvasEl.removeEventListener('touchmove', this.elTouchMove);\n    canvasEl.removeEventListener('touchend', this.elTouchEnd);\n\n    canvasEl.removeEventListener('wheel', this.elWheel);\n\n    window.removeEventListener('scroll', this.elScroll);\n\n    window.removeEventListener('keydown', this.elKeyPress);\n\n    this.ctx.destroy();\n  }\n\n  @Method()\n  async getContext() {\n    return this.ctx;\n  }\n\n  @Method()\n  async screenToWorldCoords(screenCoords: Coords) {\n    // adjust screen coords to viewport offset\n    const loc = {\n      x: screenCoords.x - this.ctx.viewportOffset.left,\n      y: screenCoords.y - this.ctx.viewportOffset.top,\n    };\n\n    return this.ctx.camera.toWorldCoords(loc);\n  }\n\n  @Watch('snapToGrid')\n  onSnapToGridChange() {\n    this.ctx.snapToGrid = this.snapToGrid;\n  }\n\n  @Watch('gridType')\n  onGridTypeChange() {\n    this.ctx.needsRedraw = true;\n    this.renderGrid();\n  }\n\n  scheduleComponentUpdate() {\n    this.ctx.needsRedraw = true;\n    this.ctx.debouncedUpdateVisibleElements();\n    this.debouncedUpdateScreen();\n  }\n\n  onResize() {\n    // console.log('onResize');\n    this.ctx.needsRedraw = true;\n    this.ctx.viewportRect = this.ctx.viewportEl.getBoundingClientRect();\n\n    this.ctx.gridEl.width = this.ctx.viewportRect.width;\n    this.ctx.gridEl.height = this.ctx.viewportRect.height;\n\n    this.ctx.viewportOffset = {\n      top: this.ctx.viewportRect.top,\n      left: this.ctx.viewportRect.left,\n    };\n\n    // update quadtree boundary\n    const boundary = {\n      left: this.ctx.viewportRect.left - this.ctx.viewportRect.left,\n      top: this.ctx.viewportRect.top - this.ctx.viewportRect.top,\n      width: this.ctx.viewportRect.width,\n      height: this.ctx.viewportRect.height,\n    };\n\n    // get set viewport rect\n    this.ctx.viewportRect = boundary;\n\n    // this.ctx.connectorQuadtree.boundary = this.ctx.viewportRect;\n    this.ctx.viewportQuadtree.boundary = this.ctx.viewportRect;\n\n    this.renderGrid();\n  }\n\n  renderGrid() {\n    if (!this.showGrid || !this.ctx.needsRedraw) return;\n\n    requestAnimationFrame(() => {\n      if (this.gridType === 'line') {\n        renderCanvasGrid(\n          this.ctx.gridEl,\n          this.ctx.viewportRect.width,\n          this.ctx.viewportRect.height,\n          this.gridSize,\n          this.gridLineColor,\n          this.gridBgColor,\n          this.ctx.camera,\n        );\n      }\n\n      if (this.gridType === 'dot') {\n        renderCanvasDotGrid(\n          this.ctx.gridEl,\n          this.ctx.viewportRect.width,\n          this.ctx.viewportRect.height,\n          this.gridSize,\n          this.gridLineColor,\n          this.gridBgColor,\n          this.ctx.camera,\n        );\n      }\n    });\n\n    this.ctx.needsRedraw = false;\n  }\n\n  updateScreen() {\n    requestAnimationFrame(() => {\n      const contentEl = this.ctx.contentEl;\n      // Apply transformations to the content, aligning with the grid\n      contentEl.style.transform = `perspective(1px) scale(${this.ctx.camera.zoom}) translate(${this.ctx.camera.pos.x}px, ${this.ctx.camera.pos.y}px)`;\n      this.renderGrid();\n    });\n  }\n\n  onKeyPress(event: KeyboardEvent) {\n    // if delete key pressed\n    // check if node or connection is current focused\n    // if so, delete it\n\n    if (event.key === 'Delete') {\n      const target = document.activeElement as HTMLElement;\n\n      if (target.tagName === 'LOGIC-FLOW-NODE') {\n        // this.ctx.removeNode(target.id);\n        // remove from dom\n        target.remove();\n      } else if (target.closest('logic-flow-connection')) {\n        // this.ctx.removeConnection(target.id);\n        // remove from dom\n        // target.remove();\n        const connection = target.closest('logic-flow-connection');\n        connection.remove();\n      }\n    }\n  }\n\n  onPointerDown(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n    const worldCoords = this.ctx.camera.toWorldCoords(loc);\n    const target = document.elementFromPoint(loc.x, loc.y) as HTMLElement;\n\n    // if pointer outside viewport, return\n    if (\n      loc.x > this.ctx.viewportOffset.left + this.ctx.viewportRect.width ||\n      loc.x < this.ctx.viewportOffset.left ||\n      loc.y > this.ctx.viewportOffset.top + this.ctx.viewportRect.height ||\n      loc.y < this.ctx.viewportOffset.top\n    ) {\n      return;\n    }\n\n    // if target is not a logic-flow element, return\n    if (\n      !target ||\n      !target.closest(\n        'logic-flow-node, logic-flow-connector, logic-flow-connection, logic-flow-viewport',\n      )\n    ) {\n      return;\n    }\n\n    // if a connection clicked\n    if (\n      this.ctx.startDisconnectConnection(\n        target as HTMLLogicFlowConnectionElement,\n        loc,\n        this.connectorSnappingDistance,\n        this.cursors.moving,\n      )\n    )\n      return;\n\n    // if a connector clicked\n    if (this.ctx.startNewConnection(target as HTMLLogicFlowConnectorElement))\n      return;\n\n    // if a node clicked\n    if (this.ctx.startNodeDrag(target as HTMLLogicFlowNodeElement, worldCoords))\n      return;\n\n    // if nothing clicked, then start panning\n    this.ctx.startPanning(worldCoords);\n  }\n\n  onPointerUp(event: MouseEvent | TouchEvent) {\n    if (this.ctx.activeConnector && this.ctx.activeConnection) {\n      this.onEndActiveConnection(event);\n    } else if (this.ctx.activeNode && this.ctx.activeNodeDragging) {\n      this.ctx.endNodeDrag();\n    }\n\n    this.ctx.resetPointerStates();\n  }\n\n  onEndActiveConnection(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n    let target = event.target as HTMLElement;\n\n    // For touch events, get the element at the touch point\n    if (event instanceof TouchEvent) {\n      target = document.elementFromPoint(loc.x, loc.y) as HTMLElement;\n    }\n\n    let targetConnector = this.ctx.getTargetConnector(\n      target,\n      loc,\n      this.connectorSnappingDistance,\n    );\n\n    if (targetConnector) {\n      this.ctx.processConnection(targetConnector);\n    } else {\n      this.ctx.activeConnection.remove();\n    }\n\n    // clear active states\n    this.ctx.activeConnector = null;\n    this.ctx.activeConnection = null;\n  }\n\n  onPointerMove(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n\n    if (this.ctx.activeConnector && this.ctx.activeConnection) {\n      this.ctx.moveActiveConnection(loc, this.connectorSnappingDistance);\n    } else if (this.ctx.activeNode && this.ctx.activeNodeDragging) {\n      this.ctx.moveNode(loc, this.gridSize);\n    } else if (this.ctx.isPanning) {\n      this.ctx.panCamera(loc);\n      this.scheduleComponentUpdate();\n    }\n  }\n\n  handleWheel(event: WheelEvent) {\n    event.preventDefault();\n\n    const canvasRect = this.ctx.viewportRect;\n    const mouseX =\n      event.clientX - canvasRect.left - this.ctx.viewportOffset.left;\n    const mouseY = event.clientY - canvasRect.top - this.ctx.viewportOffset.top;\n\n    // Calculate the zoom level change\n    const zoomDelta = event.deltaY < 0 ? this.zoomSpeed : -this.zoomSpeed;\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.ctx.camera.zoom + zoomDelta),\n    );\n\n    // Calculate the scale factor\n    const scaleFactor = newZoom / this.ctx.camera.zoom;\n\n    // Adjust the pan position to keep the same point under the cursor\n    const newPanX =\n      mouseX -\n      (mouseX - this.ctx.camera.pos.x * this.ctx.camera.zoom) * scaleFactor;\n\n    const newPanY =\n      mouseY -\n      (mouseY - this.ctx.camera.pos.y * this.ctx.camera.zoom) * scaleFactor;\n\n    // Update pan and zoom\n    this.ctx.camera.pos = { x: newPanX / newZoom, y: newPanY / newZoom };\n\n    // this.lastZoom = this.ctx.camera.zoom;\n    this.ctx.camera.zoom = newZoom;\n\n    // if zooming in, force a reflow to prevent blurry text\n    if (zoomDelta > 0) {\n      this.forceContentReflowDebounced();\n    }\n\n    // this.ctx.needsRedraw = true;\n    this.scheduleComponentUpdate();\n  }\n\n  handleTouchStart(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> start panning\n      this.onPointerDown(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> start pinch zoom\n      this.ctx.initialPinchDistance = 0; // Reset initial pinch distance\n      this.handlePinch(event); // Start pinch gesture\n    }\n  }\n\n  handleTouchMove(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> panning\n      this.onPointerMove(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> pinch zooming\n      this.handlePinch(event);\n    }\n  }\n\n  handlePinch(event: TouchEvent) {\n    if (event.touches.length !== 2) return;\n\n    // handle panning while pinching\n    this.onPointerMove(event);\n\n    event.preventDefault(); // Prevent default behavior like scrolling\n\n    const touch1 = event.touches[0];\n    const touch2 = event.touches[1];\n\n    // Calculate the distance between the two touch points (pinch)\n    const distance = Math.sqrt(\n      (touch1.clientX - touch2.clientX) ** 2 +\n        (touch1.clientY - touch2.clientY) ** 2,\n    );\n\n    if (this.ctx.initialPinchDistance === 0) {\n      // If it's the start of the pinch, initialize the pinch distance\n      this.ctx.initialPinchDistance = distance;\n    } else {\n      // Calculate the scale factor based on the distance change\n      const scaleFactor = distance / this.ctx.initialPinchDistance;\n\n      // Calculate the midpoint between the two fingers (the pinch center)\n      const pinchCenterX = (touch1.clientX + touch2.clientX) / 2;\n      const pinchCenterY = (touch1.clientY + touch2.clientY) / 2;\n\n      // Apply zoom and keep the pinch center fixed\n      this.adjustZoomOnPinch(scaleFactor, pinchCenterX, pinchCenterY);\n\n      // Update the initial pinch distance for the next move\n      this.ctx.initialPinchDistance = distance;\n    }\n  }\n\n  adjustZoomOnPinch(\n    scaleFactor: number,\n    pinchCenterX: number,\n    pinchCenterY: number,\n  ) {\n    // Calculate new zoom, ensuring it stays within min/max bounds\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.ctx.camera.zoom * scaleFactor),\n    );\n\n    // Find the pinch center position relative to the content's current position and zoom\n    const pinchContentX =\n      (pinchCenterX - this.ctx.camera.pos.x * this.ctx.camera.zoom) /\n      this.ctx.camera.zoom;\n    const pinchContentY =\n      (pinchCenterY - this.ctx.camera.pos.y * this.ctx.camera.zoom) /\n      this.ctx.camera.zoom;\n\n    // Adjust pan so the pinch center stays fixed after zooming\n    this.ctx.camera.pos = {\n      x: pinchCenterX / newZoom - pinchContentX,\n      y: pinchCenterY / newZoom - pinchContentY,\n    };\n\n    // Apply the new zoom level\n    this.ctx.camera.zoom = newZoom;\n\n    // if zooming in, force a reflow to prevent blurry text\n    if (scaleFactor > 1) {\n      this.forceContentReflowDebounced();\n    }\n\n    // Trigger a screen redraw\n    this.debouncedUpdateScreen();\n  }\n\n  forceContentReflow() {\n    // force repaint the content\n    const cdisplay = this.ctx.contentEl.style.display;\n    this.ctx.contentEl.style.display = 'none';\n    this.ctx.contentEl.offsetHeight; // trigger reflow\n    this.ctx.contentEl.style.display = cdisplay;\n  }\n\n  render() {\n    return (\n      <div class=\"logic-flow-viewport\">\n        <canvas\n          class=\"logic-flow-grid\"\n          style={{ display: this.showGrid ? 'block' : 'none' }}\n        ></canvas>\n        <div class=\"viewport-content\">\n          <slot></slot>\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}