{"version":3,"names":["logicFlowConnectorCss","LogicFlowConnectorStyle0","LogicFlowConnector","render","sideClass","this","type","typeClass","h","Host","key","class","connections","length","logicFlowNodeCss","LogicFlowNodeStyle0","LogicFlowNode","style","x","y","componentWillLoad","updateTransform","onPositionChange","position","newValue","JSON","parse","el","transform","componentWillRender","isVisible","display","name","debounce","fn","delay","timeout","args","clearTimeout","setTimeout","throttle","lastFunc","lastRan","Date","now","getEventLocation","e","MouseEvent","clientX","clientY","TouchEvent","touches","changedTouches","urlAlphabet","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet","Quadtree","constructor","boundary","capacity","camera","objects","divided","northeast","northwest","southeast","southwest","subdivide","left","top","width","height","halfWidth","halfHeight","insert","object","push","remove","removeFromNode","node","originalLength","filter","obj","contains","containsPoint","containsRect","point","rect","query","range","found","pan","zoom","intersects","forEach","inRange","pointInRange","rectInRange","adjX","adjY","adjLeft","adjTop","adjRight","adjBottom","checkNearby","coords","bounds","nearby","pos","Camera","uid","toScreenCoords","worldCoords","toWorldCoords","screenCoords","ViewContext","viewport","nodes","Map","connectors","connectorSnapDistance","connectorRects","nodeRects","visibleElements","prevVisibleElements","needsRedraw","initialPinchDistance","isPanning","snapToGrid","dragStart","activeNodeDragging","activeNodeDragStart","activeConnectorStartPos","viewportOffset","bringingToFront","debouncedUpdateVisibleElements","updateVisibleElements","viewportId","instances","has","get","set","viewportRect","getBoundingClientRect","boundry","connectorQuadtree","viewportQuadtree","initializeViewport","observer","MutationObserver","m","viewportMutation","observe","childList","subtree","destroy","disconnect","delete","updateViewportRect","viewportEl","seekAndDestroy","instance","unregisterNode","unregisterConnector","unregisterConnection","registerNode","setAttribute","updateViewportQuadtree","updateNodeConnectorsQuadtree","registerConnector","connector","connectorEl","querySelector","registerConnection","connection","document","getElementById","mutations","mutation","i","addedNodes","HTMLElement","tagName","logicNode","logicConnector","logicConnection","removedNodes","getAttribute","contentEl","children","traverse","console","log","bringToFront","_a","parentElement","appendChild","setCursor","cursor","body","resetCursor","getRectCenter","startPanning","panCamera","loc","resetPointerStates","startNodeDrag","target","closest","activeNode","updateNodeConnectorPos","aNode","delta","querySelectorAll","Object","assign","updateNodeConnectorConnectionsPos","end","start","calcSnapToGrid","gridSize","Math","round","calcNodePos","moveNode","oldPos","newPos","clientWidth","clientHeight","endNodeDrag","createNewConnection","startPos","createElement","activeConnection","moveActiveConnection","snappingDist","aConn","snappableConnector","getTargetConnector","targetConnector","snappedConnector","startNewConnection","connEl","activeConnector","parentConn","center","processConnection","tConn","tNode","isValidConnection","updateConnectionEndpoints","finalizeConnection","targetConn","connectingConnector","active","targRect","startDisconnectConnection","snapConnector","disconnectConnector","swapConnectionEndpoints","c","r","visibleNodes","newVisibleElements","map","allItems","Set","nodeComponent","curstate","prevState","includes","newstate","renderCanvasGrid","canvas","color","bgColor","ctx","getContext","step","strokeStyle","lineWidth","fillStyle","fillRect","offsetX","offsetY","beginPath","moveTo","lineTo","stroke","renderCanvasDotGrid","logicFlowViewportCss","LogicFlowViewportStyle0","LogicFlowViewport","debouncedResize","onResize","debouncedUpdateScreen","updateScreen","debouncedUpdateViewportRect","throttledTouchMove","handleTouchMove","forceContentReflowDebounced","forceContentReflow","elMouseDown","onPointerDown","elMouseUp","onPointerUp","elMouseMove","onPointerMove","elTouchStart","handleTouchStart","elTouchMove","elTouchEnd","elWheel","handleWheel","elScroll","default","panning","moving","componentDidLoad","gridEl","connectorSnappingDistance","window","addEventListener","passive","resizeObserver","ResizeObserver","renderGrid","disconnectedCallback","canvasEl","removeEventListener","getCamera","screenToWorldCoords","onSnapToGridChange","onGridTypeChange","scheduleComponentUpdate","showGrid","gridType","requestAnimationFrame","gridLineColor","gridBgColor","event","elementFromPoint","cursors","onEndActiveConnection","preventDefault","canvasRect","mouseX","mouseY","zoomDelta","deltaY","zoomSpeed","newZoom","min","maxZoom","max","minZoom","scaleFactor","newPanX","newPanY","handlePinch","touch1","touch2","distance","sqrt","pinchCenterX","pinchCenterY","adjustZoomOnPinch","pinchContentX","pinchContentY","cdisplay"],"sources":["src/components/logic-flow-connector/logic-flow-connector.css?tag=logic-flow-connector","src/components/logic-flow-connector/logic-flow-connector.tsx","src/components/logic-flow-node/logic-flow-node.css?tag=logic-flow-node","src/components/logic-flow-node/logic-flow-node.tsx","src/utils/debounce.ts","src/utils/throttle.ts","src/utils/getEventLocation.ts","../../node_modules/nanoid/url-alphabet/index.js","../../node_modules/nanoid/index.browser.js","src/types/Quadtree.ts","src/types/Camera.ts","src/types/ViewContext.ts","src/utils/renderCanvasGrid.ts","src/components/logic-flow-viewport/logic-flow-viewport.css?tag=logic-flow-viewport","src/components/logic-flow-viewport/logic-flow-viewport.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\nimport { LogicFlowConnection } from '../logic-flow-connection/logic-flow-connection';\n\n@Component({\n  tag: 'logic-flow-connector',\n  styleUrl: 'logic-flow-connector.css',\n  shadow: false,\n})\nexport class LogicFlowConnector {\n  @Element() el: HTMLElement;\n\n  @Prop() type: 'input' | 'output' = 'input';\n  @Prop() connectingConnector: LogicFlowConnector | null = null;\n  @Prop() connections: LogicFlowConnection[] = [];\n\n  render() {\n    const sideClass =\n      this.type === 'input' ? 'left-connector' : 'right-connector';\n    const typeClass =\n      this.type === 'input' ? 'input-connector' : 'output-connector';\n\n    return (\n      <Host class={`logic-flow-connector ${typeClass}`}>\n        <div\n          class={`connector ${sideClass} ${\n            this.connections.length > 0 && 'connected'\n          }`}\n        ></div>\n        <div class={`connector-content ${sideClass}`}>\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import { Component, Host, Prop, h, Element, State, Watch } from '@stencil/core';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-node',\n  styleUrl: 'logic-flow-node.css',\n  shadow: false,\n})\nexport class LogicFlowNode {\n  @Element() el: HTMLElement;\n\n  @Prop() type: string = 'default';\n  @Prop() name: string = 'Node';\n  @Prop({ mutable: true }) position: Coords = { x: 0, y: 0 };\n  @Prop({ mutable: true }) isVisible: boolean = true;\n\n  @State() isDragging = false;\n\n  style = {};\n\n  componentWillLoad() {\n    //  set initial size\n    this.updateTransform();\n\n    // this.position = { x: this.position.x, y: this.position.y };\n    this.onPositionChange(this.position);\n  }\n\n  @Watch('position')\n  onPositionChange(newValue: Coords | string) {\n    if (typeof newValue === 'string') {\n      this.position = JSON.parse(newValue);\n    }\n    // update transform\n    this.updateTransform();\n  }\n\n  updateTransform() {\n    this.el.style.transform = `translate(${this.position.x}px, ${this.position.y}px )`;\n  }\n\n  componentWillRender() {\n    if (!this.isVisible) {\n      this.style = { display: 'none' };\n    } else {\n      this.style = {};\n    }\n  }\n\n  render() {\n    // console.log('render', this.isVisible);\n    return (\n      <Host class=\"logic-flow-node\" style={this.style}>\n        <div class=\"logic-flow-node-header\">\n          {this.name}\n          <slot name=\"header\"></slot>\n        </div>\n        <slot></slot>\n        <div class=\"logic-flow-node-footer\">\n          <slot name=\"footer\"></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n","export const debounce = (fn: (...args: any[]) => void, delay: number) => {\n  let timeout: ReturnType<typeof setTimeout>;\n  return (...args: any[]) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n};\n","export const throttle = (fn: (...args: any[]) => void, delay: number) => {\n  let lastFunc: ReturnType<typeof setTimeout>;\n  let lastRan: number;\n  return (...args: any[]) => {\n    if (!lastRan) {\n      fn(...args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc);\n      lastFunc = setTimeout(() => {\n        if (Date.now() - lastRan >= delay) {\n          fn(...args);\n          lastRan = Date.now();\n        }\n      }, delay - (Date.now() - lastRan));\n    }\n  };\n};\n","export const getEventLocation = (e: MouseEvent | TouchEvent) => {\n  if (e instanceof MouseEvent) {\n    return { x: e.clientX, y: e.clientY };\n  } else if (e instanceof TouchEvent && e.touches.length > 0) {\n    return { x: e.touches[0].clientX, y: e.touches[0].clientY };\n  } else if (e instanceof TouchEvent && e.changedTouches.length > 0) {\n    return { x: e.changedTouches[0].clientX, y: e.changedTouches[0].clientY };\n  }\n  return { x: 0, y: 0 };\n};\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { Coords } from './Coords';\nimport { Rect } from './Rect';\nimport { Camera } from './Camera';\n\n// SpatialObject can be either a Point or a Rect with an ID for tracking\ntype SpatialObject = Point | BBox;\n\ninterface Point extends Coords {\n  id: string; // Unique ID of the point (e.g., connector)\n}\n\ninterface BBox extends Rect {\n  id: string; // Unique ID of the rect (e.g., node)\n}\n\nexport class Quadtree {\n  boundary: Rect;\n  capacity: number;\n  objects: SpatialObject[];\n  divided: boolean;\n  northeast: Quadtree | null;\n  northwest: Quadtree | null;\n  southeast: Quadtree | null;\n  southwest: Quadtree | null;\n  camera: Camera;\n\n  constructor(boundary: Rect, capacity: number, camera: Camera) {\n    this.boundary = boundary;\n    this.capacity = capacity;\n    this.objects = [];\n    this.divided = false;\n    this.northeast = null;\n    this.northwest = null;\n    this.southeast = null;\n    this.southwest = null;\n    this.camera = camera;\n  }\n\n  subdivide() {\n    const { left, top, width, height } = this.boundary;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n\n    this.northeast = new Quadtree(\n      { left: left + halfWidth, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.northwest = new Quadtree(\n      { left, top, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n    this.southeast = new Quadtree(\n      {\n        left: left + halfWidth,\n        top: top + halfHeight,\n        width: halfWidth,\n        height: halfHeight,\n      },\n      this.capacity,\n      this.camera,\n    );\n    this.southwest = new Quadtree(\n      { left, top: top + halfHeight, width: halfWidth, height: halfHeight },\n      this.capacity,\n      this.camera,\n    );\n\n    this.divided = true;\n  }\n\n  insert(object: SpatialObject): boolean {\n    // if (!this.contains(object)) console.log('Object out of bounds');\n    // if (!this.contains(object)) return false;\n\n    if (this.objects.length < this.capacity) {\n      this.objects.push(object);\n      return true;\n    } else {\n      if (!this.divided) this.subdivide();\n\n      return (\n        this.northeast!.insert(object) ||\n        this.northwest!.insert(object) ||\n        this.southeast!.insert(object) ||\n        this.southwest!.insert(object)\n      );\n    }\n  }\n\n  remove(id: string): boolean {\n    const removeFromNode = (node: Quadtree | null): boolean => {\n      if (!node) return false;\n\n      const originalLength = node.objects.length;\n      node.objects = node.objects.filter(obj => (obj as any).id !== id);\n\n      // If any objects were removed, return true\n      if (originalLength !== node.objects.length) return true;\n\n      // Recursively remove from child nodes if subdivided\n      if (node.divided) {\n        return (\n          removeFromNode(node.northwest) ||\n          removeFromNode(node.northeast) ||\n          removeFromNode(node.southwest) ||\n          removeFromNode(node.southeast)\n        );\n      }\n      return false;\n    };\n\n    return removeFromNode(this);\n  }\n\n  contains(object: SpatialObject): boolean {\n    if ('x' in object && 'y' in object) {\n      // It's a point\n      return this.containsPoint(object);\n    } else {\n      // It's a rect\n      return this.containsRect(object);\n    }\n  }\n\n  containsPoint(point: Point): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      point.x >= left &&\n      point.x < left + width &&\n      point.y >= top &&\n      point.y < top + height\n    );\n  }\n\n  containsRect(rect: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return (\n      rect.left >= left &&\n      rect.left + rect.width <= left + width &&\n      rect.top >= top &&\n      rect.top + rect.height <= top + height\n    );\n  }\n\n  query(\n    range: Rect,\n    found: SpatialObject[] = [],\n    pan: Coords,\n    zoom: number,\n  ): SpatialObject[] {\n    if (!this.intersects(range)) return found;\n\n    this.objects.forEach(obj => {\n      if (this.inRange(obj, range, pan, zoom)) {\n        found.push(obj);\n      }\n    });\n\n    if (this.divided) {\n      this.northwest!.query(range, found, pan, zoom);\n      this.northeast!.query(range, found, pan, zoom);\n      this.southwest!.query(range, found, pan, zoom);\n      this.southeast!.query(range, found, pan, zoom);\n    }\n\n    return found;\n  }\n\n  inRange(\n    object: SpatialObject,\n    range: Rect,\n    pan: Coords,\n    zoom: number,\n  ): boolean {\n    if ('x' in object && 'y' in object) {\n      // It's a point\n      return this.pointInRange(object, range, pan, zoom);\n    } else {\n      // It's a rect\n      return this.rectInRange(object, range, pan, zoom);\n    }\n  }\n\n  pointInRange(point: Point, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust point position relative to pan and zoom\n    const adjX = (point.x + pan.x) * zoom;\n    const adjY = (point.y + pan.y) * zoom;\n\n    // const screenX = adjX / zoom - pan.x;\n    // const screenY = adjY / zoom - pan.y;\n\n    // // show debug\n    // const debugDiv = document.getElementById('debug');\n    // debugDiv.style.left = `${screenX}px`;\n    // debugDiv.style.top = `${screenY}px`;\n    // debugDiv.style.width = '10px';\n    // debugDiv.style.height = '10px';\n\n    // // show debug range\n    // const screenRange = {\n    //   left: range.left / zoom - pan.x,\n    //   top: range.top / zoom - pan.y,\n    //   width: range.width / zoom,\n    //   height: range.height / zoom,\n    // };\n\n    // const debugDiv2 = document.getElementById('debug2');\n    // debugDiv2.style.left = `${screenRange.left}px`;\n    // debugDiv2.style.top = `${screenRange.top}px`;\n    // debugDiv2.style.width = `${screenRange.width}px`;\n    // debugDiv2.style.height = `${screenRange.height}px`;\n\n    return (\n      adjX >= range.left &&\n      adjX < range.left + range.width &&\n      adjY >= range.top &&\n      adjY < range.top + range.height\n    );\n  }\n\n  rectInRange(rect: Rect, range: Rect, pan: Coords, zoom: number): boolean {\n    // Adjust rect position relative to pan and zoom\n    const adjLeft = (rect.left + pan.x) * zoom;\n    const adjTop = (rect.top + pan.y) * zoom;\n\n    const adjRight = adjLeft + rect.width * zoom;\n    const adjBottom = adjTop + rect.height * zoom;\n\n    // const screenW = (adjRight - adjLeft) / this.camera.zoom;\n    // const screenH = (adjBottom - adjTop) / this.camera.zoom;\n    // const screenX = adjLeft / this.camera.zoom - pan.x;\n    // const screenY = adjTop / this.camera.zoom - pan.y;\n\n    // const debugDiv2 = document.getElementById('debug2');\n    // debugDiv2.style.width = `${screenW}px`;\n    // debugDiv2.style.height = `${screenH}px`;\n    // debugDiv2.style.left = `${screenX}px`;\n    // debugDiv2.style.top = `${screenY}px`;\n\n    // const screenRange = {\n    //   left: range.left / zoom - pan.x,\n    //   top: range.top / zoom - pan.y,\n    //   width: range.width / zoom,\n    //   height: range.height / zoom,\n    // };\n\n    // const debugDiv = document.getElementById('debug');\n    // debugDiv.style.width = `${screenRange.width}px`;\n    // debugDiv.style.height = `${screenRange.height}px`;\n    // debugDiv.style.left = `${screenRange.left}px`;\n    // debugDiv.style.top = `${screenRange.top}px`;\n\n    return !(\n      adjRight < range.left ||\n      adjLeft > range.left + range.width ||\n      adjBottom < range.top ||\n      adjTop > range.top + range.height\n    );\n  }\n\n  intersects(range: Rect): boolean {\n    const { left, top, width, height } = this.boundary;\n    return !(\n      range.left > left + width ||\n      range.left + range.width < left ||\n      range.top > top + height ||\n      range.top + range.height < top\n    );\n  }\n\n  checkNearby(coords: Coords, range: number): SpatialObject | null {\n    const bounds = {\n      left: coords.x - range / 2,\n      top: coords.y - range / 2,\n      width: range,\n      height: range,\n    };\n\n    const nearby = this.query(bounds, [], this.camera.pos, this.camera.zoom);\n\n    return nearby.length > 0 ? nearby[0] : null;\n  }\n}\n\n// import { Camera } from './Camera';\n\n// interface Point {\n//   x: number;\n//   y: number;\n//   id: string; // Unique ID of the connector\n// }\n\n// interface BoundingBox {\n//   x: number;\n//   y: number;\n//   width: number;\n//   height: number;\n// }\n\n// export class Quadtree {\n//   boundary: BoundingBox;\n//   capacity: number;\n//   points: Point[];\n//   divided: boolean;\n//   northeast: Quadtree | null;\n//   northwest: Quadtree | null;\n//   southeast: Quadtree | null;\n//   southwest: Quadtree | null;\n//   camera: Camera;\n\n//   constructor(boundary: BoundingBox, capacity: number, camera: Camera) {\n//     this.boundary = boundary;\n//     this.capacity = capacity;\n//     this.points = [];\n//     this.divided = false;\n//     this.northeast = null;\n//     this.northwest = null;\n//     this.southeast = null;\n//     this.southwest = null;\n//     this.camera = camera;\n//   }\n\n//   subdivide() {\n//     const { x, y, width, height } = this.boundary;\n//     const halfWidth = width / 2;\n//     const halfHeight = height / 2;\n\n//     this.northeast = new Quadtree(\n//       { x: x + halfWidth, y: y, width: halfWidth, height: halfHeight },\n//       this.capacity,\n//       this.camera,\n//     );\n//     this.northwest = new Quadtree(\n//       { x: x, y: y, width: halfWidth, height: halfHeight },\n//       this.capacity,\n//       this.camera,\n//     );\n//     this.southeast = new Quadtree(\n//       {\n//         x: x + halfWidth,\n//         y: y + halfHeight,\n//         width: halfWidth,\n//         height: halfHeight,\n//       },\n//       this.capacity,\n//       this.camera,\n//     );\n//     this.southwest = new Quadtree(\n//       { x: x, y: y + halfHeight, width: halfWidth, height: halfHeight },\n//       this.capacity,\n//       this.camera,\n//     );\n\n//     this.divided = true;\n//   }\n\n//   insert(point: Point): boolean {\n//     if (!this.contains(point)) return false;\n\n//     if (this.points.length < this.capacity) {\n//       this.points.push(point);\n//       return true;\n//     } else {\n//       if (!this.divided) this.subdivide();\n\n//       return (\n//         this.northeast!.insert(point) ||\n//         this.northwest!.insert(point) ||\n//         this.southeast!.insert(point) ||\n//         this.southwest!.insert(point)\n//       );\n//     }\n//   }\n\n//   insertItems(points: Point[]): void {\n//     for (let point of points) {\n//       this.insert(point);\n//     }\n//   }\n\n//   remove(id: string): boolean {\n//     const removeFromNode = (node: Quadtree | null): boolean => {\n//       if (node === null) return false;\n\n//       // Remove points from the node\n//       node.points = node.points.filter(point => point.id !== id);\n\n//       // Recursively remove from child nodes\n//       const removed =\n//         removeFromNode(node.northwest) ||\n//         removeFromNode(node.northeast) ||\n//         removeFromNode(node.southwest) ||\n//         removeFromNode(node.southeast);\n\n//       // If no points in the node and no children have points, remove the node\n//       if (node.points.length === 0 && !node.divided) {\n//         node.northwest =\n//           node.northeast =\n//           node.southwest =\n//           node.southeast =\n//             null;\n//       }\n\n//       return removed;\n//     };\n\n//     return removeFromNode(this);\n//   }\n\n//   removeItems(ids: string[]): void {\n//     for (let id of ids) {\n//       this.remove(id);\n//     }\n//   }\n\n//   contains(point: Point): boolean {\n//     const { x, y, width, height } = this.boundary;\n//     return (\n//       point.x >= x &&\n//       point.x < x + width &&\n//       point.y >= y &&\n//       point.y < y + height\n//     );\n//   }\n\n//   query(\n//     range: BoundingBox,\n//     found: Point[] = [],\n//     pan: { x: number; y: number },\n//     zoom: number,\n//   ): Point[] {\n//     if (!this.intersects(range)) return found;\n\n//     for (let point of this.points) {\n//       if (this.inRange(point, range, pan, zoom)) {\n//         found.push(point);\n//       }\n//     }\n\n//     if (this.divided) {\n//       this.northwest!.query(range, found, pan, zoom);\n//       this.northeast!.query(range, found, pan, zoom);\n//       this.southwest!.query(range, found, pan, zoom);\n//       this.southeast!.query(range, found, pan, zoom);\n//     }\n\n//     return found;\n//   }\n\n//   inRange(\n//     point: Point,\n//     range: BoundingBox,\n//     pan: { x: number; y: number },\n//     zoom: number,\n//   ): boolean {\n//     // Adjust the point position relative to pan and zoom\n//     const adjPoint = {\n//       x: (point.x + pan.x) * zoom,\n//       y: (point.y + pan.y) * zoom,\n//     };\n\n//     // Check if the adjusted point is within the adjusted range\n//     return (\n//       adjPoint.x >= range.x &&\n//       adjPoint.x < range.x + range.width &&\n//       adjPoint.y >= range.y &&\n//       adjPoint.y < range.y + range.height\n//     );\n//   }\n\n//   intersects(range: BoundingBox): boolean {\n//     const { x, y, width, height } = this.boundary;\n//     return !(\n//       range.x > x + width ||\n//       range.x + range.width < x ||\n//       range.y > y + height ||\n//       range.y + range.height < y\n//     );\n//   }\n\n//   checkNearby(\n//     x: number,\n//     y: number,\n//     range: number,\n//     // pan: { x: number; y: number },\n//     // zoom: number,\n//   ) {\n//     const bounds = {\n//       x: x - range / 2,\n//       y: y - range / 2,\n//       width: range,\n//       height: range,\n//     };\n\n//     const nearby = this.query(bounds, [], this.camera.pos, this.camera.zoom);\n\n//     if (nearby.length > 0) {\n//       const nearest = nearby[0];\n//       return nearest;\n//     }\n\n//     return null;\n//   }\n// }\n","import { nanoid } from 'nanoid';\nimport { Coords } from './Coords';\n\nexport class Camera {\n  uid: string;\n  pos: Coords;\n  zoom: number;\n\n  constructor() {\n    this.uid = nanoid();\n    this.pos = { x: 0, y: 0 };\n    this.zoom = 1;\n  }\n\n  toScreenCoords(worldCoords: Coords): Coords {\n    return {\n      x: (worldCoords.x - this.pos.x) * this.zoom,\n      y: (worldCoords.y - this.pos.y) * this.zoom,\n    };\n  }\n\n  toWorldCoords(screenCoords: Coords): Coords {\n    return {\n      x: screenCoords.x / this.zoom - this.pos.x,\n      y: screenCoords.y / this.zoom - this.pos.y,\n    };\n  }\n}\n","import { nanoid } from 'nanoid';\nimport { Rect } from './Rect';\nimport { Quadtree } from './Quadtree';\nimport { Camera } from './Camera';\nimport { Coords } from './Coords';\nimport { throttle } from '../utils/throttle';\nimport { Offset } from './Offset';\n\ntype EntityType = 'node' | 'connector' | 'connection' | 'viewport';\n\nexport class ViewContext {\n  static instances = new Map<string, ViewContext>();\n\n  uid: string;\n  nodes = new Map<string, HTMLLogicFlowNodeElement>();\n  connectors = new Map<string, HTMLLogicFlowConnectorElement>();\n  connectorSnapDistance = 10;\n  connections = new Map<string, HTMLLogicFlowConnectionElement>();\n  connectorRects = <Record<string, Rect>>{};\n  connectorQuadtree: Quadtree;\n  viewportQuadtree: Quadtree;\n  nodeRects = <Record<string, Rect>>{};\n  camera = new Camera();\n  observer: MutationObserver;\n  visibleElements: string[] = [];\n  prevVisibleElements: string[] = [];\n\n  // viewport variables\n  viewportEl: HTMLDivElement;\n  contentEl: HTMLDivElement;\n  gridEl: HTMLCanvasElement;\n  needsRedraw = true;\n  viewportRect: Rect;\n  initialPinchDistance = 0;\n  isPanning = false;\n  snapToGrid = false;\n  dragStart: Coords = { x: 0, y: 0 };\n  activeNode: HTMLLogicFlowNodeElement;\n  activeNodeDragging = false;\n  activeNodeDragStart: Coords = { x: 0, y: 0 };\n  activeConnector: HTMLLogicFlowConnectorElement;\n  activeConnectorStartPos: Coords = { x: 0, y: 0 };\n  activeConnection: HTMLLogicFlowConnectionElement;\n  viewportOffset: Offset = { top: 0, left: 0 };\n  bringingToFront = false;\n\n  debouncedUpdateVisibleElements = throttle(\n    () => this.updateVisibleElements(),\n    100,\n  );\n\n  constructor(viewport: HTMLLogicFlowViewportElement) {\n    const id = viewport.id || nanoid();\n    viewport.id = id;\n    const viewportId = id;\n    if (ViewContext.instances.has(viewportId)) {\n      return ViewContext.instances.get(viewportId);\n    }\n    this.uid = viewportId;\n    ViewContext.instances.set(this.uid, this);\n\n    if (!this.viewportRect) {\n      const rect = viewport.getBoundingClientRect();\n      this.viewportOffset = {\n        top: rect.top,\n        left: rect.left,\n      };\n      this.viewportRect = {\n        left: rect.left - rect.left,\n        top: rect.top - rect.top,\n        width: rect.width - rect.left,\n        height: rect.height - rect.top,\n      };\n      // this.updateViewportRect();\n    }\n\n    const boundry = {\n      left: this.viewportRect.left,\n      top: this.viewportRect.top,\n      width: this.viewportRect.width,\n      height: this.viewportRect.height,\n    };\n\n    this.connectorQuadtree = new Quadtree(boundry, 4, this.camera);\n    this.viewportQuadtree = new Quadtree(boundry, 4, this.camera);\n\n    ViewContext.initializeViewport(viewport);\n\n    this.observer = new MutationObserver((m: MutationRecord[]) =>\n      this.viewportMutation(m),\n    );\n    this.observer.observe(viewport, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  destroy() {\n    this.observer.disconnect();\n\n    ViewContext.instances.delete(this.uid);\n  }\n\n  updateViewportRect() {\n    const rect = this.viewportEl.getBoundingClientRect();\n    this.viewportOffset = {\n      top: rect.top,\n      left: rect.left,\n    };\n    this.viewportRect = {\n      left: rect.left - rect.left,\n      top: rect.top - rect.top,\n      width: rect.width - rect.left,\n      height: rect.height - rect.top,\n    };\n  }\n\n  static seekAndDestroy(type: EntityType, id: string) {\n    // search and destroy in all instances\n    for (const [, instance] of ViewContext.instances) {\n      switch (type) {\n        case 'node':\n          instance.unregisterNode(id);\n          break;\n        case 'connector':\n          instance.unregisterConnector(id);\n          break;\n        case 'connection':\n          instance.unregisterConnection(id);\n          break;\n        case 'viewport':\n          instance.destroy();\n          break;\n      }\n    }\n  }\n\n  registerNode(node: HTMLLogicFlowNodeElement) {\n    const id = nanoid();\n    node.id = id;\n    this.nodes.set(id, node);\n\n    // set data attribute for the context id\n    node.setAttribute('data-viewport', this.uid);\n\n    // update rect\n    const rect = node.getBoundingClientRect();\n    this.nodeRects[id] = {\n      left: node.position.x,\n      top: node.position.y,\n      width: rect.width,\n      height: rect.height,\n    };\n\n    // add to quadtree\n    this.updateViewportQuadtree(node);\n    this.updateNodeConnectorsQuadtree(node);\n\n    return id;\n  }\n\n  unregisterNode(id: string) {\n    // remove all connections and connectors associated with the node\n    // get connectors\n    const node = this.nodes.get(id);\n    if (node) {\n      // TODO: not sure if this is necessary with mutation observer\n\n      // const connectors = node.querySelectorAll('logic-flow-connector');\n      // connectors.forEach((connector: HTMLLogicFlowConnectorElement) => {\n      //   const cid = connector.id;\n      //   // remove connections\n      //   connector.connections.forEach(\n      //     (connection: HTMLLogicFlowConnectionElement) => {\n      //       const id = connection.id;\n      //       if (id) this.unregisterConnection(id);\n      //     },\n      //   );\n      //   // remove connector\n      //   this.unregisterConnector(cid);\n      // });\n\n      // remove from quadtree\n      this.viewportQuadtree.remove(id);\n      node.setAttribute('data-viewport', '');\n\n      // remove from nodes\n      this.nodes.delete(id);\n    }\n  }\n\n  registerConnector(connector: HTMLLogicFlowConnectorElement) {\n    const id = nanoid();\n    connector.id = id;\n    this.connectors.set(id, connector);\n    const connectorEl = connector.querySelector('.connector');\n    const rect = connectorEl.getBoundingClientRect();\n    this.connectorRects[id] = {\n      left: rect.x - this.viewportOffset.left,\n      top: rect.y - this.viewportOffset.top,\n      width: rect.width,\n      height: rect.height,\n    };\n\n    return id;\n  }\n\n  unregisterConnector(id: string) {\n    this.connectors.delete(id);\n    this.connectorQuadtree.remove(id);\n    delete this.connectorRects[id];\n  }\n\n  registerConnection(connection: HTMLLogicFlowConnectionElement) {\n    const id = nanoid();\n    connection.id = id;\n    this.connections.set(id, connection);\n    // set data attribute for the context id\n    connection.setAttribute('data-viewport', this.uid);\n\n    return id;\n  }\n\n  unregisterConnection(id: string) {\n    const connection = this.connections.get(id);\n    connection.setAttribute('data-viewport', '');\n    // remove from dom\n    const el = document.getElementById(id);\n    if (el) {\n      el.remove();\n    }\n\n    this.connections.delete(id);\n  }\n\n  // mutation observer callback\n  // when elements are added or removed from the dom\n  // we need to register or unregister them if they are nodes, connectors or connections\n  viewportMutation(mutations: MutationRecord[]) {\n    if (!mutations.length) return;\n    // happens whenu using bringNodeToFront\n    // - stop the observer from firing\n    // if (!this.registerNode) return;\n    if (this.bringingToFront) {\n      this.bringingToFront = false;\n      return;\n    }\n\n    mutations.forEach(mutation => {\n      if (mutation.type === 'childList') {\n        for (let i = 0; i < mutation.addedNodes.length; i++) {\n          const node = mutation.addedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-FLOW-NODE') {\n              const logicNode = node as HTMLLogicFlowNodeElement;\n              this.registerNode(logicNode);\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTOR') {\n              const logicConnector = node as HTMLLogicFlowConnectorElement;\n              this.registerConnector(logicConnector);\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTION') {\n              const logicConnection = node as HTMLLogicFlowConnectionElement;\n              this.registerConnection(logicConnection);\n            }\n          }\n        }\n\n        for (let i = 0; i < mutation.removedNodes.length; i++) {\n          const node = mutation.removedNodes[i];\n          if (node instanceof HTMLElement) {\n            if (node.tagName === 'LOGIC-FLOW-NODE') {\n              const logicNode = node as HTMLLogicFlowNodeElement;\n              this.unregisterNode(logicNode.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTOR') {\n              const logicConnector = node as HTMLLogicFlowConnectorElement;\n              this.unregisterConnector(logicConnector.getAttribute('id'));\n            } else if (node.tagName === 'LOGIC-FLOW-CONNECTION') {\n              const logicConnection = node as HTMLLogicFlowConnectionElement;\n              this.unregisterConnection(logicConnection.getAttribute('id'));\n            }\n          }\n        }\n      }\n    });\n  }\n\n  static initializeViewport(viewport: HTMLLogicFlowViewportElement) {\n    // need to register all nodes, connectors and connections\n    // that are already in the dom\n\n    const id = viewport.id;\n    const instance = ViewContext.instances.get(id);\n\n    const contentEl = viewport.querySelector('.viewport-content');\n    const children = contentEl.children;\n\n    const traverse = (el: HTMLElement) => {\n      if (el.tagName === 'LOGIC-FLOW-NODE') {\n        const logicNode = el as HTMLLogicFlowNodeElement;\n        instance.registerNode(logicNode);\n        console.log('registering node', logicNode.id);\n      } else if (el.tagName === 'LOGIC-FLOW-CONNECTOR') {\n        const logicConnector = el as HTMLLogicFlowConnectorElement;\n        instance.registerConnector(logicConnector);\n      } else if (el.tagName === 'LOGIC-FLOW-CONNECTION') {\n        const logicConnection = el as HTMLLogicFlowConnectionElement;\n        instance.registerConnection(logicConnection);\n      }\n\n      const children = el.children;\n      for (let i = 0; i < children.length; i++) {\n        traverse(children[i] as HTMLElement);\n      }\n    };\n\n    for (let i = 0; i < children.length; i++) {\n      traverse(children[i] as HTMLElement);\n    }\n  }\n\n  bringToFront(node: HTMLElement) {\n    this.bringingToFront = true;\n    node.parentElement?.appendChild(node);\n  }\n\n  static setCursor(cursor: string) {\n    document.body.style.cursor = cursor;\n  }\n\n  static resetCursor() {\n    document.body.style.cursor = 'default';\n  }\n\n  getRectCenter(rect: DOMRect | Rect) {\n    return {\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height / 2,\n    };\n  }\n\n  startPanning(worldCoords: Coords, cursor = 'grabbing') {\n    ViewContext.setCursor(cursor);\n    this.isPanning = true;\n    this.dragStart = worldCoords;\n  }\n\n  panCamera(loc: Coords) {\n    this.camera.pos = {\n      x: loc.x / this.camera.zoom - this.dragStart.x,\n      y: loc.y / this.camera.zoom - this.dragStart.y,\n    };\n\n    this.debouncedUpdateVisibleElements();\n  }\n\n  resetPointerStates() {\n    this.isPanning = false;\n    this.initialPinchDistance = 0;\n    ViewContext.resetCursor();\n  }\n\n  startNodeDrag(\n    target: HTMLLogicFlowNodeElement,\n    worldCoords: Coords,\n    cursor = 'grabbing',\n  ): boolean {\n    if (!target) return false;\n\n    const node = target.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n    if (!node) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeNode = node;\n    this.bringToFront(node);\n\n    const pos = this.activeNode.position;\n    this.activeNodeDragging = true;\n    this.activeNodeDragStart = {\n      x: worldCoords.x - pos.x,\n      y: worldCoords.y - pos.y,\n    };\n\n    return true;\n  }\n\n  updateNodeConnectorPos(aNode: HTMLLogicFlowNodeElement, delta: Coords) {\n    const connectors = aNode.querySelectorAll(\n      'logic-flow-connector',\n    ) as NodeListOf<HTMLLogicFlowConnectorElement>;\n\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      const rect = { ...this.connectorRects[connector.id] };\n      rect.left += delta.x;\n      rect.top += delta.y;\n      this.connectorRects[connector.id] = rect;\n\n      this.updateNodeConnectorConnectionsPos(connector, rect);\n    }\n  }\n\n  updateNodeConnectorConnectionsPos(\n    connector: HTMLLogicFlowConnectorElement,\n    rect: Rect,\n  ) {\n    if (connector.connections.length) {\n      const pos = this.getRectCenter(rect);\n\n      for (let i = 0; i < connector.connections.length; i++) {\n        const connection = connector.connections[i];\n        if (connector.type === 'input') {\n          connection.end = pos;\n        } else {\n          connection.start = pos;\n        }\n      }\n    }\n  }\n\n  calcSnapToGrid(pos: Coords, gridSize: number) {\n    return {\n      x: Math.round(pos.x / gridSize) * gridSize,\n      y: Math.round(pos.y / gridSize) * gridSize,\n    };\n  }\n\n  calcNodePos(worldCoords: Coords) {\n    const pos = {\n      x: worldCoords.x - this.activeNodeDragStart.x,\n      y: worldCoords.y - this.activeNodeDragStart.y,\n    };\n\n    if (!this.snapToGrid) return pos;\n\n    return this.calcSnapToGrid(pos, this.connectorSnapDistance);\n  }\n\n  moveNode(loc: Coords, gridSize: number) {\n    const aNode = this.activeNode;\n    const worldCoords = this.camera.toWorldCoords(loc);\n    const oldPos = aNode.position;\n\n    let newPos = this.calcNodePos(worldCoords);\n\n    // calc new position\n    if (this.snapToGrid) {\n      newPos = this.calcSnapToGrid(newPos, gridSize);\n    }\n\n    const delta = {\n      x: newPos.x - oldPos.x,\n      y: newPos.y - oldPos.y,\n    };\n\n    // update node rect\n    const rect = this.nodeRects[aNode.id];\n    rect.left = newPos.x;\n    rect.top = newPos.y;\n    rect.width = aNode.clientWidth || rect.width;\n    rect.height = aNode.clientHeight || rect.height;\n    this.nodeRects[aNode.id] = rect;\n\n    // update node position and it's connections\n    this.updateNodeConnectorPos(aNode, delta); // ???\n\n    aNode.position = newPos;\n  }\n\n  endNodeDrag() {\n    this.activeNodeDragging = false;\n    this.updateNodeConnectorsQuadtree(this.activeNode);\n    this.updateViewportQuadtree(this.activeNode);\n    this.activeNode = null;\n  }\n\n  createNewConnection(startPos: Coords, type: 'input' | 'output') {\n    const connection = document.createElement(\n      'logic-flow-connection',\n    ) as HTMLLogicFlowConnectionElement;\n    connection.start = startPos;\n    connection.end = startPos;\n    connection.type = type;\n\n    this.activeConnection = connection;\n    this.contentEl.appendChild(connection);\n  }\n\n  moveActiveConnection(loc: Coords, snappingDist: number) {\n    const aConn = this.activeConnection;\n    // const scrollOffset = {\n    //   x: window.scrollX,\n    //   y: window.screenY,\n    // };\n    // console.log(\n    //   'scrollOffset',\n    //   window.screenY,\n    //   window.scrollY,\n    //   this.viewportEl.offsetTop,\n    // );\n\n    const worldCoords = this.camera.toWorldCoords({\n      x: loc.x - this.viewportOffset.left,\n      y: loc.y - this.viewportOffset.top,\n    });\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappableConnector) {\n      const rect = this.connectorRects[snappableConnector.id];\n      aConn.end = this.getRectCenter(rect);\n    } else {\n      aConn.end = worldCoords;\n    }\n  }\n\n  getTargetConnector(target: HTMLElement, loc: Coords, snappingDist: number) {\n    let targetConnector = target.closest(\n      'logic-flow-connector .connector',\n    ) as HTMLLogicFlowConnectorElement;\n\n    // const scrollOffset = {\n    //   x: window.scrollX,\n    //   y: window.scrollY,\n    // };\n\n    const snappedConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (snappedConnector) {\n      targetConnector = this.connectors.get(snappedConnector.id);\n    }\n\n    return targetConnector;\n  }\n\n  startNewConnection(\n    target: HTMLLogicFlowConnectorElement,\n    cursor = 'grabbing',\n  ) {\n    if (!target) return false;\n\n    const connEl = target.closest(\n      'logic-flow-connector .connector',\n    ) as HTMLLogicFlowConnectorElement;\n    if (!connEl) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnector = connEl;\n\n    const parentConn = connEl.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n    const rect = this.connectorRects[parentConn.id];\n    const center = this.getRectCenter(rect);\n\n    this.createNewConnection(center, parentConn.type);\n\n    return true;\n  }\n\n  processConnection(target: HTMLLogicFlowConnectorElement) {\n    const aConn = this.activeConnector.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n    const tConn = target.closest(\n      'logic-flow-connector',\n    ) as HTMLLogicFlowConnectorElement;\n\n    // find parent nodes\n    const aNode = aConn.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n    const tNode = tConn.closest('logic-flow-node') as HTMLLogicFlowNodeElement;\n\n    // validate connection\n    if (!this.isValidConnection(aConn, tConn, aNode, tNode, target)) {\n      this.activeConnection.remove();\n      return;\n    }\n\n    this.updateConnectionEndpoints(aConn, tConn);\n    this.finalizeConnection(aConn, tConn);\n  }\n\n  isValidConnection(\n    aConn: HTMLLogicFlowConnectorElement,\n    tConn: HTMLLogicFlowConnectorElement,\n    aNode: HTMLLogicFlowNodeElement,\n    tNode: HTMLLogicFlowNodeElement,\n    targetConn: HTMLLogicFlowConnectorElement,\n  ) {\n    // avoid connecting to self or already connected\n    if (\n      this.activeConnector.connectingConnector === tConn ||\n      tConn.connectingConnector === aConn\n    ) {\n      // perhaps send an error event\n      // console.log('already connected');\n      return false;\n    }\n\n    if (aNode === tNode || this.activeConnector === targetConn) {\n      // connecting to self\n      return false;\n    }\n\n    // ensure is between input/output not same type\n    if (aConn.type === tConn.type) {\n      // console.log('same type');\n      return false;\n    }\n\n    return true;\n  }\n\n  updateConnectionEndpoints(\n    active: HTMLLogicFlowConnectorElement,\n    target: HTMLLogicFlowConnectorElement,\n  ) {\n    const targRect = this.connectorRects[target.id];\n\n    if (active.type === 'input') {\n      // swap start and end connections\n      this.activeConnection.start = this.getRectCenter(targRect);\n      this.activeConnection.end = this.activeConnectorStartPos;\n      this.activeConnection.type = 'output';\n\n      const rect = this.connectorRects[active.id];\n      this.activeConnection.end = this.getRectCenter(rect);\n    } else {\n      this.activeConnection.end = this.getRectCenter(targRect);\n    }\n  }\n\n  finalizeConnection(\n    active: HTMLLogicFlowConnectorElement,\n    target: HTMLLogicFlowConnectorElement,\n  ) {\n    active.connectingConnector = target;\n    active.connections.push(this.activeConnection);\n    target.connectingConnector = active;\n    target.connections.push(this.activeConnection);\n  }\n\n  startDisconnectConnection(\n    target: HTMLLogicFlowConnectionElement,\n    loc: Coords,\n    snappingDist: number,\n    cursor = 'grabbing',\n  ) {\n    if (!target) return false;\n\n    const connection = target.closest(\n      'logic-flow-connection',\n    ) as HTMLLogicFlowConnectionElement;\n    if (!connection) return false;\n\n    this.bringToFront(connection);\n\n    // const scrollOffset = {\n    //   x: window.scrollX,\n    //   y: window.scrollY,\n    // };\n\n    const snappableConnector = this.connectorQuadtree.checkNearby(\n      {\n        x: loc.x - this.viewportOffset.left,\n        y: loc.y - this.viewportOffset.top,\n      },\n      snappingDist * this.camera.zoom,\n    );\n\n    if (!snappableConnector) return false;\n\n    ViewContext.setCursor(cursor);\n    this.activeConnection = connection;\n\n    const snapConnector = this.connectors.get(snappableConnector.id);\n    this.activeConnector =\n      snapConnector.connectingConnector as HTMLLogicFlowConnectorElement;\n\n    this.disconnectConnector(\n      this.activeConnection,\n      this.activeConnector,\n      snapConnector,\n    );\n\n    // handle type specific logic\n    if (this.activeConnector.type === 'input') {\n      this.swapConnectionEndpoints(this.activeConnection);\n      this.activeConnection.type = 'input';\n    }\n\n    return true;\n  }\n\n  disconnectConnector(\n    connection: HTMLLogicFlowConnectionElement,\n    connector: HTMLLogicFlowConnectorElement,\n    snapConnector: HTMLLogicFlowConnectorElement,\n  ) {\n    connector.connections = connector.connections.filter(c => c !== connection);\n    snapConnector.connections = snapConnector.connections.filter(\n      c => c !== connection,\n    );\n\n    connector.connectingConnector = null;\n    snapConnector.connectingConnector = null;\n  }\n\n  swapConnectionEndpoints(connection: HTMLLogicFlowConnectionElement) {\n    const { start, end } = connection;\n    connection.start = end;\n    connection.end = start;\n  }\n\n  updateNodeConnectorsQuadtree(node: HTMLLogicFlowNodeElement) {\n    const connectors = node.querySelectorAll(\n      'logic-flow-connector',\n    ) as NodeListOf<HTMLLogicFlowConnectorElement>;\n    for (let i = 0; i < connectors.length; i++) {\n      const connector = connectors[i];\n      let rect = this.connectorRects[connector.id];\n      if (!rect) {\n        const connectorEl = connector.querySelector('.connector');\n        const r = connectorEl.getBoundingClientRect();\n        this.connectorRects[connector.id] = {\n          left: r.x,\n          top: r.y,\n          width: r.width,\n          height: r.height,\n        };\n        rect = this.connectorRects[connector.id];\n      }\n\n      this.connectorQuadtree.remove(connector.id);\n      this.connectorQuadtree.insert({\n        id: connector.id,\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height / 2,\n      });\n    }\n  }\n\n  updateViewportQuadtree(node: HTMLLogicFlowNodeElement) {\n    const rect = this.nodeRects[node.id];\n\n    this.viewportQuadtree.remove(node.id);\n    // let rect = node.getBoundingClientRect() as Rect;\n\n    // rect = {\n    //   left: node.position.x,\n    //   top: node.position.y,\n    //   width: node.clientWidth,\n    //   height: node.clientHeight,\n    // };\n\n    this.viewportQuadtree.insert({\n      id: node.id,\n      top: rect.top,\n      left: rect.left,\n      width: rect.width,\n      height: rect.height,\n    });\n\n    // console.log('updateViewportQuadtree', node.id, rect);\n    // console.log('updateViewportQuadtree', this.viewportQuadtree.objects);\n  }\n\n  updateVisibleElements() {\n    // Get visible nodes within the viewport quadtree\n    let rect = this.viewportRect;\n    rect = {\n      left: rect.left,\n      top: rect.top,\n      width: rect.width,\n      height: rect.height,\n    };\n\n    const visibleNodes = this.viewportQuadtree.query(\n      rect,\n      [],\n      this.camera.pos,\n      this.camera.zoom,\n    );\n\n    const newVisibleElements = visibleNodes.map((node: any) => node.id);\n    // console.log('newVisibleElements', newVisibleElements);\n\n    const allItems = new Set([\n      ...this.prevVisibleElements,\n      ...newVisibleElements,\n    ]);\n\n    // Update the previous visible elements\n    this.prevVisibleElements = newVisibleElements;\n\n    // Update elements that changed visibility\n    for (const id of allItems) {\n      const el = document.getElementById(id);\n      if (el) {\n        const nodeComponent = el as HTMLLogicFlowNodeElement;\n        const curstate = nodeComponent.isVisible;\n        const prevState = this.prevVisibleElements.includes(id);\n        const newstate = newVisibleElements.includes(id);\n        if (prevState === curstate && newstate === curstate) {\n          continue;\n        }\n\n        nodeComponent.isVisible = newVisibleElements.includes(id);\n      }\n    }\n  }\n}\n","import { Camera } from '../types/Camera';\n\nexport const renderCanvasGrid = (\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  gridSize: number,\n  color: string,\n  bgColor: string,\n  camera: Camera,\n) => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n\n  let step = gridSize * camera.zoom;\n\n  // if the step is too small because of zoom, increase it by a factor of 10\n  if (step < 10) {\n    step *= 2;\n  }\n\n  // const dpr = window.devicePixelRatio || 1;\n  // canvas.width = width * dpr;\n  // canvas.height = height * dpr;\n  // ctx.scale(dpr, dpr);\n\n  // canvas.width = width;\n  // canvas.height = height;\n\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n\n  //clear\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(0, 0, width, height);\n\n  const offsetX = (-camera.pos.x % gridSize) * camera.zoom;\n  const offsetY = (-camera.pos.y % gridSize) * camera.zoom;\n\n  ctx.beginPath();\n\n  for (let x = -offsetX; x < width; x += step) {\n    ctx.moveTo(x, 0);\n    ctx.lineTo(x, height);\n  }\n\n  for (let y = -offsetY; y < height; y += step) {\n    ctx.moveTo(0, y);\n    ctx.lineTo(width, y);\n  }\n\n  ctx.stroke();\n};\n\nexport const renderCanvasDotGrid = (\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  gridSize: number,\n  color: string,\n  bgColor: string,\n  camera: Camera,\n) => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n\n  let step = gridSize * camera.zoom;\n\n  // if the step is too small because of zoom, increase it by a factor of 10\n  if (step < 10) {\n    step *= 2;\n  }\n\n  // const dpr = window.devicePixelRatio || 1;\n  // canvas.width = width * dpr;\n  // canvas.height = height * dpr;\n  // ctx.scale(dpr, dpr);\n\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n\n  //clear\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(0, 0, width, height);\n\n  const offsetX = (-camera.pos.x % gridSize) * camera.zoom;\n  const offsetY = (-camera.pos.y % gridSize) * camera.zoom;\n\n  ctx.beginPath();\n\n  // for (let x = -offsetX; x < width; x += step) {\n  //   for (let y = -offsetY; y < height; y += step) {\n  //     ctx.moveTo(x, y);\n  //     ctx.arc(x, y, 1, 0, 2 * Math.PI);\n  //   }\n  // }\n\n  ctx.fillStyle = color;\n\n  for (let x = -offsetX; x < width; x += step) {\n    for (let y = -offsetY; y < height; y += step) {\n      //  ctx.moveTo(x, y);\n      //  ctx.arc(x, y, 1, 0, 2 * Math.PI);\n      // use fill rect\n      ctx.fillRect(x - 1, y - 1, 2, 2);\n    }\n  }\n\n  ctx.stroke();\n};\n",":host {\n  display: block;\n}\n","import { Component, Prop, h, Element, Watch, Method } from '@stencil/core';\nimport { debounce } from '../../utils/debounce';\nimport { throttle } from '../../utils/throttle';\nimport { getEventLocation } from '../../utils/getEventLocation';\nimport { ViewContext } from '../../types/ViewContext';\nimport {\n  renderCanvasDotGrid,\n  renderCanvasGrid,\n} from '../../utils/renderCanvasGrid';\nimport { Coords } from '../../types/Coords';\n\n@Component({\n  tag: 'logic-flow-viewport',\n  styleUrl: 'logic-flow-viewport.css',\n  shadow: false,\n})\nexport class LogicFlowViewport {\n  @Element() el: HTMLLogicFlowViewportElement;\n\n  // @Prop() showGrid: boolean = true;\n  // @Prop() showDotGrid: boolean = false;\n  @Prop() showGrid: boolean = true;\n  @Prop() gridType: 'line' | 'dot' = 'line';\n  @Prop() gridSize: number = 20;\n  @Prop() gridBgColor: string = '#f7f7f7';\n  @Prop() gridLineColor: string = '#555555';\n  @Prop() maxZoom: number = 3;\n  @Prop() minZoom: number = 0.2;\n  @Prop() zoomSpeed: number = 0.08;\n  @Prop() snapToGrid: boolean = false;\n  @Prop() connectorSnappingDistance: number = 37;\n  @Prop() cursors: Record<string, string> = {\n    default: 'auto',\n    panning: 'grabbing',\n    moving: 'grabbing',\n  };\n\n  ctx: ViewContext;\n\n  resizeObserver: ResizeObserver;\n  debouncedResize = debounce(() => this.onResize(), 16);\n  debouncedUpdateScreen = debounce(() => this.updateScreen(), 1);\n  debouncedUpdateViewportRect = debounce(\n    () => this.ctx.updateViewportRect(),\n    100,\n  );\n  throttledTouchMove = throttle(e => this.handleTouchMove(e), 1);\n  forceContentReflowDebounced = debounce(() => this.forceContentReflow(), 30);\n\n  elMouseDown = (e: MouseEvent | TouchEvent) => this.onPointerDown(e);\n  elMouseUp = (e: MouseEvent | TouchEvent) => this.onPointerUp(e);\n  elMouseMove = (e: MouseEvent | TouchEvent) => this.onPointerMove(e);\n\n  elTouchStart = (e: TouchEvent) => this.handleTouchStart(e);\n  elTouchMove = (e: TouchEvent) => this.throttledTouchMove(e);\n  elTouchEnd = (e: MouseEvent | TouchEvent) => this.onPointerUp(e);\n\n  elWheel = (e: WheelEvent) => this.handleWheel(e);\n\n  elScroll = () => this.debouncedUpdateViewportRect();\n\n  componentDidLoad() {\n    this.ctx = new ViewContext(this.el);\n    // this.ctx.camera = this.ctx.camera;\n\n    this.ctx.viewportEl = this.el.querySelector(\n      '.logic-flow-viewport',\n    ) as HTMLDivElement;\n    this.ctx.contentEl = this.el.querySelector(\n      '.viewport-content',\n    ) as HTMLDivElement;\n    this.ctx.gridEl = this.el.querySelector(\n      '.logic-flow-grid',\n    ) as HTMLCanvasElement;\n    // this.ctx.viewportRect = this.ctx.viewportEl.getBoundingClientRect();\n    this.ctx.initialPinchDistance = 0;\n    this.ctx.snapToGrid = this.snapToGrid;\n    this.ctx.connectorSnapDistance = this.connectorSnappingDistance;\n\n    const viewportEl = this.ctx.viewportEl;\n\n    // setup event listeners\n    window.addEventListener('mousedown', this.elMouseDown, {\n      passive: true,\n    });\n    viewportEl.addEventListener('mouseup', this.elMouseUp, { passive: true });\n    viewportEl.addEventListener('mousemove', this.elMouseMove, {\n      passive: true,\n    });\n\n    viewportEl.addEventListener('touchstart', this.elTouchStart, {\n      passive: false,\n    });\n    viewportEl.addEventListener('touchmove', this.elTouchMove, {\n      passive: false,\n    });\n    viewportEl.addEventListener('touchend', this.elTouchEnd, { passive: true });\n\n    viewportEl.addEventListener('wheel', this.elWheel, { passive: false });\n\n    window.addEventListener('scroll', this.elScroll, { passive: true });\n\n    // Handle resize events\n    this.resizeObserver = new ResizeObserver(() => this.debouncedResize());\n    this.resizeObserver.observe(this.ctx.viewportEl);\n\n    this.renderGrid();\n  }\n\n  disconnectedCallback() {\n    // Clean up resize observer\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n\n    // Clean up event listeners\n    const canvasEl = this.ctx.viewportEl;\n    window.removeEventListener('mousedown', this.elMouseDown);\n    canvasEl.removeEventListener('mouseup', this.elMouseUp);\n    canvasEl.removeEventListener('mousemove', this.elMouseMove);\n\n    canvasEl.removeEventListener('touchstart', this.elTouchStart);\n    canvasEl.removeEventListener('touchmove', this.elTouchMove);\n    canvasEl.removeEventListener('touchend', this.elTouchEnd);\n\n    canvasEl.removeEventListener('wheel', this.elWheel);\n\n    window.removeEventListener('scroll', this.elScroll);\n\n    this.ctx.destroy();\n  }\n\n  @Method()\n  async getCamera() {\n    return this.ctx.camera;\n  }\n\n  @Method()\n  async screenToWorldCoords(screenCoords: Coords) {\n    // adjust screen coords to viewport offset\n    const loc = {\n      x: screenCoords.x - this.ctx.viewportOffset.left,\n      y: screenCoords.y - this.ctx.viewportOffset.top,\n    };\n\n    return this.ctx.camera.toWorldCoords(loc);\n  }\n\n  @Watch('snapToGrid')\n  onSnapToGridChange() {\n    this.ctx.snapToGrid = this.snapToGrid;\n  }\n\n  @Watch('gridType')\n  onGridTypeChange() {\n    this.ctx.needsRedraw = true;\n    this.renderGrid();\n  }\n\n  scheduleComponentUpdate() {\n    this.ctx.needsRedraw = true;\n    this.ctx.debouncedUpdateVisibleElements();\n    this.debouncedUpdateScreen();\n  }\n\n  onResize() {\n    // console.log('onResize');\n    this.ctx.needsRedraw = true;\n    this.ctx.viewportRect = this.ctx.viewportEl.getBoundingClientRect();\n\n    this.ctx.gridEl.width = this.ctx.viewportRect.width;\n    this.ctx.gridEl.height = this.ctx.viewportRect.height;\n\n    this.ctx.viewportOffset = {\n      top: this.ctx.viewportRect.top,\n      left: this.ctx.viewportRect.left,\n    };\n\n    // update quadtree boundary\n    const boundary = {\n      left: this.ctx.viewportRect.left - this.ctx.viewportRect.left,\n      top: this.ctx.viewportRect.top - this.ctx.viewportRect.top,\n      width: this.ctx.viewportRect.width,\n      height: this.ctx.viewportRect.height,\n    };\n\n    // get set viewport rect\n    this.ctx.viewportRect = boundary;\n\n    this.ctx.connectorQuadtree.boundary = this.ctx.viewportRect;\n    this.ctx.viewportQuadtree.boundary = this.ctx.viewportRect;\n\n    this.renderGrid();\n  }\n\n  renderGrid() {\n    if (!this.showGrid || !this.ctx.needsRedraw) return;\n\n    console.log(this.gridType);\n\n    requestAnimationFrame(() => {\n      if (this.gridType === 'line') {\n        renderCanvasGrid(\n          this.ctx.gridEl,\n          this.ctx.viewportRect.width,\n          this.ctx.viewportRect.height,\n          this.gridSize,\n          this.gridLineColor,\n          this.gridBgColor,\n          this.ctx.camera,\n        );\n      }\n\n      if (this.gridType === 'dot') {\n        renderCanvasDotGrid(\n          this.ctx.gridEl,\n          this.ctx.viewportRect.width,\n          this.ctx.viewportRect.height,\n          this.gridSize,\n          this.gridLineColor,\n          this.gridBgColor,\n          this.ctx.camera,\n        );\n      }\n    });\n\n    this.ctx.needsRedraw = false;\n  }\n\n  updateScreen() {\n    requestAnimationFrame(() => {\n      const contentEl = this.ctx.contentEl;\n      // Apply transformations to the content, aligning with the grid\n      contentEl.style.transform = `perspective(1px) scale(${this.ctx.camera.zoom}) translate(${this.ctx.camera.pos.x}px, ${this.ctx.camera.pos.y}px)`;\n      this.renderGrid();\n    });\n  }\n\n  onPointerDown(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n    const worldCoords = this.ctx.camera.toWorldCoords(loc);\n    const target = document.elementFromPoint(loc.x, loc.y) as HTMLElement;\n    console.log(this.ctx.viewportOffset);\n\n    // if pointer outside viewport, return\n    if (\n      loc.x > this.ctx.viewportOffset.left + this.ctx.viewportRect.width ||\n      loc.x < this.ctx.viewportOffset.left ||\n      loc.y > this.ctx.viewportOffset.top + this.ctx.viewportRect.height ||\n      loc.y < this.ctx.viewportOffset.top\n    ) {\n      return;\n    }\n\n    // if target is not a logic-flow element, return\n    if (\n      !target ||\n      !target.closest(\n        'logic-flow-node, logic-flow-connector, logic-flow-connection, logic-flow-viewport',\n      )\n    ) {\n      return;\n    }\n\n    // if a connection clicked\n    if (\n      this.ctx.startDisconnectConnection(\n        target as HTMLLogicFlowConnectionElement,\n        loc,\n        this.connectorSnappingDistance,\n        this.cursors.moving,\n      )\n    )\n      return;\n\n    // if a connector clicked\n    if (this.ctx.startNewConnection(target as HTMLLogicFlowConnectorElement))\n      return;\n\n    // if a node clicked\n    if (this.ctx.startNodeDrag(target as HTMLLogicFlowNodeElement, worldCoords))\n      return;\n\n    // if nothing clicked, then start panning\n    this.ctx.startPanning(worldCoords);\n  }\n\n  onPointerUp(event: MouseEvent | TouchEvent) {\n    if (this.ctx.activeConnector && this.ctx.activeConnection) {\n      this.onEndActiveConnection(event);\n    } else if (this.ctx.activeNode && this.ctx.activeNodeDragging) {\n      this.ctx.endNodeDrag();\n    }\n\n    this.ctx.resetPointerStates();\n  }\n\n  onEndActiveConnection(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n    let target = event.target as HTMLElement;\n\n    // For touch events, get the element at the touch point\n    if (event instanceof TouchEvent) {\n      target = document.elementFromPoint(loc.x, loc.y) as HTMLElement;\n    }\n\n    let targetConnector = this.ctx.getTargetConnector(\n      target,\n      loc,\n      this.connectorSnappingDistance,\n    );\n\n    if (targetConnector) {\n      this.ctx.processConnection(targetConnector);\n    } else {\n      this.ctx.activeConnection.remove();\n    }\n\n    // clear active states\n    this.ctx.activeConnector = null;\n    this.ctx.activeConnection = null;\n  }\n\n  onPointerMove(event: MouseEvent | TouchEvent) {\n    const loc = getEventLocation(event);\n\n    if (this.ctx.activeConnector && this.ctx.activeConnection) {\n      this.ctx.moveActiveConnection(loc, this.connectorSnappingDistance);\n    } else if (this.ctx.activeNode && this.ctx.activeNodeDragging) {\n      this.ctx.moveNode(loc, this.gridSize);\n    } else if (this.ctx.isPanning) {\n      this.ctx.panCamera(loc);\n      this.scheduleComponentUpdate();\n    }\n  }\n\n  handleWheel(event: WheelEvent) {\n    event.preventDefault();\n\n    const canvasRect = this.ctx.viewportRect;\n    const mouseX =\n      event.clientX - canvasRect.left - this.ctx.viewportOffset.left;\n    const mouseY = event.clientY - canvasRect.top - this.ctx.viewportOffset.top;\n\n    // Calculate the zoom level change\n    const zoomDelta = event.deltaY < 0 ? this.zoomSpeed : -this.zoomSpeed;\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.ctx.camera.zoom + zoomDelta),\n    );\n\n    // Calculate the scale factor\n    const scaleFactor = newZoom / this.ctx.camera.zoom;\n\n    // Adjust the pan position to keep the same point under the cursor\n    const newPanX =\n      mouseX -\n      (mouseX - this.ctx.camera.pos.x * this.ctx.camera.zoom) * scaleFactor;\n\n    const newPanY =\n      mouseY -\n      (mouseY - this.ctx.camera.pos.y * this.ctx.camera.zoom) * scaleFactor;\n\n    // Update pan and zoom\n    this.ctx.camera.pos = { x: newPanX / newZoom, y: newPanY / newZoom };\n\n    // this.lastZoom = this.ctx.camera.zoom;\n    this.ctx.camera.zoom = newZoom;\n\n    // if zooming in, force a reflow to prevent blurry text\n    if (zoomDelta > 0) {\n      this.forceContentReflowDebounced();\n    }\n\n    // this.ctx.needsRedraw = true;\n    this.scheduleComponentUpdate();\n  }\n\n  handleTouchStart(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> start panning\n      this.onPointerDown(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> start pinch zoom\n      this.ctx.initialPinchDistance = 0; // Reset initial pinch distance\n      this.handlePinch(event); // Start pinch gesture\n    }\n  }\n\n  handleTouchMove(event: TouchEvent) {\n    if (event.touches.length === 1) {\n      // Single touch -> panning\n      this.onPointerMove(event);\n    } else if (event.touches.length === 2) {\n      // Multi-touch -> pinch zooming\n      this.handlePinch(event);\n    }\n  }\n\n  handlePinch(event: TouchEvent) {\n    if (event.touches.length !== 2) return;\n\n    // handle panning while pinching\n    this.onPointerMove(event);\n\n    event.preventDefault(); // Prevent default behavior like scrolling\n\n    const touch1 = event.touches[0];\n    const touch2 = event.touches[1];\n\n    // Calculate the distance between the two touch points (pinch)\n    const distance = Math.sqrt(\n      (touch1.clientX - touch2.clientX) ** 2 +\n        (touch1.clientY - touch2.clientY) ** 2,\n    );\n\n    if (this.ctx.initialPinchDistance === 0) {\n      // If it's the start of the pinch, initialize the pinch distance\n      this.ctx.initialPinchDistance = distance;\n    } else {\n      // Calculate the scale factor based on the distance change\n      const scaleFactor = distance / this.ctx.initialPinchDistance;\n\n      // Calculate the midpoint between the two fingers (the pinch center)\n      const pinchCenterX = (touch1.clientX + touch2.clientX) / 2;\n      const pinchCenterY = (touch1.clientY + touch2.clientY) / 2;\n\n      // Apply zoom and keep the pinch center fixed\n      this.adjustZoomOnPinch(scaleFactor, pinchCenterX, pinchCenterY);\n\n      // Update the initial pinch distance for the next move\n      this.ctx.initialPinchDistance = distance;\n    }\n  }\n\n  adjustZoomOnPinch(\n    scaleFactor: number,\n    pinchCenterX: number,\n    pinchCenterY: number,\n  ) {\n    // Calculate new zoom, ensuring it stays within min/max bounds\n    const newZoom = Math.min(\n      this.maxZoom,\n      Math.max(this.minZoom, this.ctx.camera.zoom * scaleFactor),\n    );\n\n    // Find the pinch center position relative to the content's current position and zoom\n    const pinchContentX =\n      (pinchCenterX - this.ctx.camera.pos.x * this.ctx.camera.zoom) /\n      this.ctx.camera.zoom;\n    const pinchContentY =\n      (pinchCenterY - this.ctx.camera.pos.y * this.ctx.camera.zoom) /\n      this.ctx.camera.zoom;\n\n    // Adjust pan so the pinch center stays fixed after zooming\n    this.ctx.camera.pos = {\n      x: pinchCenterX / newZoom - pinchContentX,\n      y: pinchCenterY / newZoom - pinchContentY,\n    };\n\n    // Apply the new zoom level\n    this.ctx.camera.zoom = newZoom;\n\n    // Trigger a screen redraw\n    this.debouncedUpdateScreen();\n  }\n\n  forceContentReflow() {\n    // force repaint the content\n    const cdisplay = this.ctx.contentEl.style.display;\n    this.ctx.contentEl.style.display = 'none';\n    this.ctx.contentEl.offsetHeight; // trigger reflow\n    this.ctx.contentEl.style.display = cdisplay;\n  }\n\n  render() {\n    return (\n      // <Host>\n      <div class=\"logic-flow-viewport\">\n        <canvas\n          class=\"logic-flow-grid\"\n          style={{ display: this.showGrid ? 'block' : 'none' }}\n        ></canvas>\n        <div class=\"viewport-content\">\n          <slot></slot>\n        </div>\n      </div>\n      // /* </Host> */\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}